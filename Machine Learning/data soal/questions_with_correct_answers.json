{
    "quiz": [
        {
            "instruction": "Write a python program to check if two sequences are identical.",
            "question": "def check_seq(seq1, seq2):\n    ___ (seq1) != len (seq2): \n        return False\n    else: \n        ___ in range(len (seq1)):\n            ___[i] != seq2[i]:\n                return False\n    return True",
            "correct_answer": "def check_seq(seq1, seq2):\n    if len (seq1) != len (seq2): \n        return False\n    else: \n        for i in range(len (seq1)):\n            if seq1[i] != seq2[i]:\n                return False\n    return True"
        },
        {
            "instruction": "Write a Python program to take user input and check if it is a palindrome or not.",
            "question": "def isPalindrome(inp):\n inp = inp.lower()\n return inp == inp[::-1]\n\nuser_input = input('Enter string: ')\n___(user_input):\n print('It\\'s a palindrome')\nelse:\n print('It\\'s not a palindrome')",
            "correct_answer": "def isPalindrome(inp):\n inp = inp.lower()\n return inp == inp[::-1]\n\nuser_input = input('Enter string: ')\nif isPalindrome(user_input):\n print('It\\'s a palindrome')\nelse:\n print('It\\'s not a palindrome')"
        },
        {
            "instruction": "Write a Python script that uses recursion to calculate the Fibonacci sequence for a given number of terms.",
            "question": "def Fibonacci(n): \n   ___<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n \n# Driver Program \nn = 6\nprint(Fibonacci(n))",
            "correct_answer": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n \n# Driver Program \nn = 6\nprint(Fibonacci(n))"
        },
        {
            "instruction": "Create an API wrapper in Python for the following API",
            "question": "import requests \n\n# API wrapper ___ given API \ndef api_wrapper(url): \n    # get the API response \n    response = requests.get(url) \n\n    # check the response status \n    if(response.status_code == 200): \n        # return json data \n        return response.json()\n    else: \n        return None",
            "correct_answer": "import requests \n\n# API wrapper for the given API \ndef api_wrapper(url): \n    # get the API response \n    response = requests.get(url) \n\n    # check the response status \n    if(response.status_code == 200): \n        # return json data \n        return response.json()\n    else: \n        return None"
        },
        {
            "instruction": "Design a function in Python to determine if a given number is prime.",
            "question": "def is_prime(n):\n    ___ <= 1: \n        return False\n    ___ == 2: \n        return True\n    ___ > 2 and n % 2 == 0: \n        return False\n\n    sqrt_n = int(n**0.5)\n    ___ in range(3, sqrt_n+1, 2):\n        ___ % i == 0:\n            return False\n    return True\n\n___(37):\n    print('37 is a prime number!')",
            "correct_answer": "def is_prime(n):\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n > 2 and n % 2 == 0: \n        return False\n\n    sqrt_n = int(n**0.5)\n    for i in range(3, sqrt_n+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(37):\n    print('37 is a prime number!')"
        },
        {
            "instruction": "Construct a python program to check if two given strings are anagrams.",
            "question": "def isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    ___ != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    ___ in range(n1):  \n        ___[i] != str2[i]:  \n            return False\n    return True",
            "correct_answer": "def isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    if n1 != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    for i in range(n1):  \n        if str1[i] != str2[i]:  \n            return False\n    return True"
        },
        {
            "instruction": "Create a Python program that reads an integer from the console and prints \"true\" if the number is even, and \"false\" if the number is odd.",
            "question": "num = int(input())\n___ % 2 == 0:\n    print(\"true\")\nelse:\n    print(\"false\")",
            "correct_answer": "num = int(input())\nif num % 2 == 0:\n    print(\"true\")\nelse:\n    print(\"false\")"
        },
        {
            "instruction": "Design a function for ordering a pizza in Python and use it to order a pizza with 3 toppings.",
            "question": "def orderPizza(toppings):\n    print(\"Ordering a pizza with the following toppings:\")\n    ___ in toppings:\n      print(topping)\n    print(\"Thank you!\")\norderPizza([\"Pepperoni\", \"Mushroom\", \"Olives\"])",
            "correct_answer": "def orderPizza(toppings):\n    print(\"Ordering a pizza with the following toppings:\")\n    for topping in toppings:\n      print(topping)\n    print(\"Thank you!\")\norderPizza([\"Pepperoni\", \"Mushroom\", \"Olives\"])"
        },
        {
            "instruction": "Design a Python program for verifying the two strings are rotations of each other?",
            "question": "def check_rotation(str1, str2): \n\t___(str1) != len(str2): \n\t\treturn False\n\ttemp = str1 + str1\n\treturn (str2 in temp) \n\ns1 = \"Hello World\"\ns2 = \"World Hello\"\n___(s1, s2): \n\tprint('These strings are rotations of each other'); \nelse: \n\tprint('These strings are not rotations of each other')",
            "correct_answer": "def check_rotation(str1, str2): \n\tif len(str1) != len(str2): \n\t\treturn False\n\ttemp = str1 + str1\n\treturn (str2 in temp) \n\ns1 = \"Hello World\"\ns2 = \"World Hello\"\nif check_rotation(s1, s2): \n\tprint('These strings are rotations of each other'); \nelse: \n\tprint('These strings are not rotations of each other')"
        },
        {
            "instruction": "Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met.",
            "question": "def check_input(arg1, arg2):\n   ___(arg1) is not int or type(arg2) is not int:\n      return \"The input must be a number!\"\n   else:\n      return \"The input is valid!\"",
            "correct_answer": "def check_input(arg1, arg2):\n   if type(arg1) is not int or type(arg2) is not int:\n      return \"The input must be a number!\"\n   else:\n      return \"The input is valid!\""
        },
        {
            "instruction": "Create a program in Python to check for duplicate words in a given sentence.",
            "question": "sentence = \"I am going to the store to buy food\"\n\nwords = sentence.split(' ')\n\n#Table to keep track of duplicates\ntable = []\n\n___ in words:\n ___ in table:\n print(\"Duplicate word found: \"+word)\n else:\n table.append(word)",
            "correct_answer": "sentence = \"I am going to the store to buy food\"\n\nwords = sentence.split(' ')\n\n#Table to keep track of duplicates\ntable = []\n\nfor word in words:\n if word in table:\n print(\"Duplicate word found: \"+word)\n else:\n table.append(word)"
        },
        {
            "instruction": "Generate the following sequence using a while loop in Python.",
            "question": "a, b = 0, 1\n___ < 100:\n    print(a)\n    a, b = b, a + b",
            "correct_answer": "a, b = 0, 1\nwhile b < 100:\n    print(a)\n    a, b = b, a + b"
        },
        {
            "instruction": "Edit the Python program below to add an if condition to determine if an input number is odd or even.",
            "question": "def odd_or_even(number):\n    # your code here\n    ___ % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"",
            "correct_answer": "def odd_or_even(number):\n    # your code here\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
        },
        {
            "instruction": "Create a python program that detects if a number is even or odd.",
            "question": "def is_even_odd(num):\n    ___ % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nresult = is_even_odd(7)\nprint(result)",
            "correct_answer": "def is_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nresult = is_even_odd(7)\nprint(result)"
        },
        {
            "instruction": "Design a program to find the nth term of the Fibonacci sequence for a given number n.",
            "question": "# Python 3 program to find the nth\n# Fibonacci number\ndef Fibonacci(n):\n    ___<0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n==1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n \n# Driver Program\nprint(Fibonacci(10))\n\n# Output\n34",
            "correct_answer": "# Python 3 program to find the nth\n# Fibonacci number\ndef Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n==1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n \n# Driver Program\nprint(Fibonacci(10))\n\n# Output\n34"
        },
        {
            "instruction": "Create a Python program to grade a multiple choice test with 4 options for each question, and each correct answer is worth 3 points.",
            "question": "def grade_test(questions):\n    score = 0\n    ___ in questions:\n        ___['answer'] == question['correct_answer']:\n            score += 3\n    return score",
            "correct_answer": "def grade_test(questions):\n    score = 0\n    for question in questions:\n        if question['answer'] == question['correct_answer']:\n            score += 3\n    return score"
        },
        {
            "instruction": "Optimize the following python code for a more efficient solution.",
            "question": "def to_square(nums):\n    squares = [num * num ___ in nums]\n    return squares",
            "correct_answer": "def to_square(nums):\n    squares = [num * num for num in nums]\n    return squares"
        },
        {
            "instruction": "Develop a Python program to detect if an entered number is even or odd.",
            "question": "even_or_odd = int(input(\"Please enter a number: \"))\n___ % 2 == 0:\n  print(\"The number is Even.\")\nelse:\n  print(\"The number is Odd.\")",
            "correct_answer": "even_or_odd = int(input(\"Please enter a number: \"))\nif even_or_odd % 2 == 0:\n  print(\"The number is Even.\")\nelse:\n  print(\"The number is Odd.\")"
        },
        {
            "instruction": "Modify the following code in Python to only repeat a segment of the code while a certain user input is given.",
            "question": "# Get user input\ninput = input('Enter \"repeat\" to repeat the code: ')\n\n# Execute the code ___ input is \"repeat\" \n___ == 'repeat':\n\tprint(\"Hello World\")\n\tinput = input('Enter \"repeat\" to repeat the code: ')",
            "correct_answer": "# Get user input\ninput = input('Enter \"repeat\" to repeat the code: ')\n\n# Execute the code while user input is \"repeat\" \nwhile input == 'repeat':\n\tprint(\"Hello World\")\n\tinput = input('Enter \"repeat\" to repeat the code: ')"
        },
        {
            "instruction": "Write a Python script to search a given dictionary for a given word.",
            "question": "def search_word(word, dictionary):\n    ___ in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\n___:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')",
            "correct_answer": "def search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')"
        },
        {
            "instruction": "Modify this Python code to add an exception for invalid input.",
            "question": "def calculate(a, b):\n    ___ == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a / b\n        return c\n    else:\n        raise ValueError",
            "correct_answer": "def calculate(a, b):\n    if b == 0:\n        raise ZeroDivisionError\n    elif b > 0:\n        c = a / b\n        return c\n    else:\n        raise ValueError"
        },
        {
            "instruction": "Suggest an web scraping algorithm for the following website.",
            "question": "A useful strategy ___ scraping this site would be to use the Python library requests to make HTTP requests and BeautifulSoup to parse the HTML content. First, you should make an HTTP request to the website, then you should use BeautifulSoup to find the specific elements you are interested in and extract the data.",
            "correct_answer": "A useful strategy for web scraping this site would be to use the Python library requests to make HTTP requests and BeautifulSoup to parse the HTML content. First, you should make an HTTP request to the website, then you should use BeautifulSoup to find the specific elements you are interested in and extract the data."
        },
        {
            "instruction": "Write an algorithm in Python to check if a number is a palindrome.",
            "question": "def is_palindrome(number): \nnum = number  \n   \n# initializing a reverse number  \nreverse = 0\n  \n# Reverse the given number \nwhile(number > 0): \n   remainder = number % 10\n   # Create reverse \n   reverse = (reverse * 10) + remainder \n   number = number // 10 \n \n# check ___ and reverse numbers are same\nif (num == reverse): \n  return True\nelse: \n  return False",
            "correct_answer": "def is_palindrome(number): \nnum = number  \n   \n# initializing a reverse number  \nreverse = 0\n  \n# Reverse the given number \nwhile(number > 0): \n   remainder = number % 10\n   # Create reverse \n   reverse = (reverse * 10) + remainder \n   number = number // 10 \n \n# check if original and reverse numbers are same\nif (num == reverse): \n  return True\nelse: \n  return False"
        },
        {
            "instruction": "Develop Python code to check if a given number is plaindrome.",
            "question": "def is_plaindrome(num):\n    original_num = num\n    reversed_num = 0\n    ___ > 0:\n        remainder = num % 10\n        reversed_num = (reversed_num * 10) + remainder\n        num //= 10\n    return reversed_num == original_num\n\nnum = 1454\n___(num):\n    print(num, \"is a plaindrome\")\nelse:\n    print(num, \"is not a plaindrome\")",
            "correct_answer": "def is_plaindrome(num):\n    original_num = num\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = (reversed_num * 10) + remainder\n        num //= 10\n    return reversed_num == original_num\n\nnum = 1454\nif is_plaindrome(num):\n    print(num, \"is a plaindrome\")\nelse:\n    print(num, \"is not a plaindrome\")"
        },
        {
            "instruction": "Test if a given number is a Prime or not using Python.",
            "question": "___<=1: \n  print(\"Number is not a prime number.\") \n___ in range(2,int(number**0.5)+1):\n  if(number % i == 0):\n    print(\"Number is not a prime number.\")\n    break\nelse: \n  print(\"Number is a prime number.\")",
            "correct_answer": "if number<=1: \n  print(\"Number is not a prime number.\") \nfor i in range(2,int(number**0.5)+1):\n  if(number % i == 0):\n    print(\"Number is not a prime number.\")\n    break\nelse: \n  print(\"Number is a prime number.\")"
        },
        {
            "instruction": "Create a function in Python to compare two strings and return true if the strings only differ by one character.",
            "question": "def compare_strings(s1, s2):\n    mismatch_count = 0\n\n    ___ in range(len(s1)):\n        ___[i] != s2[i]:\n            ___ > 0:\n                return False\n\n            mismatch_count += 1\n\n    return mismatch_count == 1\n\ncompare_strings('apple', 'acple')",
            "correct_answer": "def compare_strings(s1, s2):\n    mismatch_count = 0\n\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if mismatch_count > 0:\n                return False\n\n            mismatch_count += 1\n\n    return mismatch_count == 1\n\ncompare_strings('apple', 'acple')"
        },
        {
            "instruction": "Write a Python program to calculate the average monthly temperature of a given city for the last 10 years.",
            "question": "import csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n ___ in temperatures:\n ___[1] == city:\n result += float(row[2])\n counter += 1\n return result/counter",
            "correct_answer": "import csv\n\ndef avg_month_temp(city):\n result = 0\n counter = 0\n temperatures = csv.reader(open('weatherdata.csv'))\n for row in temperatures:\n if row[1] == city:\n result += float(row[2])\n counter += 1\n return result/counter"
        },
        {
            "instruction": "Create a Python procedure to determine if two numbers are divisible.",
            "question": "def divisible(x, y):\n    ___ % y == 0:\n        return True\n    else:\n        return False",
            "correct_answer": "def divisible(x, y):\n    if x % y == 0:\n        return True\n    else:\n        return False"
        },
        {
            "instruction": "Create a for loop in Python that prints the output of a multiplication table for numbers from 1 to 10.",
            "question": "___ in range(1, 11):\n  ___ in range(1, 11):\n    print(i * j, end='\\t')\n  print()",
            "correct_answer": "for i in range(1, 11):\n  for j in range(1, 11):\n    print(i * j, end='\\t')\n  print()"
        },
        {
            "instruction": "Develop a Python script for checking for palindromes.",
            "question": "def is_palindrome(word):\n  rev_word = word[::-1]\n  ___ == rev_word:\n    return True\n  return False",
            "correct_answer": "def is_palindrome(word):\n  rev_word = word[::-1]\n  if word == rev_word:\n    return True\n  return False"
        },
        {
            "instruction": "Design an algorithm to check if a given number is prime in Python.",
            "question": "def is_prime(n):\n    \"\"\"Check ___ given number is prime.\"\"\"\n    # Corner case\n    ___ <= 1:\n        return False\n\n    # Check ___\n    ___ in range(2, n):\n        ___ % i == 0:\n            return False\n    # Return true ___ is not divisible by any number\n    return True\n\n# Output\nprint(is_prime(n))",
            "correct_answer": "def is_prime(n):\n    \"\"\"Check if a given number is prime.\"\"\"\n    # Corner case\n    if n <= 1:\n        return False\n\n    # Check for divisibility\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    # Return true if it is not divisible by any number\n    return True\n\n# Output\nprint(is_prime(n))"
        },
        {
            "instruction": "Design a function to tell if a number is even or odd using Python.",
            "question": "def isEven(x):\n    ___ % 2 == 0:\n        return True\n    else:\n        return False\n\nx = 5\n\n___(x):\n    print(\"It is even\")\nelse:\n    print(\"It is odd\")",
            "correct_answer": "def isEven(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nx = 5\n\nif isEven(x):\n    print(\"It is even\")\nelse:\n    print(\"It is odd\")"
        },
        {
            "instruction": "Suggest a completion for the following Python code to check if a given number is an Armstrong number.",
            "question": "def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  ___ > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp //= 10\n  ___ == sum:\n    return True  \n  else:\n    return False",
            "correct_answer": "def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp //= 10\n  if num == sum:\n    return True  \n  else:\n    return False"
        },
        {
            "instruction": "Write a conditional statement in Python that checks if two lists have the same items.",
            "question": "list1 = [9,8,7]\nlist2 = [7,8,9]\n\n___ == list2:\n    print(\"The lists have the same items.\")\nelse:\n    print(\"The lists do not have the same items.\")",
            "correct_answer": "list1 = [9,8,7]\nlist2 = [7,8,9]\n\nif list1 == list2:\n    print(\"The lists have the same items.\")\nelse:\n    print(\"The lists do not have the same items.\")"
        },
        {
            "instruction": "Create a function in Python that takes two strings and checks if they are anagrams of each other.",
            "question": "def is_anagram(str1, str2): \n    ___(str1)!= len(str2): \n        return False\n    first_list = list(str1.lower())\n    second_list = list(str2.lower())\n    first_list.sort()\n    second_list.sort()\n    return first_list == second_list\n\nprint(is_anagram(\"apple\",\"pleap\"))",
            "correct_answer": "def is_anagram(str1, str2): \n    if len(str1)!= len(str2): \n        return False\n    first_list = list(str1.lower())\n    second_list = list(str2.lower())\n    first_list.sort()\n    second_list.sort()\n    return first_list == second_list\n\nprint(is_anagram(\"apple\",\"pleap\"))"
        },
        {
            "instruction": "Construct a Python program that will search for a given word in a web page and return the number of occurrences.",
            "question": "import requests\n\nurl = \"www.example.com\"\nword = \"Python\"\n\nhtml_content = requests.get(url).text\n\nwords = html_content.split()\n\noccurrences = 0\n\n___ in words:\n    ___ == word:\n        occurrences += 1\n\nprint(\"Found %d occurrences of '%s'\" % (occurrences, word))",
            "correct_answer": "import requests\n\nurl = \"www.example.com\"\nword = \"Python\"\n\nhtml_content = requests.get(url).text\n\nwords = html_content.split()\n\noccurrences = 0\n\nfor w in words:\n    if w == word:\n        occurrences += 1\n\nprint(\"Found %d occurrences of '%s'\" % (occurrences, word))"
        },
        {
            "instruction": "Develop a Python Webscraper for collecting data from a given URL.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'http://example.com/data'\n\n# Send a request to the URL\npage = requests.get(URL)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='data')\n\n# Print the data\n___ in data:\n print(item.text)",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'http://example.com/data'\n\n# Send a request to the URL\npage = requests.get(URL)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the data\ndata = soup.find_all('div', class_='data')\n\n# Print the data\nfor item in data:\n print(item.text)"
        },
        {
            "instruction": "Convert the following Algorithm into Python code.\n\nInput: two numbers\n\nAlgorithm:\n1. Check if the two numbers are equal.\n2. If true, return 0.\n3. Else check the which is higher.\n4. Return 1 if the first number is higher than the second one.\n5. Return -1 otherwise.",
            "question": "def compare_numbers(num1, num2):\n ___ == num2:\n  return 0\n elif num1 > num2:\n  return 1\n else:\n  return -1\n\nnum1 = 5\nnum2 = 10\nresult = compare_numbers(num1, num2)\n\nprint(result)",
            "correct_answer": "def compare_numbers(num1, num2):\n if num1 == num2:\n  return 0\n elif num1 > num2:\n  return 1\n else:\n  return -1\n\nnum1 = 5\nnum2 = 10\nresult = compare_numbers(num1, num2)\n\nprint(result)"
        },
        {
            "instruction": "Create a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).",
            "question": "def isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n ___ == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); // True",
            "correct_answer": "def isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); // True"
        },
        {
            "instruction": "Write a function in Python to predict a label for a given input.",
            "question": "def predict(x):\n    ___[0] > 0:\n        return 'positive'\n    ___[1] < 0:\n        return 'negative'\n    ___[2] > 0:\n        return 'positive'\n    return 'neutral'",
            "correct_answer": "def predict(x):\n    if x[0] > 0:\n        return 'positive'\n    if x[1] < 0:\n        return 'negative'\n    if x[2] > 0:\n        return 'positive'\n    return 'neutral'"
        },
        {
            "instruction": "Create a Python program to check if a given date is valid or not.",
            "question": "from datetime import datetime\n \ndate_string = '2019/02/29'\ntry:\n date = datetime.strptime(date_string, '%Y/%m/%d')\n \n ___.year % 4 == 0 and date.month == 2 and date.day == 29:\n print('Valid Date')\n else:\n print('Invalid Date')\nexcept ValueError:\n print('Invalid Date')",
            "correct_answer": "from datetime import datetime\n \ndate_string = '2019/02/29'\ntry:\n date = datetime.strptime(date_string, '%Y/%m/%d')\n \n if date.year % 4 == 0 and date.month == 2 and date.day == 29:\n print('Valid Date')\n else:\n print('Invalid Date')\nexcept ValueError:\n print('Invalid Date')"
        },
        {
            "instruction": "Consider the following statement and write a code for it in Python",
            "question": "my_list = [1,2,3,4,5]\ntotal_sum = 0\n\n___ in my_list:\n    total_sum = total_sum + x \n  \naverage = total_sum / len(my_list)\n\nprint(\"Sum of all elements in given list: \" + str(total_sum))\nprint(\"Average of all elements in given list: \" + str(average))",
            "correct_answer": "my_list = [1,2,3,4,5]\ntotal_sum = 0\n\nfor x in my_list:\n    total_sum = total_sum + x \n  \naverage = total_sum / len(my_list)\n\nprint(\"Sum of all elements in given list: \" + str(total_sum))\nprint(\"Average of all elements in given list: \" + str(average))"
        },
        {
            "instruction": "Optimize the following Python code for faster runtime performance",
            "question": "___ in range(5):\n    print(\"Hello\", end=\"\\n\")",
            "correct_answer": "for i in range(5):\n    print(\"Hello\", end=\"\\n\")"
        },
        {
            "instruction": "Write a code for sorting the words within a sentence, alphabetically.",
            "question": "\"\"\"\nWrite a code ___ the words within a sentence, alphabetically.\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    words = sentence.split()\n    words.sort()\n    return ' '.join(words)\n\n___ == '__main__':\n    sentence = 'Python is a great language'\n    print(sort_words_alphabetically(sentence))",
            "correct_answer": "\"\"\"\nWrite a code for sorting the words within a sentence, alphabetically.\n\"\"\"\n\ndef sort_words_alphabetically(sentence):\n    words = sentence.split()\n    words.sort()\n    return ' '.join(words)\n\nif __name__ == '__main__':\n    sentence = 'Python is a great language'\n    print(sort_words_alphabetically(sentence))"
        },
        {
            "instruction": "Trace the recursive Fibonacci algorithm in Python and test its execution time for different values of n.",
            "question": "import time \n\ndef fib(n): \n ___<0: \n  print(\"Incorrect input\") \n elif n==1: \n  return 0\n elif n==2: \n  return 1\n else: \n  return fib(n-1)+fib(n-2) \n\nstart = time.time() \n\nnum = 10 \nprint(fib(num))\n\nprint(\"Time taken:\", time.time()-start)",
            "correct_answer": "import time \n\ndef fib(n): \n if n<0: \n  print(\"Incorrect input\") \n elif n==1: \n  return 0\n elif n==2: \n  return 1\n else: \n  return fib(n-1)+fib(n-2) \n\nstart = time.time() \n\nnum = 10 \nprint(fib(num))\n\nprint(\"Time taken:\", time.time()-start)"
        },
        {
            "instruction": "Author a Python program to check if a number is a palindrome.",
            "question": "def isPalindrome(num):\n  numStr = str(num)\n  ___ in range(0, len(numStr)//2):\n    ___[i] != numStr[len(numStr)-i-1]:\n      return False\n  return True\n\nprint(isPalindrome(1991)) # Output: True",
            "correct_answer": "def isPalindrome(num):\n  numStr = str(num)\n  for i in range(0, len(numStr)//2):\n    if numStr[i] != numStr[len(numStr)-i-1]:\n      return False\n  return True\n\nprint(isPalindrome(1991)) # Output: True"
        },
        {
            "instruction": "Write a Python script to extract all the values for a given key from a dictionary.",
            "question": "def get_key_values(dictionary, key):\n    return [value ___, value in dictionary.items() ___ == key]",
            "correct_answer": "def get_key_values(dictionary, key):\n    return [value for key, value in dictionary.items() if key == key]"
        },
        {
            "instruction": "Create a Python function for computing the Fibonacci sequence up to the nth number.",
            "question": "def fibonacci(n):\n    a, b = 0, 1\n    ___ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) # outputs 55",
            "correct_answer": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) # outputs 55"
        },
        {
            "instruction": "Generate a code to optimize the following program for better performance in Python.",
            "question": "import random\n\nrandom_list = [random.randint(0, 10) ___ in range(10)]\nunique_list = list(set(random_list))",
            "correct_answer": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(10)]\nunique_list = list(set(random_list))"
        },
        {
            "instruction": "Write a Python program to compare two unordered lists to see if they are equal.",
            "question": "def compare_lists(list1, list2):\n    ___(list1) != len(list2):\n        return False\n    ___(list1) == sorted(list2):\n        return True\n    return False",
            "correct_answer": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    if sorted(list1) == sorted(list2):\n        return True\n    return False"
        },
        {
            "instruction": "Write a python program for binary search",
            "question": "def binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    ___ <= right:\n        mid = (left + right) // 2\n\n        ___[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1",
            "correct_answer": "def binarySearch(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
        },
        {
            "instruction": "Create a Python code to display the multiplication table for a number between",
            "question": "___ in range(1, 11):\n    print(\"4 x\", i, \"=\", 4*i)",
            "correct_answer": "for i in range(1, 11):\n    print(\"4 x\", i, \"=\", 4*i)"
        },
        {
            "instruction": "Create a Python program to check if a triangle is valid or not with the given values for its three sides.",
            "question": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    ___ + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    ___ + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)",
            "correct_answer": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)"
        },
        {
            "instruction": "Write a Python function for calculating factorials.",
            "question": "def factorial(n):\n    ___ == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 4\nresult = factorial(number)\nprint(result)",
            "correct_answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 4\nresult = factorial(number)\nprint(result)"
        },
        {
            "instruction": "Design a Python program for implementing a stack with the following methods.",
            "question": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, x): \n        self.items.append(x) \n\n    def pop(self): \n        ___ self.is_empty():\n            return self.items.pop()\n        else:\n            return None\n        \n    def is_empty(self): \n        return len(self.items) == 0",
            "correct_answer": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, x): \n        self.items.append(x) \n\n    def pop(self): \n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return None\n        \n    def is_empty(self): \n        return len(self.items) == 0"
        },
        {
            "instruction": "Compose a python program that can search a text document for a given word.",
            "question": "def search_for_word(text_file, query_word):\n    words = []\n\n    with open(text_file, \"r\") as file:\n        ___ in file:\n            words.extend(line.split())\n\n    ___ in words:\n        return True\n    else:\n        return False",
            "correct_answer": "def search_for_word(text_file, query_word):\n    words = []\n\n    with open(text_file, \"r\") as file:\n        for line in file:\n            words.extend(line.split())\n\n    if query_word in words:\n        return True\n    else:\n        return False"
        },
        {
            "instruction": "can you provide a python for loop that prints out the product of two lists?",
            "question": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n___ in range(len(list1)):\n    product = list1[i] * list2[i]\n    print(product)",
            "correct_answer": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nfor i in range(len(list1)):\n    product = list1[i] * list2[i]\n    print(product)"
        },
        {
            "instruction": "Generate a Python program that searches for a given key in a dictionary.",
            "question": "my_dict = {\n 'name': 'John',\n 'age': 26,\n 'salary': 5000\n}\n\nfind_key = 'name'\n\n___ in my_dict:\n print(my_dict[find_key])",
            "correct_answer": "my_dict = {\n 'name': 'John',\n 'age': 26,\n 'salary': 5000\n}\n\nfind_key = 'name'\n\nif find_key in my_dict:\n print(my_dict[find_key])"
        },
        {
            "instruction": "Can you generate a greedy algorithm in Python for solving the coin change problem?",
            "question": "def get_coins(coins, change):\n\tmin_coins = change\n\t___ in coins:\n\t\treturn [change]\n\n\t___ in [c ___ in coins ___ <= change]:\n\t\tnum_coins = 1 + get_coins(coins, change-i)\n\t\t___(num_coins) < min_coins:\n\t\t\tmin_coins = num_coins\n\treturn min_coins\n\n# Test \ncoins = [1, 6, 10]\nchange = 8\nprint(get_coins(coins, change)) # [1, 6, 1]",
            "correct_answer": "def get_coins(coins, change):\n\tmin_coins = change\n\tif change in coins:\n\t\treturn [change]\n\n\tfor i in [c for c in coins if c <= change]:\n\t\tnum_coins = 1 + get_coins(coins, change-i)\n\t\tif len(num_coins) < min_coins:\n\t\t\tmin_coins = num_coins\n\treturn min_coins\n\n# Test \ncoins = [1, 6, 10]\nchange = 8\nprint(get_coins(coins, change)) # [1, 6, 1]"
        },
        {
            "instruction": "Create a script in Python for classifying the sentiment of a text. The script should be able to handle input of various lengths and should return a sentiment score (on a scale from -1 to +1) for the text.",
            "question": "import nltk\n\ndef sentiment_analysis(text):\n tokens = nltk.word_tokenize(text)\n score = 0\n ___ in tokens:\n tag = nltk.pos_tag(token)[0]\n ___[1] == 'positive':\n score += 1\n else:\n score -= 1\n return score / len(tokens)",
            "correct_answer": "import nltk\n\ndef sentiment_analysis(text):\n tokens = nltk.word_tokenize(text)\n score = 0\n for token in tokens:\n tag = nltk.pos_tag(token)[0]\n if tag[1] == 'positive':\n score += 1\n else:\n score -= 1\n return score / len(tokens)"
        },
        {
            "instruction": "Develop a Python program to check if a given number is a power of two.",
            "question": "def is_power_of_two(x):\n  ___ % 2 == 0 and x > 1:\n    x = x / 2\n  return x == 1\n\nnum = 16\n\nprint(is_power_of_two(num))",
            "correct_answer": "def is_power_of_two(x):\n  while x % 2 == 0 and x > 1:\n    x = x / 2\n  return x == 1\n\nnum = 16\n\nprint(is_power_of_two(num))"
        },
        {
            "instruction": "Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.",
            "question": "def sum_of_squares(n, m):\n    result = 0\n    ___ in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m))",
            "correct_answer": "def sum_of_squares(n, m):\n    result = 0\n    for i in range(n, m+1):\n        result += i*i\n    return result\n  \nprint(sum_of_squares(n, m))"
        },
        {
            "instruction": "Build a Python class to identify if a provided number is prime or composite.",
            "question": "class PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def is_prime(self):\n        ___ in range(2, self.num):\n            if(self.num % i == 0):\n                return False\n        return True\n\nnum = 10\nobj = PrimeNumber(num)\n\n___.is_prime():\n    print(\"Number is Prime\")\nelse:\n    print(\"Number is Composite\")",
            "correct_answer": "class PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def is_prime(self):\n        for i in range(2, self.num):\n            if(self.num % i == 0):\n                return False\n        return True\n\nnum = 10\nobj = PrimeNumber(num)\n\nif obj.is_prime():\n    print(\"Number is Prime\")\nelse:\n    print(\"Number is Composite\")"
        },
        {
            "instruction": "Write a Python program to create a data visualization for a given dataset.",
            "question": "import matplotlib.pyplot as plt\n\ndef create_visualizations(data):\n x = [x[0] ___ in data]\n y = [x[1] ___ in data]\n plt.plot(x, y, 'bo')\n plt.xlabel('Courses')\n plt.ylabel('Students')\n plt.title('Number of Students Enrolled in Courses')\n plt.show()",
            "correct_answer": "import matplotlib.pyplot as plt\n\ndef create_visualizations(data):\n x = [x[0] for x in data]\n y = [x[1] for x in data]\n plt.plot(x, y, 'bo')\n plt.xlabel('Courses')\n plt.ylabel('Students')\n plt.title('Number of Students Enrolled in Courses')\n plt.show()"
        },
        {
            "instruction": "Create a Python program to check if two lists have overlapping elements",
            "question": "def has_overlapping(arr1, arr2):\n    ___ in arr1:\n        ___ in arr2:\n            return True\n    return False\n\nA = [1,3,5,7]\nB = [2,4,5,7]\n\nresult = has_overlapping(A, B)\nprint(result)",
            "correct_answer": "def has_overlapping(arr1, arr2):\n    for element in arr1:\n        if element in arr2:\n            return True\n    return False\n\nA = [1,3,5,7]\nB = [2,4,5,7]\n\nresult = has_overlapping(A, B)\nprint(result)"
        },
        {
            "instruction": "Given input and output examples, create a classification model in Python that can predict the output for a given input.",
            "question": "def pred_model(inputs): \n  outputs=[]\n  ___ in inputs:\n    outputs.append(i*2)\n  return outputs\n \ninputs = [1,2,3] \noutputs = pred_model(inputs) \nprint(\"Outputs:\", outputs)",
            "correct_answer": "def pred_model(inputs): \n  outputs=[]\n  for i in inputs:\n    outputs.append(i*2)\n  return outputs\n \ninputs = [1,2,3] \noutputs = pred_model(inputs) \nprint(\"Outputs:\", outputs)"
        },
        {
            "instruction": "Write a python program to check if a given number is prime or not.",
            "question": "def is_prime(num):\n    ___ in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnumber = 27\n\n___(number):\n    print(str(number) + ' is a prime number.')\nelse:\n    print(str(number) + ' is not a prime number.')",
            "correct_answer": "def is_prime(num):\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnumber = 27\n\nif is_prime(number):\n    print(str(number) + ' is a prime number.')\nelse:\n    print(str(number) + ' is not a prime number.')"
        },
        {
            "instruction": "Create a module in Python for validating a phone number.",
            "question": "import re\n\nphone_number = \"+1-800-867-5309\"\n\nphone_pattern = re.compile(r'^\\+[1-9]\\d{1,2}\\-\\d{3}\\-\\d{3}\\-\\d{4}$')\n\ndef validate_phone_number(phone_number):\n    return phone_pattern.search(phone_number)\n\nvalid = validate_phone_number(phone_number)\n___:\n    print(\"Valid Phone number\")\nelse:\n    print(\"Invalid Phone number\")",
            "correct_answer": "import re\n\nphone_number = \"+1-800-867-5309\"\n\nphone_pattern = re.compile(r'^\\+[1-9]\\d{1,2}\\-\\d{3}\\-\\d{3}\\-\\d{4}$')\n\ndef validate_phone_number(phone_number):\n    return phone_pattern.search(phone_number)\n\nvalid = validate_phone_number(phone_number)\nif valid:\n    print(\"Valid Phone number\")\nelse:\n    print(\"Invalid Phone number\")"
        },
        {
            "instruction": "Edit the following Python program such that it prints out the multiplication table for the given number n.",
            "question": "n = 5\n\n# printing the multiplication table\n___ in range(1, 11): \n    print(n, 'x', i, '=', n * i)",
            "correct_answer": "n = 5\n\n# printing the multiplication table\nfor i in range(1, 11): \n    print(n, 'x', i, '=', n * i)"
        },
        {
            "instruction": "Edit the given Python program to optimize its code for better performance",
            "question": "#Function to calculate the sum of the natural numbers \ndef sumOfNaturals(n): \n  \n    #using Gauss formula\n    ___ % 2 == 0: \n        sum = (n//2)*(n+1) \n    else: \n        sum = (n//2)*(n+1) + (n+1)//2\n  \n    return sum",
            "correct_answer": "#Function to calculate the sum of the natural numbers \ndef sumOfNaturals(n): \n  \n    #using Gauss formula\n    if n % 2 == 0: \n        sum = (n//2)*(n+1) \n    else: \n        sum = (n//2)*(n+1) + (n+1)//2\n  \n    return sum"
        },
        {
            "instruction": "Design a program in Python for computing the average height of a group of people.",
            "question": "def average_height(lst):\n    total = 0\n    ___ in lst:\n        total += height\n    \n    return total / len(lst)\n\nresult = average_height([1.78, 1.90, 1.75, 1.82])\nprint(result)",
            "correct_answer": "def average_height(lst):\n    total = 0\n    for height in lst:\n        total += height\n    \n    return total / len(lst)\n\nresult = average_height([1.78, 1.90, 1.75, 1.82])\nprint(result)"
        },
        {
            "instruction": "Analyze the input provided and generate a function in Python that returns \"Invalid input\" if the input is not a valid integer number, or returns the number of digits in the input number otherwise.",
            "question": "def count_digits(inp):\n    ___ isinstance(inp, int):\n        return \"Invalid input\"\n    else:\n        return len(str(inp))",
            "correct_answer": "def count_digits(inp):\n    if not isinstance(inp, int):\n        return \"Invalid input\"\n    else:\n        return len(str(inp))"
        },
        {
            "instruction": "Create a function in Python that determines if a given number is an Armstrong number or not.",
            "question": "def isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  ___ in num_str:\n    result += int(c) ** power\n\n  ___ == number:\n    return True\n  else:\n    return False\n\n___(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.')",
            "correct_answer": "def isArmstrongNumber(number):\n  num_str = str(number)\n  result = 0\n  power = len(num_str)\n\n  for c in num_str:\n    result += int(c) ** power\n\n  if result == number:\n    return True\n  else:\n    return False\n\nif isArmstrongNumber(371):\n  print('It is an Armstrong number.')\nelse:\n  print('It is not an Armstrong number.')"
        },
        {
            "instruction": "Write an expression in python to check if a given number is prime",
            "question": "def is_prime(number):\n    ___>1:\n        ___ in range(2,number):\n            ___%i==0:\n                return False\n    else:\n        return False\n    return True\nprint(is_prime(number))",
            "correct_answer": "def is_prime(number):\n    if number>1:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n    else:\n        return False\n    return True\nprint(is_prime(number))"
        },
        {
            "instruction": "Given two number arrays A and B, write a Python function to check if each element in A also exists in B",
            "question": "def check_equality(arr1, arr2):\n    ___ in arr1:\n        ___ not in arr2:\n            return False\n    return True\n\nA = [1, 2, 3]\nB = [2, 3, 4]\n\nresult = check_equality(A, B)\nprint(result)",
            "correct_answer": "def check_equality(arr1, arr2):\n    for num in arr1:\n        if num not in arr2:\n            return False\n    return True\n\nA = [1, 2, 3]\nB = [2, 3, 4]\n\nresult = check_equality(A, B)\nprint(result)"
        },
        {
            "instruction": "Convert the following for loop into a recursive function in Python.",
            "question": "def printRange(start, end):\n    ___ == end:\n        return\n    print(start)\n    printRange(start+1, end)\n\nprintRange(0, 5)",
            "correct_answer": "def printRange(start, end):\n    if start == end:\n        return\n    print(start)\n    printRange(start+1, end)\n\nprintRange(0, 5)"
        },
        {
            "instruction": "Design a positive feedback loop for the following python program.",
            "question": "___ in range(10):\n    print(\"hello\")\n    i += 1\n    ___ == 10:\n        print(\"You've got it!\")",
            "correct_answer": "for i in range(10):\n    print(\"hello\")\n    i += 1\n    if i == 10:\n        print(\"You've got it!\")"
        },
        {
            "instruction": "Create a Python program to scrape a search engine for the top 10 results on a given query.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.google.com/search?q=best+movies+of+2019&num=10'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', class_='rc')\n\n___ in results:\n title = result.find('h3').text\n print(title)",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.google.com/search?q=best+movies+of+2019&num=10'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', class_='rc')\n\nfor result in results:\n title = result.find('h3').text\n print(title)"
        },
        {
            "instruction": "Write a Python program to search for a given element in multiple lists",
            "question": "def search_elem(my_list1, my_list2, elem):\n    ___ in [my_list1, my_list2]:\n        found = False\n        ___ in list:\n            ___ == elem:\n                found = True\n                break\n        ___:\n            return True\n    return False\n\nfound = search_elem(my_list1, my_list2, elem)\nprint(found)",
            "correct_answer": "def search_elem(my_list1, my_list2, elem):\n    for list in [my_list1, my_list2]:\n        found = False\n        for val in list:\n            if val == elem:\n                found = True\n                break\n        if found:\n            return True\n    return False\n\nfound = search_elem(my_list1, my_list2, elem)\nprint(found)"
        },
        {
            "instruction": "Create a python program for identifying if a given number is prime or not.",
            "question": "def is_prime(num): \n    ___ < 2: \n        return False\n  \n    ___ in range(2, num): \n        ___ % i == 0: \n            return False\n  \n    return True\n  \n# Example \nnumber = 10\n  \n___(number): \n    print(number, \"is a prime number\") \nelse: \n    print(number, \"is not a prime number\")",
            "correct_answer": "def is_prime(num): \n    if num < 2: \n        return False\n  \n    for i in range(2, num): \n        if num % i == 0: \n            return False\n  \n    return True\n  \n# Example \nnumber = 10\n  \nif is_prime(number): \n    print(number, \"is a prime number\") \nelse: \n    print(number, \"is not a prime number\")"
        },
        {
            "instruction": "Create a Python function that takes two lists, compare them, and return True if both lists are identical and False if they differ.",
            "question": "def compare_lists(list1, list2):\n    ___(list1) != len(list2):\n        return False\n\n    ___ in range(len(list1)):\n        ___[i] != list2[i]:\n            return False\n\n    return True",
            "correct_answer": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True"
        },
        {
            "instruction": "Create a program in Python that uses a for loop to output the division of two numbers.",
            "question": "___ in range(2):\n    print(5/3)",
            "correct_answer": "for i in range(2):\n    print(5/3)"
        },
        {
            "instruction": "Write a Bash script to check if a specific program is installed on the current system.",
            "question": "#!/usr/bin/env bash\n\n___ -p python &> /dev/null; then\n  echo 'Python is installed!'\nelse \n  echo 'Python is not installed!'\nfi",
            "correct_answer": "#!/usr/bin/env bash\n\nif type -p python &> /dev/null; then\n  echo 'Python is installed!'\nelse \n  echo 'Python is not installed!'\nfi"
        },
        {
            "instruction": "Create a method in Python that returns the result for the factorial of a given number.",
            "question": "def factorial(n): \n    ___ == 0:\n        return 1\n    else:\n        return n*factorial(n-1) \n\nx = 5\nresult = factorial(x) \nprint(result) \n\n# Output: \n120",
            "correct_answer": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1) \n\nx = 5\nresult = factorial(x) \nprint(result) \n\n# Output: \n120"
        },
        {
            "instruction": "Develop a python program for",
            "question": "def filter_vowel_strings(string_list):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    filtered_list = []\n    ___ in string_list:\n        ___.startswith(vowels):\n            filtered_list.append(string)\n    return filtered_list",
            "correct_answer": "def filter_vowel_strings(string_list):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    filtered_list = []\n    for string in string_list:\n        if string.startswith(vowels):\n            filtered_list.append(string)\n    return filtered_list"
        },
        {
            "instruction": "Write a Python program to check if the given matris is a symmetric matrix.",
            "question": "def is_symmetric(a):\n    n = len(a)\n    ___ in range(n):\n        ___ in range(n):\n            ___[i][j] != a[j][i]:\n                return False\n    return True\n\nA = [[1,2,3],\n    [-2,0,4],\n    [3,-4,5]]\nprint(is_symmetric(A))",
            "correct_answer": "def is_symmetric(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != a[j][i]:\n                return False\n    return True\n\nA = [[1,2,3],\n    [-2,0,4],\n    [3,-4,5]]\nprint(is_symmetric(A))"
        },
        {
            "instruction": "Develop an algorithm in Python to find the minimum number of coins needed to make change for a given amount",
            "question": "def minCoinChange(n):\n    coins = [1, 2, 5]\n    mins = [0]+ [float('inf')]*n\n    ___ in coins:\n        ___ in range(c, n+1):\n            mins[i] = min(mins[i], mins[i-c]+1)\n    return mins[n]\n    \nprint(minCoinChange(n))",
            "correct_answer": "def minCoinChange(n):\n    coins = [1, 2, 5]\n    mins = [0]+ [float('inf')]*n\n    for c in coins:\n        for i in range(c, n+1):\n            mins[i] = min(mins[i], mins[i-c]+1)\n    return mins[n]\n    \nprint(minCoinChange(n))"
        },
        {
            "instruction": "Write a Python script to detect if two strings contain the same characters. Output should be true or false.",
            "question": "def is_permutation(s1, s2):\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.sort()\n    s2_list.sort()\n    ___ == s2_list:\n        return True\n    else:\n        return False\n\nprint(is_permutation(\"abc\", \"bca\")) # True",
            "correct_answer": "def is_permutation(s1, s2):\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.sort()\n    s2_list.sort()\n    if s1_list == s2_list:\n        return True\n    else:\n        return False\n\nprint(is_permutation(\"abc\", \"bca\")) # True"
        },
        {
            "instruction": "Generate a Python algorithm to check if a given word is a palindrome.",
            "question": "def isPalindrome(word): \n    left, right = 0, len(word) - 1\n    ___ >= left: \n        ___ word[left] == word[right]: \n            return False\n        left += 1\n        right -= 1\n    return True",
            "correct_answer": "def isPalindrome(word): \n    left, right = 0, len(word) - 1\n    while right >= left: \n        if not word[left] == word[right]: \n            return False\n        left += 1\n        right -= 1\n    return True"
        },
        {
            "instruction": "Translate a Java loop into a while loop in Python.",
            "question": "i = 1\n___ <= 10:\n    print(\"Hello World\")\n    i += 1",
            "correct_answer": "i = 1\nwhile i <= 10:\n    print(\"Hello World\")\n    i += 1"
        },
        {
            "instruction": "Create a Python script for formatting a sentence.",
            "question": "def format_sentence(sentence):\n    sentence = sentence.split()\n    sentence = [word.capitalize() ___ in sentence]\n    return ' '.join(sentence)\n\nprint(format_sentence(\"He went to the store\"))",
            "correct_answer": "def format_sentence(sentence):\n    sentence = sentence.split()\n    sentence = [word.capitalize() for word in sentence]\n    return ' '.join(sentence)\n\nprint(format_sentence(\"He went to the store\"))"
        },
        {
            "instruction": "Implement a Python function called \u201ccheck_prime\u201d which takes an integer as an argument and returns True if the number is prime, and False otherwise.",
            "question": "def check_prime(n):\n ___ == 1:\n return False\n\n ___ in range(2, int(n ** 0.5) + 1):\n ___ % i == 0:\n return False\n\n return True",
            "correct_answer": "def check_prime(n):\n if n == 1:\n return False\n\n for i in range(2, int(n ** 0.5) + 1):\n if n % i == 0:\n return False\n\n return True"
        },
        {
            "instruction": "Write a Python program to do a brute force search for a pair of elements which sum to a given target value.",
            "question": "# brute force search algorithm\ndef brute_force_search(arr, target):\n\t___ in range(len(arr)):\n\t\t___ in range(len(arr)):\n\t\t\t___[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)",
            "correct_answer": "# brute force search algorithm\ndef brute_force_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tif arr[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)"
        },
        {
            "instruction": "Create a Python code to check if a single integer is a prime number",
            "question": "def is_prime(number):\n    ___ <= 1:\n        return False\n\n    ___ in range(2, number):\n        ___ % i == 0:\n            return False\n    return True",
            "correct_answer": "def is_prime(number):\n    if number <= 1:\n        return False\n\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True"
        },
        {
            "instruction": "Create a program in Python to check for palindrome numbers.",
            "question": "def palindrome(num):\n    num = str(num)\n    ___ == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n// Output: 121 is a palindrome number",
            "correct_answer": "def palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n// Output: 121 is a palindrome number"
        },
        {
            "instruction": "Debug the following Python code and make it functional (read the instructions for the code).",
            "question": "def factorial(n):\n ___ == 0:\n    return 1\n else:\n return n * factorial(n - 1)\n\n# call the method\nprint(factorial(5))",
            "correct_answer": "def factorial(n):\n if n == 0:\n    return 1\n else:\n return n * factorial(n - 1)\n\n# call the method\nprint(factorial(5))"
        },
        {
            "instruction": "Create a method to verify if the following number is prime in Python:",
            "question": "def is_prime(n):\n    if (n <= 1):\n        return False\n    ___ in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\n\nn = 7\n\n___(n):\n    print(\"The number {} is prime.\".format(n))\nelse:\n    print(\"The number {} is not prime.\".format(n))",
            "correct_answer": "def is_prime(n):\n    if (n <= 1):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\n\nn = 7\n\nif is_prime(n):\n    print(\"The number {} is prime.\".format(n))\nelse:\n    print(\"The number {} is not prime.\".format(n))"
        },
        {
            "instruction": "Optimize the following Python code for best runtime.",
            "question": "def is_prime(n):\n    ___ == 1:\n        return False\n    ___ in (2, 3):\n        return True\n    ___ (n & 1) and n > 2:\n        return False\n    ___ in range(3, int(n**0.5)+1, 2):\n        ___ % i == 0:\n            return False\n    return True",
            "correct_answer": "def is_prime(n):\n    if n == 1:\n        return False\n    if n in (2, 3):\n        return True\n    if not (n & 1) and n > 2:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
        },
        {
            "instruction": "Generate an algorithm in Python to check if a given number of years is a leap year.",
            "question": "def is_leap_year(year):\n    ___ % 400 == 0:\n        return True\n    ___ % 100 == 0:\n        return False\n    ___ % 4 == 0:\n        return True\n    return False\n\nyear = 1999\n___(year):\n    print(\"This is a leap year.\")\nelse:\n    print(\"This is not a leap year.\")",
            "correct_answer": "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    if year % 100 == 0:\n        return False\n    if year % 4 == 0:\n        return True\n    return False\n\nyear = 1999\nif is_leap_year(year):\n    print(\"This is a leap year.\")\nelse:\n    print(\"This is not a leap year.\")"
        },
        {
            "instruction": "Produce a Python program to compute the Fibonacci number for a given integer.",
            "question": "def getFibonacci(n): \n    ___<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return getFibonacci(n-1)+getFibonacci(n-2) \n\nnumber = 8\nfibonacci_number = getFibonacci(number)\nprint(fibonacci_number)",
            "correct_answer": "def getFibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return getFibonacci(n-1)+getFibonacci(n-2) \n\nnumber = 8\nfibonacci_number = getFibonacci(number)\nprint(fibonacci_number)"
        },
        {
            "instruction": "Optimize a Python program to check for prime numbers",
            "question": "def isPrime(n):\n ___ <= 1:\n return False\n ___ in range(2, int(n ** 0.5) + 1):\n ___ % i == 0:\n return False\n return True\n\nnum = 23\n___(num):\n print(\"Number is prime\")\nelse:\n print(\"Number is not prime\")",
            "correct_answer": "def isPrime(n):\n if n <= 1:\n return False\n for i in range(2, int(n ** 0.5) + 1):\n if n % i == 0:\n return False\n return True\n\nnum = 23\nif isPrime(num):\n print(\"Number is prime\")\nelse:\n print(\"Number is not prime\")"
        },
        {
            "instruction": "Create a Python program for implementing a linear search algorithm.",
            "question": "def linearSearch(arr, key): \n ___, num in enumerate(arr):\n ___ == key:\n return idx\n \n return -1",
            "correct_answer": "def linearSearch(arr, key): \n for idx, num in enumerate(arr):\n if num == key:\n return idx\n \n return -1"
        },
        {
            "instruction": "Create a Python program to check if the given number is divisible by 3 or not.",
            "question": "def is_divisible_by_3(n):\n  return (n % 3 == 0)\n\nn = 12\n___(n):\n  print(str(n) + ' is divisible by 3.')\nelse:\n  print(str(n) + ' is not divisible by 3.')",
            "correct_answer": "def is_divisible_by_3(n):\n  return (n % 3 == 0)\n\nn = 12\nif is_divisible_by_3(n):\n  print(str(n) + ' is divisible by 3.')\nelse:\n  print(str(n) + ' is not divisible by 3.')"
        },
        {
            "instruction": "Design a Python program for comparing two strings and printing \"Equal\" if the strings are equal, or \"Not Equal\" if the strings are not equal.",
            "question": "___ == string2:\n    print(\"Equal\")\nelse:\n    print(\"Not Equal\")",
            "correct_answer": "if string1 == string2:\n    print(\"Equal\")\nelse:\n    print(\"Not Equal\")"
        },
        {
            "instruction": "Generate a function in Python to return the highest value in a dictionary for the given key.",
            "question": "def highestValue(dictionary, key): \n    highest = 0 \n    ___,value in dictionary.items(): \n        ___ > highest: \n            highest = value \n    return highest \n\nhighestValue(dictionary, key)",
            "correct_answer": "def highestValue(dictionary, key): \n    highest = 0 \n    for key,value in dictionary.items(): \n        if value > highest: \n            highest = value \n    return highest \n\nhighestValue(dictionary, key)"
        },
        {
            "instruction": "Suggest a completion for the following Python code so that it prints all the numbers between 0 and 10 (inclusive).",
            "question": "___ in range(11):\n    print(num)",
            "correct_answer": "for num in range(11):\n    print(num)"
        },
        {
            "instruction": "Optimize the following Python code by replacing the two for loops with one.",
            "question": "list1 = [1,2,3]\nlist2 = [4,5,6]\n \n___,j in zip(list1, list2):\n    print(i * j)",
            "correct_answer": "list1 = [1,2,3]\nlist2 = [4,5,6]\n \nfor i,j in zip(list1, list2):\n    print(i * j)"
        },
        {
            "instruction": "Create a search algorithm in Python that takes two inputs 'word' and 'text' and returns true if the word is present in the text.",
            "question": "def search(word, text):\n    words = text.split()\n    ___ in words:\n        ___ == word:\n            return True\n    return False",
            "correct_answer": "def search(word, text):\n    words = text.split()\n    for w in words:\n        if w == word:\n            return True\n    return False"
        },
        {
            "instruction": "Create an algorithm in Python to search for a given item in a dictionary.",
            "question": "def search(dict, item): \n    ___, value in dict.items(): \n        ___ == value: \n            return True \n    return False\n\ndict = {'name': 'john', 'age': 22, 'city': 'New York'}\nitem = 'John'\nprint(search(dict, item))",
            "correct_answer": "def search(dict, item): \n    for key, value in dict.items(): \n        if item == value: \n            return True \n    return False\n\ndict = {'name': 'john', 'age': 22, 'city': 'New York'}\nitem = 'John'\nprint(search(dict, item))"
        },
        {
            "instruction": "Design an algorithm in Python for finding out the factorial of a given number.",
            "question": "def factorial(n):\n fact = 1\n ___ in range(2,n+1):\n  fact = fact * i\n return fact",
            "correct_answer": "def factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact"
        },
        {
            "instruction": "Create a module in Python to scrape the web for a particular website.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    response = requests.get(url)\n    html = response.text\n \n    soup = BeautifulSoup(html, 'html.parser')\n    return soup\n\n___ == '__main__':\n    url = 'https://www.example.com/'\n    soup = scrape_website(url)\n    print(soup)",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    response = requests.get(url)\n    html = response.text\n \n    soup = BeautifulSoup(html, 'html.parser')\n    return soup\n\nif __name__ == '__main__':\n    url = 'https://www.example.com/'\n    soup = scrape_website(url)\n    print(soup)"
        },
        {
            "instruction": "Create a function in Python that checks if a given number is a prime.",
            "question": "def isPrime(n):\n    ___ < 2:\n        return False\n    ___ in range(2, int(sqrt(n))+1):\n        ___ % i == 0:\n            return False\n    return True",
            "correct_answer": "def isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
        },
        {
            "instruction": "Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state \"Try again\". If the score is 1, the message should state \"Well done\".",
            "question": "def create_response(score):\n ___ == 0:\n  message = \"Try again\"  \n elif score == 1:\n  message = \"Well done\"\n else:\n  message = \"\"\n \n return {\"score\": score, \"message\": message}",
            "correct_answer": "def create_response(score):\n if score == 0:\n  message = \"Try again\"  \n elif score == 1:\n  message = \"Well done\"\n else:\n  message = \"\"\n \n return {\"score\": score, \"message\": message}"
        },
        {
            "instruction": "Using Python, generate a program for solving linear equations.",
            "question": "def solution(coefficients):\n\t# get the coefficients of the equations\n\ta = coefficients[0][0] \n\tb = coefficients[0][1] \n\tc = coefficients[0][2] \n\td = coefficients[1][0] \n\te = coefficients[1][1] \n\tf = coefficients[1][2] \n\n\t# solve ___ and y\n\ty = (a*f - c*d)/(a*e - b*d) \n\tx = (c*e - b*f)/(a*e - b*d) \n\n\t# return the solutions\n\treturn x, y\n\n\n# example\nsolution([[1, 2, 8], [3, -4, -2]])",
            "correct_answer": "def solution(coefficients):\n\t# get the coefficients of the equations\n\ta = coefficients[0][0] \n\tb = coefficients[0][1] \n\tc = coefficients[0][2] \n\td = coefficients[1][0] \n\te = coefficients[1][1] \n\tf = coefficients[1][2] \n\n\t# solve for x and y\n\ty = (a*f - c*d)/(a*e - b*d) \n\tx = (c*e - b*f)/(a*e - b*d) \n\n\t# return the solutions\n\treturn x, y\n\n\n# example\nsolution([[1, 2, 8], [3, -4, -2]])"
        },
        {
            "instruction": "Generate a Python program to apply custom formatting for the following output.",
            "question": "def create_html_table(slist):\n    table_html = \"<table>\"\n    ___ in slist:\n        table_html += \"<tr>\"\n        table_html += \"<td>\" + str + \"</td>\" \n        table_html += \"</tr>\"\n\n    table_html += \"</table>\"\n    return table_html",
            "correct_answer": "def create_html_table(slist):\n    table_html = \"<table>\"\n    for str in slist:\n        table_html += \"<tr>\"\n        table_html += \"<td>\" + str + \"</td>\" \n        table_html += \"</tr>\"\n\n    table_html += \"</table>\"\n    return table_html"
        },
        {
            "instruction": "Modify the Python function so that it prints \"Success!\" if the input parameter is greater than 10, or prints \"Failed!\" if it is less than or equal to 10.",
            "question": "def check_num(num):\n    ___ > 10:\n        print(\"Success!\")\n    else:\n        print(\"Failed!\")\n\ncheck_num(7)",
            "correct_answer": "def check_num(num):\n    if num > 10:\n        print(\"Success!\")\n    else:\n        print(\"Failed!\")\n\ncheck_num(7)"
        },
        {
            "instruction": "Write a Python program that takes two given strings and checks if the first is a substring of the second one.",
            "question": "def is_substring(string_1, string_2):\n    \n    ___ in string_2:\n        return True\n    else:\n        return False",
            "correct_answer": "def is_substring(string_1, string_2):\n    \n    if string_1 in string_2:\n        return True\n    else:\n        return False"
        },
        {
            "instruction": "Compare two arrays of Python objects and return True if all objects in arrayA are also in arrayB.",
            "question": "def compare_arrays(arrA, arrB):\n    ___ in arrA:\n        ___ not in arrB:\n            return False\n    return True",
            "correct_answer": "def compare_arrays(arrA, arrB):\n    for i in arrA:\n        if i not in arrB:\n            return False\n    return True"
        },
        {
            "instruction": "Write a Python function to generate a multiplication table for a given number.",
            "question": "def generate_table(num):\n    # print the table heading\n    print(\"MULTIPLICATION TABLE FOR {}\".format(num))\n    # generate the table\n    ___ in range(1, 11):\n        print(\"{} x {} = {}\".format(num, i, num*i))\n\n# generate table ___\ngenerate_table(9)",
            "correct_answer": "def generate_table(num):\n    # print the table heading\n    print(\"MULTIPLICATION TABLE FOR {}\".format(num))\n    # generate the table\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(num, i, num*i))\n\n# generate table for 9\ngenerate_table(9)"
        },
        {
            "instruction": "Develop a program in Python for printing an asterisk triangle consisting of n rows.",
            "question": "def asterisk_triangle(n):\n    ___ in range(n):\n        ___ in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)",
            "correct_answer": "def asterisk_triangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print('*', end=\" \")\n        print()\n\nn = 5\nasterisk_triangle(n)"
        },
        {
            "instruction": "Generate a python program to check the sum of two numbers and determine if they are equal or not.",
            "question": "def compare_sum(a, b):\n  ___ + b == 10:\n    return True\n  else:\n    return False",
            "correct_answer": "def compare_sum(a, b):\n  if a + b == 10:\n    return True\n  else:\n    return False"
        },
        {
            "instruction": "Edit the following Python function to raise an exception if the given number is lower than 0.",
            "question": "def square(num):\n    ___ < 0:\n        raise ValueError('Cannot square negative numbers.')\n    return num**2",
            "correct_answer": "def square(num):\n    if num < 0:\n        raise ValueError('Cannot square negative numbers.')\n    return num**2"
        },
        {
            "instruction": "Optimize a given Python program for better runtime",
            "question": "x = 0\n___ in range(0,10000,2):\n    x += i\nx *= 2\nx += (10000 - 1)",
            "correct_answer": "x = 0\nfor i in range(0,10000,2):\n    x += i\nx *= 2\nx += (10000 - 1)"
        },
        {
            "instruction": "Create a Python dictionary for alphabetical order of numeric input",
            "question": "def createDict(arr):\n  res = {}\n  ___ in range(len(arr)):\n    res[arr[i]] = i + 1\n  return res\n\nd = createDict([2, 3, 1])\nprint(d)",
            "correct_answer": "def createDict(arr):\n  res = {}\n  for i in range(len(arr)):\n    res[arr[i]] = i + 1\n  return res\n\nd = createDict([2, 3, 1])\nprint(d)"
        },
        {
            "instruction": "Generate a program in Python that will check if a given number is a palindrome.",
            "question": "def is_palindrome(n):\n n = str(n)\n \n return n == n[::-1]\n \nnum = 123321\n___(num):\n print(f\"{num} is a palindrome\")\nelse:\n print(f\"{num} is not a palindrome\")",
            "correct_answer": "def is_palindrome(n):\n n = str(n)\n \n return n == n[::-1]\n \nnum = 123321\nif is_palindrome(num):\n print(f\"{num} is a palindrome\")\nelse:\n print(f\"{num} is not a palindrome\")"
        },
        {
            "instruction": "Write an algorithm in Python to determine if a number is an Armstrong number or not.",
            "question": "def armstrong_number(num):\n  digits = [int(x) ___ in str(num)]\n  n_digits = len(digits)\n  sum_of_cubes = 0\n  ___ in digits:\n    sum_of_cubes += digit ** n_digits\n  ___ == num:\n    return True\n  else:\n    return False\n\narmstrong_number(370)",
            "correct_answer": "def armstrong_number(num):\n  digits = [int(x) for x in str(num)]\n  n_digits = len(digits)\n  sum_of_cubes = 0\n  for digit in digits:\n    sum_of_cubes += digit ** n_digits\n  if sum_of_cubes == num:\n    return True\n  else:\n    return False\n\narmstrong_number(370)"
        },
        {
            "instruction": "Develop a Python script for creating a dictionary with all the occurrences of the words in a sentence.",
            "question": "sentence = \"John and Mary went to the school\"\nwords = sentence.split()\nword_dict = {}\n\n___ in words:\n    ___ in word_dict:\n        word_dict[word] += 1\n    else:\n        word_dict[word] = 1\n\nprint(word_dict)",
            "correct_answer": "sentence = \"John and Mary went to the school\"\nwords = sentence.split()\nword_dict = {}\n\nfor word in words:\n    if word in word_dict:\n        word_dict[word] += 1\n    else:\n        word_dict[word] = 1\n\nprint(word_dict)"
        },
        {
            "instruction": "Create a python program to find if a number is a prime number",
            "question": "def is_prime(num):\n    ___ in range(2, num):\n        ___ num % i:\n            return False\n    return True\n\nnum = 15 \n___(num):\n    print(\"The number is prime\")\nelse:\n    print(\"The number is not prime\")",
            "correct_answer": "def is_prime(num):\n    for i in range(2, num):\n        if not num % i:\n            return False\n    return True\n\nnum = 15 \nif is_prime(num):\n    print(\"The number is prime\")\nelse:\n    print(\"The number is not prime\")"
        },
        {
            "instruction": "Generate a python script to calculate the total public holiday hours for a given state.",
            "question": "state = \"Illinois\"\n\ndef calculate_public_holiday_hours(state):\n    # code to calculate public holiday hours ___ given state\n    ___ == \"Illinois\":\n        return 8\n    # code ___ states\n\nhours = calculate_public_holiday_hours(state)\nprint(\"Public holiday hours:\", hours)",
            "correct_answer": "state = \"Illinois\"\n\ndef calculate_public_holiday_hours(state):\n    # code to calculate public holiday hours for a given state\n    if state == \"Illinois\":\n        return 8\n    # code for other states\n\nhours = calculate_public_holiday_hours(state)\nprint(\"Public holiday hours:\", hours)"
        },
        {
            "instruction": "Generate a python code to calculate the factorial for a given number.",
            "question": "def factorial(number):\n    ___ == 0:\n        return 1\n    else:\n        return number * factorial(number -1)\n\nfactorial(num)",
            "correct_answer": "def factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number -1)\n\nfactorial(num)"
        },
        {
            "instruction": "Create a Python script to calculate the Fibonacci sequence for a given integer n.",
            "question": "# Fibonacci sequence\ndef Fibonacci(n):\n a = 0\n b = 1\n ___ < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a\n elif n == 1:\n return b\n else:\n ___ in range(2,n):\n c = a + b\n a = b\n b = c\n return b\n\n# Driver Program\nprint(Fibonacci(7)) \n# Output: 13",
            "correct_answer": "# Fibonacci sequence\ndef Fibonacci(n):\n a = 0\n b = 1\n if n < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a\n elif n == 1:\n return b\n else:\n for i in range(2,n):\n c = a + b\n a = b\n b = c\n return b\n\n# Driver Program\nprint(Fibonacci(7)) \n# Output: 13"
        },
        {
            "instruction": "Identify errors and write fix for the following python code",
            "question": "def uppercase_letter_count(string):\n    count = 0\n    ___ in string: # Added missing colon\n        ___.isupper():\n            count += 1\n    return count # Removed an unnecessary '-'",
            "correct_answer": "def uppercase_letter_count(string):\n    count = 0\n    for c in string: # Added missing colon\n        if c.isupper():\n            count += 1\n    return count # Removed an unnecessary '-'"
        },
        {
            "instruction": "Create a scoring system for a trivia game in Python. The system should take two inputs - the correct answer and user response - and return a single score value.",
            "question": "def score_trivia(correct, user):\n    correct = correct.lower()\n    user = user.lower()\n\n    max_score = 10\n    score = 0\n\n    ___ == user:\n        score = max_score\n    elif user in correct or correct in user:\n        score = max_score * 0.8\n\n    return score",
            "correct_answer": "def score_trivia(correct, user):\n    correct = correct.lower()\n    user = user.lower()\n\n    max_score = 10\n    score = 0\n\n    if correct == user:\n        score = max_score\n    elif user in correct or correct in user:\n        score = max_score * 0.8\n\n    return score"
        },
        {
            "instruction": "Optimize a code snippet in Python for maximum performance.",
            "question": "import time\n\ndef sleep_for_the_night():\n ___:\n  start_time = time.time()\n  time.sleep(5)\n  end_time = time.time()\n  elapsed_time = end_time - start_time\n  ___ < 5:\n   time.sleep(5-elapsed_time)\n\n___:\n sleep_for_the_night()",
            "correct_answer": "import time\n\ndef sleep_for_the_night():\n while True:\n  start_time = time.time()\n  time.sleep(5)\n  end_time = time.time()\n  elapsed_time = end_time - start_time\n  if elapsed_time < 5:\n   time.sleep(5-elapsed_time)\n\nwhile True:\n sleep_for_the_night()"
        },
        {
            "instruction": "Given two strings A and B, construct a Python program to determine if B is a substring of A.",
            "question": "def is_substring(A, B): \n    ___ in A: \n        return True \n    else: \n        return False",
            "correct_answer": "def is_substring(A, B): \n    if B in A: \n        return True \n    else: \n        return False"
        },
        {
            "instruction": "Optimize a Python function for maximum performance.",
            "question": "def reverse_string(s): \n    start = 0 \n    end = len(s) \n    string=\"\" \n\n    ___ > 0: \n        string += s[end-1] \n        end -= 1\n\n    return string",
            "correct_answer": "def reverse_string(s): \n    start = 0 \n    end = len(s) \n    string=\"\" \n\n    while end > 0: \n        string += s[end-1] \n        end -= 1\n\n    return string"
        },
        {
            "instruction": "Write a Python program that checks if a given number is prime.",
            "question": "def is_prime(n):\n    ___ == 2 or n == 3:\n        return True\n    ___ < 2 or n%2 == 0:\n        return False\n    ___ < 9:\n        return True\n    ___%3 == 0:\n        return False\n\n    r = int(n**0.5)\n    f = 5\n    ___ <= r:\n        ___%f == 0:\n            return False\n        ___ % (f+2) == 0:\n            return False\n        f += 6\n    return True\n\nnum = 7\nprint(\"Is\", num, \"prime?: \", is_prime(num))",
            "correct_answer": "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n%2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n%3 == 0:\n        return False\n\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0:\n            return False\n        if n % (f+2) == 0:\n            return False\n        f += 6\n    return True\n\nnum = 7\nprint(\"Is\", num, \"prime?: \", is_prime(num))"
        },
        {
            "instruction": "Develop a Python script for extracting data from a web page.",
            "question": "Properly functioning Python script ___ data from a web page.",
            "correct_answer": "Properly functioning Python script for extracting data from a web page."
        },
        {
            "instruction": "Edit the given Python program to use for loop instead of while loop.",
            "question": "___ in range(10):\n print(i)",
            "correct_answer": "for i in range(10):\n print(i)"
        },
        {
            "instruction": "Develop a program in Python for finding the factorial of a given number.",
            "question": "def factorial(n):\n    ___ < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        ___ in range(1, n + 1):\n            result *= i\n        return result\n\nnum = 7\nprint('factorial of {} is {}'.format(num, factorial(num)))",
            "correct_answer": "def factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nnum = 7\nprint('factorial of {} is {}'.format(num, factorial(num)))"
        },
        {
            "instruction": "Create a python program for the following purpose:",
            "question": "def count_even_pairs(N, A):\n    n = 0\n    ___ in range(N):\n        ___ in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n",
            "correct_answer": "def count_even_pairs(N, A):\n    n = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] + A[j]) % 2 == 0:\n                n += 1\n    return n"
        },
        {
            "instruction": "Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.",
            "question": "def factorial(n):\n    ___ == 0:\n        return 1\n    else:\n        result = 1\n        ___ in range(1, n+1):\n            result *= i\n        return result",
            "correct_answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result"
        },
        {
            "instruction": "Write a function in Python that receives two positive integers and prints out all the numbers in the range of the two integers (inclusive), except for numbers divisible by three.",
            "question": "def print_numbers(lower_bound, upper_bound):\n ___ in range(lower_bound, upper_bound+1):\n ___ % 3 != 0:\n print(num)\n  \nprint_numbers(5, 15)",
            "correct_answer": "def print_numbers(lower_bound, upper_bound):\n for num in range(lower_bound, upper_bound+1):\n if num % 3 != 0:\n print(num)\n  \nprint_numbers(5, 15)"
        },
        {
            "instruction": "Create a Python program to detect if a number is a prime number.",
            "question": "def is_prime(x):\n    ___ < 2:\n        return False\n    \n    ___ in range(2, x):\n        ___ % i == 0:\n            return False\n    return True",
            "correct_answer": "def is_prime(x):\n    if x < 2:\n        return False\n    \n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True"
        },
        {
            "instruction": "Create a program in Python that takes two lists and checks for common elements between them.",
            "question": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    ___ in list1: \n        ___ in list2: \n            ___ == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))",
            "correct_answer": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))"
        },
        {
            "instruction": "Develop a python program that checks if a given word is consonant or not.",
            "question": "def is_consonant(word): \n    # List containing all consonants \n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"] \n    ___ in word: \n        ___ in consonants: \n            return True\n    return False\n\n# Example\nprint (is_consonant(\"hello\")) # False",
            "correct_answer": "def is_consonant(word): \n    # List containing all consonants \n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"] \n    for char in word: \n        if char in consonants: \n            return True\n    return False\n\n# Example\nprint (is_consonant(\"hello\")) # False"
        },
        {
            "instruction": "Create a Python algorithm to check if a given word exists in a dictionary.",
            "question": "# Function to test ___ word exists in a dictionary \ndef wordExists(dictionary, word):\n    ___, value in dictionary.items():\n        ___ == word:\n            return True\n    \n    return False\n\n# Main function\ndictionary = {\"hello\": \"greeting\", \"car\": \"vehicle\"}\nword = \"hello\"\nprint(wordExists(dictionary, word))",
            "correct_answer": "# Function to test if a word exists in a dictionary \ndef wordExists(dictionary, word):\n    for key, value in dictionary.items():\n        if key == word:\n            return True\n    \n    return False\n\n# Main function\ndictionary = {\"hello\": \"greeting\", \"car\": \"vehicle\"}\nword = \"hello\"\nprint(wordExists(dictionary, word))"
        },
        {
            "instruction": "Generate a correct python program for solving the following problem",
            "question": "def find_pairs_with_sum(values, target):\n    indices_list = []\n    ___ in range(len(values)):\n        x = target - values[i]\n        ___ in values[i+1:]:\n            indices_list.extend([i, values.index(x)])\n    return indices_list",
            "correct_answer": "def find_pairs_with_sum(values, target):\n    indices_list = []\n    for i in range(len(values)):\n        x = target - values[i]\n        if x in values[i+1:]:\n            indices_list.extend([i, values.index(x)])\n    return indices_list"
        },
        {
            "instruction": "Tackle the task of optimizing a given Python program for faster execution.",
            "question": "# Program to find the sum of two numbers\ndef add_numbers(a, b):\n    # Use bitwise operators instead of normal arithmetic operations\n    # as they are much faster and more efficient \n    return a ^ b ___ <= b else b ^ a ___ <= a else a ^ b",
            "correct_answer": "# Program to find the sum of two numbers\ndef add_numbers(a, b):\n    # Use bitwise operators instead of normal arithmetic operations\n    # as they are much faster and more efficient \n    return a ^ b if a <= b else b ^ a if b <= a else a ^ b"
        },
        {
            "instruction": "Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result.",
            "question": "import requests\n\nurl = 'http://www.example.com'\nkeyword = 'success'\n\nr = requests.get(url)\n___ in r.text:\n print('Pass')\nelse:\n print('Fail')",
            "correct_answer": "import requests\n\nurl = 'http://www.example.com'\nkeyword = 'success'\n\nr = requests.get(url)\nif keyword in r.text:\n print('Pass')\nelse:\n print('Fail')"
        },
        {
            "instruction": "Given two strings s and t, write a Python program to check if t is a substring of s.",
            "question": "def is_substring(s, t):\n    ___ in s:\n        return True\n    else:\n        return False",
            "correct_answer": "def is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False"
        },
        {
            "instruction": "Create a function in Python which takes in a number n and returns \"Fizz\" if the number is divisible by 3, \"Buzz\" if the number is divisible by 5, and \"FizzBuzz\" if the number is divisible by both 3 and 5.",
            "question": "def fizzbuzz(n):\n ___ % 3 == 0 and n % 5 == 0:\n  return 'FizzBuzz'\n elif n % 3 == 0:\n  return 'Fizz'\n elif n % 5 == 0:\n  return 'Buzz'\n else:\n  return n",
            "correct_answer": "def fizzbuzz(n):\n if n % 3 == 0 and n % 5 == 0:\n  return 'FizzBuzz'\n elif n % 3 == 0:\n  return 'Fizz'\n elif n % 5 == 0:\n  return 'Buzz'\n else:\n  return n"
        },
        {
            "instruction": "Build a function in Python for computing the Hamming Distance between two strings of equal length.",
            "question": "def hammingDistance(s1, s2): \n\n    # initialize with 0\n    distance = 0\n  \n    # Calculate the length of the string \n    length_str1 = len(s1) \n    # Compare adjacent characters and increment the count \n    # ___ are not same \n    ___ in range(length_str1): \n        ___[i] != s2[i]: \n            distance += 1\n  \n    return distance",
            "correct_answer": "def hammingDistance(s1, s2): \n\n    # initialize with 0\n    distance = 0\n  \n    # Calculate the length of the string \n    length_str1 = len(s1) \n    # Compare adjacent characters and increment the count \n    # if characters are not same \n    for i in range(length_str1): \n        if s1[i] != s2[i]: \n            distance += 1\n  \n    return distance"
        },
        {
            "instruction": "Generate a Python script for a query to fetch data from a given MySQL table.",
            "question": "import mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\n___ in myresult:\n  print(row)",
            "correct_answer": "import mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor row in myresult:\n  print(row)"
        },
        {
            "instruction": "Write a Python statement to check if a given number is within a given range",
            "question": "___ <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')",
            "correct_answer": "if 0 <= 3 <= 10:\n print('Number is within the range')\nelse:\n print('Number is not within the range')"
        },
        {
            "instruction": "Design a for loop in Python which iterates over two given lists and prints their items in a orderly manner.",
            "question": "___, item2 in zip(list1, list2):\n    print(f\"{item1}: {item2}\")",
            "correct_answer": "for item1, item2 in zip(list1, list2):\n    print(f\"{item1}: {item2}\")"
        },
        {
            "instruction": "Write a Python program that takes an integer as input and check if the number is prime or not.",
            "question": "def is_prime(n):\n    ___ < 2: \n        return False\n\n    ___ in range(2, int(n**0.5) + 1):  \n        ___ % i == 0: \n            return False\n\n    return True",
            "correct_answer": "def is_prime(n):\n    if n < 2: \n        return False\n\n    for i in range(2, int(n**0.5) + 1):  \n        if n % i == 0: \n            return False\n\n    return True"
        },
        {
            "instruction": "Write a Python program to check if a given number is divisible by 3 and 5 or not.",
            "question": "def check_divisible_3and5(num):\n    if (num % 3 == 0 and num % 5 == 0):\n        return True\n    else:\n        return False\n\n# test given number\nnum = 10\n___(num):\n    print(\"%d is divisible by 3 and 5\" %num)\nelse:\n    print(\"%d is not divisible by 3 and 5\" %num)",
            "correct_answer": "def check_divisible_3and5(num):\n    if (num % 3 == 0 and num % 5 == 0):\n        return True\n    else:\n        return False\n\n# test given number\nnum = 10\nif check_divisible_3and5(num):\n    print(\"%d is divisible by 3 and 5\" %num)\nelse:\n    print(\"%d is not divisible by 3 and 5\" %num)"
        },
        {
            "instruction": "Write a python function to compare two strings and return 1 if the strings are anagrams, 0 if not.",
            "question": "def is_anagram(string1, string2):\n    string1 = sorted(string1.replace(\" \", \"\").lower())\n    string2 = sorted(string2.replace(\" \", \"\").lower())\n    \n    ___ == string2:\n        return 1\n    else:\n        return 0",
            "correct_answer": "def is_anagram(string1, string2):\n    string1 = sorted(string1.replace(\" \", \"\").lower())\n    string2 = sorted(string2.replace(\" \", \"\").lower())\n    \n    if string1 == string2:\n        return 1\n    else:\n        return 0"
        },
        {
            "instruction": "Write a Python program to check if two strings are a rotation of each other.",
            "question": "___(string1) == len(string2) and string1 in string2*2:\n    print(\"The strings are a rotation of each other\")\nelse:\n    print(\"The strings are not a rotation of each other\")",
            "correct_answer": "if len(string1) == len(string2) and string1 in string2*2:\n    print(\"The strings are a rotation of each other\")\nelse:\n    print(\"The strings are not a rotation of each other\")"
        },
        {
            "instruction": "Analyze a given Python code and write a function that checks if a given number is prime.",
            "question": "def primeCheck(num):\n ___ > 1:\n ___ in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True",
            "correct_answer": "def primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True"
        },
        {
            "instruction": "Develop a python program for predicting a movie's rating based on its reviews.",
            "question": "#Code\nnum_reviews = len(reviews)\nnum_positive_reviews = 0\n\n___ in reviews:\n    if 'great' in review:\n        num_positive_reviews +=1\n\nrating = num_positive_reviews / num_reviews #Rating  \nprint(rating) #Prints the rating",
            "correct_answer": "#Code\nnum_reviews = len(reviews)\nnum_positive_reviews = 0\n\nfor review in reviews:\n    if 'great' in review:\n        num_positive_reviews +=1\n\nrating = num_positive_reviews / num_reviews #Rating  \nprint(rating) #Prints the rating"
        },
        {
            "instruction": "Create a program in Python for ASCII conversion.",
            "question": "def ascii_conversion(string):\n return ''.join([f'{ord(c):08b}' ___ in string])\n\nprint(ascii_conversion(\"Hello World\"))",
            "correct_answer": "def ascii_conversion(string):\n return ''.join([f'{ord(c):08b}' for c in string])\n\nprint(ascii_conversion(\"Hello World\"))"
        },
        {
            "instruction": "Develop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise.",
            "question": "# anagram checker\n\ndef check_anagrams(str1, str2):\n    ___(str1) == sorted(str2):\n        return True \n    else: \n        return False \n  \n# Driver code \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif(check_anagrams(str1, str2)): \n    print(\"The strings are anagrams.\")  \nelse: \n    print(\"The strings aren't anagrams.\")",
            "correct_answer": "# anagram checker\n\ndef check_anagrams(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True \n    else: \n        return False \n  \n# Driver code \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif(check_anagrams(str1, str2)): \n    print(\"The strings are anagrams.\")  \nelse: \n    print(\"The strings aren't anagrams.\")"
        },
        {
            "instruction": "Write a Python code to check if the given number is prime.",
            "question": "def is_prime(n):\n    ___ <= 1:\n        return False\n    ___ in range(2, n//2 + 1):\n        ___ % i == 0:\n            return False\n    return True\n\n___(23):\n    print('The given number is prime')\nelse:\n    print('The given number is not prime')",
            "correct_answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return False\n    return True\n\nif is_prime(23):\n    print('The given number is prime')\nelse:\n    print('The given number is not prime')"
        },
        {
            "instruction": "Can you write a Python function to determine if a supplied number is prime?",
            "question": "def is_prime(num):\n    \"\"\"Check ___ given number is prime.\n\n    Args:\n        num (int): A number to check\n\n    Returns:\n        bool: True ___ is prime, False otherwise.\n    \"\"\"\n\n    ___ < 2: \n        return False\n\n    ___ in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnum = 20\nresult = is_prime(num)\nprint(f\"Is {num} prime? {result}\")",
            "correct_answer": "def is_prime(num):\n    \"\"\"Check if the given number is prime.\n\n    Args:\n        num (int): A number to check\n\n    Returns:\n        bool: True if num is prime, False otherwise.\n    \"\"\"\n\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n\nnum = 20\nresult = is_prime(num)\nprint(f\"Is {num} prime? {result}\")"
        },
        {
            "instruction": "Create a Python Flask application for solving a linear equation. The application should have an endpoint that receives an equation as input and returns the solution as output.",
            "question": "from flask import Flask, request\nfrom sympy import *\n\napp = Flask(name)\nx = Symbol('x')\n\n@app.route('/solve', methods=['POST'])\ndef solve():\n equation = request.json['equation']\n solution = solve(equation, x)\n return {'solution': str(solution[0])}\n\n___ == 'main':\n app.run(debug=True)",
            "correct_answer": "from flask import Flask, request\nfrom sympy import *\n\napp = Flask(name)\nx = Symbol('x')\n\n@app.route('/solve', methods=['POST'])\ndef solve():\n equation = request.json['equation']\n solution = solve(equation, x)\n return {'solution': str(solution[0])}\n\nif name == 'main':\n app.run(debug=True)"
        },
        {
            "instruction": "Generate an automated unit test in Python for the following function",
            "question": "import unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\n___ == '__main__':\n    unittest.main()",
            "correct_answer": "import unittest\n\nclass TestAddition(unittest.TestCase):\n\n    def test_addition(self):\n        self.assertEqual(add(1, 1), 2)\n        self.assertEqual(add(2, 5), 7)\n        self.assertEqual(add(3, 3), 6)\n        self.assertEqual(add(-8, 6), -2)\n        self.assertEqual(add(-3, -3), -6)\n\nif __name__ == '__main__':\n    unittest.main()"
        },
        {
            "instruction": "Generate a Python implementation for these pseudocode.",
            "question": "def print_product_names():\n    unscanned_barcodes = [barcodes] #list of unscanned barcodes\n\n    ___(unscanned_barcodes) > 0:\n        barcode = unscanned_barcodes.pop(0)\n        product_name = scan_barcode(barcode) #function that returns product name\n        print(product_name)",
            "correct_answer": "def print_product_names():\n    unscanned_barcodes = [barcodes] #list of unscanned barcodes\n\n    while len(unscanned_barcodes) > 0:\n        barcode = unscanned_barcodes.pop(0)\n        product_name = scan_barcode(barcode) #function that returns product name\n        print(product_name)"
        },
        {
            "instruction": "Write a Python program to modify a given dataset for a specific task.",
            "question": "def modify_data(dataset, task):\nmodified_data = []\n ___ == \"filter age >18\":\n ___ in dataset:\n ___['age'] > 18:\n modified_data.append(d)\n return modified_data",
            "correct_answer": "def modify_data(dataset, task):\nmodified_data = []\n if task == \"filter age >18\":\n for d in dataset:\n if d['age'] > 18:\n modified_data.append(d)\n return modified_data"
        },
        {
            "instruction": "Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other.",
            "question": "def is_substring(string1, string2):\n    ___ in range(len(string1)):\n        ___ in range(len(string2)):\n            ___[i] == string2[j]:\n                return True\n    return False\n\nresult = is_substring(\"python\", \"java\")\nprint(result)",
            "correct_answer": "def is_substring(string1, string2):\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i] == string2[j]:\n                return True\n    return False\n\nresult = is_substring(\"python\", \"java\")\nprint(result)"
        },
        {
            "instruction": "Enhance the following Python code for saving a webpage to a local directory.",
            "question": "import urllib.request\nfrom urllib.parse import urlparse\nimport os\n\ndef save_webpage(url, path):\n parsed_url = urlparse(url)\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\n ___ os.path.exists(os.path.dirname(path)):\n os.makedirs(os.path.dirname(path))\n urllib.request.urlretrieve(url, path)",
            "correct_answer": "import urllib.request\nfrom urllib.parse import urlparse\nimport os\n\ndef save_webpage(url, path):\n parsed_url = urlparse(url)\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\n if not os.path.exists(os.path.dirname(path)):\n os.makedirs(os.path.dirname(path))\n urllib.request.urlretrieve(url, path)"
        },
        {
            "instruction": "Design a function in Python to test if the given number is a prime or not.",
            "question": "def is_prime(n):\n ___ <= 1:\n return False\n\n ___ in range(2, n):\n ___ % i == 0:\n return False\n\n return True\n\nis_prime(13) # True",
            "correct_answer": "def is_prime(n):\n if n <= 1:\n return False\n\n for i in range(2, n):\n if n % i == 0:\n return False\n\n return True\n\nis_prime(13) # True"
        },
        {
            "instruction": "Given two strings, write a Python program to check if one is an anagram of other.",
            "question": "def isAnagram(str1, str2):\n    str1_sorted = sorted(str1)\n    str2_sorted = sorted(str2)\n    # Compare sorted strings\n    ___ == str2_sorted:\n        return True\n    else:\n        return False\n\nstr1 = \"listen\"\nstr2 = \"silent\"\n\nprint(isAnagram(str1, str2))",
            "correct_answer": "def isAnagram(str1, str2):\n    str1_sorted = sorted(str1)\n    str2_sorted = sorted(str2)\n    # Compare sorted strings\n    if str1_sorted == str2_sorted:\n        return True\n    else:\n        return False\n\nstr1 = \"listen\"\nstr2 = \"silent\"\n\nprint(isAnagram(str1, str2))"
        },
        {
            "instruction": "Edit the code to make it in a Python program to check if a number is divisible by 5 and 11.",
            "question": "def isDivisible(num): \n    ___ % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")",
            "correct_answer": "def isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")"
        },
        {
            "instruction": "Create a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.",
            "question": "import pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check ___ null values have been replaced\nprint(df.isnull().sum())",
            "correct_answer": "import pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check if the null values have been replaced\nprint(df.isnull().sum())"
        },
        {
            "instruction": "Create a Python program for finding all combinations of numbers that equal a given target number.",
            "question": "def find_combos(target):\n combos = []\n \n ___ in range(int(target/2)+1):\n # increments of two to avoid duplicate results\n ___ in range(i, int(target/2)+1, 2):\n ___+j == target:\n combos.append((i,j))\n \n return combos\n\ncombos = find_combos(10)\nprint(combos)",
            "correct_answer": "def find_combos(target):\n combos = []\n \n for i in range(int(target/2)+1):\n # increments of two to avoid duplicate results\n for j in range(i, int(target/2)+1, 2):\n if i+j == target:\n combos.append((i,j))\n \n return combos\n\ncombos = find_combos(10)\nprint(combos)"
        },
        {
            "instruction": "How would you design a Python program that checks if a number is divisible by three?",
            "question": "def is_divisible(n):\n    ___ % 3 == 0:\n        return True\n    else:\n        return False\n\nnum = 45\ncheck_divisible = is_divisible(num)\n\n___:\n    print(\"Number is divisible by three.\")\nelse:\n    print(\"Number is not divisible by three.\")",
            "correct_answer": "def is_divisible(n):\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n\nnum = 45\ncheck_divisible = is_divisible(num)\n\nif check_divisible:\n    print(\"Number is divisible by three.\")\nelse:\n    print(\"Number is not divisible by three.\")"
        },
        {
            "instruction": "Optimize the following python code to speed up execution time:\n\narr = [2, 5, 3, 1]\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    if arr[i] > arr[j]:\n       arr[i], arr[j] = arr[j], arr[i]",
            "question": "arr = [2, 5, 3, 1]\n\n# using Python's built in `sorted` function\narr = sorted(arr)\n\n# using the Bubble Sort algorithm\n___ in range(len(arr) - 1):\n ___ in range(len(arr) - 1 - i):\n  ___[j] > arr[j + 1]:\n   arr[j], arr[j + 1] = arr[j + 1], arr[j]",
            "correct_answer": "arr = [2, 5, 3, 1]\n\n# using Python's built in `sorted` function\narr = sorted(arr)\n\n# using the Bubble Sort algorithm\nfor i in range(len(arr) - 1):\n for j in range(len(arr) - 1 - i):\n  if arr[j] > arr[j + 1]:\n   arr[j], arr[j + 1] = arr[j + 1], arr[j]"
        },
        {
            "instruction": "Optimize a Python function for computing Fibonacci numbers.",
            "question": "def fibonacci(n): \n    ___ <= 1: \n        return n \n    else:\n        fibonacci_num=[0,1] #creating a fibonacci list\n        i=2\n        ___<=n:\n            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])\n            i+=1\n        return fibonacci_num[n]",
            "correct_answer": "def fibonacci(n): \n    if n <= 1: \n        return n \n    else:\n        fibonacci_num=[0,1] #creating a fibonacci list\n        i=2\n        while i<=n:\n            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])\n            i+=1\n        return fibonacci_num[n]"
        },
        {
            "instruction": "Create a python script to download a complete web page and cache it for faster offline access.",
            "question": "import requests\nimport os\n\nurl = 'https://www.example.com/page1'\n\n___ os.path.exists('cache'):\n os.makedirs('cache')\n\nr = requests.get(url)\n\nfilename = url.rsplit('/', 1)[-1]\nfile_path = os.path.join('cache', filename)\n\nwith open(file_path, 'wb') as f:\n f.write(r.content)",
            "correct_answer": "import requests\nimport os\n\nurl = 'https://www.example.com/page1'\n\nif not os.path.exists('cache'):\n os.makedirs('cache')\n\nr = requests.get(url)\n\nfilename = url.rsplit('/', 1)[-1]\nfile_path = os.path.join('cache', filename)\n\nwith open(file_path, 'wb') as f:\n f.write(r.content)"
        },
        {
            "instruction": "Write an algorithm for linear search in Python.",
            "question": "def linear_search(list, n):\n  i = 0\n  ___ < len(list):\n    ___[i] == n:\n      return i\n    i = i+1\n  return -1\n\nlist = [1, 3, 8, 10, 15, 20, 25]\nn = 15\nindex = linear_search(list, n)\nprint(\"Number found at index:\", index)",
            "correct_answer": "def linear_search(list, n):\n  i = 0\n  while i < len(list):\n    if list[i] == n:\n      return i\n    i = i+1\n  return -1\n\nlist = [1, 3, 8, 10, 15, 20, 25]\nn = 15\nindex = linear_search(list, n)\nprint(\"Number found at index:\", index)"
        },
        {
            "instruction": "Write a Python program to generate recurrence equation for a given sequence and initial condition.",
            "question": "def generate_recurrence(sequence, initial_condition): \n ___(sequence) <= 1: \n return initial_condition \n \n a_i = sequence[-1] \n a_i_1 = sequence[-2] \n recurrence = a_i + initial_condition - a_i_1 \n return recurrence\n\nresult = generate_recurrence([2, 4, 6, 8], 2)\nprint(result)",
            "correct_answer": "def generate_recurrence(sequence, initial_condition): \n if len(sequence) <= 1: \n return initial_condition \n \n a_i = sequence[-1] \n a_i_1 = sequence[-2] \n recurrence = a_i + initial_condition - a_i_1 \n return recurrence\n\nresult = generate_recurrence([2, 4, 6, 8], 2)\nprint(result)"
        },
        {
            "instruction": "Create a Python program to check if a number is an Armstrong number.",
            "question": "def isArmstrong(number): \n\t\n\tnum = number \n\tlength = len(str(number)) \n\tsum_of_the_power_of_digits = 0 \n\n\t___ > 0:\n\t\trem = num % 10 \n\t\tsum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)\n\t\tnum //= 10\n\t\t\n\tif (sum_of_the_power_of_digits == number) : \n\t\treturn True \n\telse : \n\t\treturn False",
            "correct_answer": "def isArmstrong(number): \n\t\n\tnum = number \n\tlength = len(str(number)) \n\tsum_of_the_power_of_digits = 0 \n\n\twhile num > 0:\n\t\trem = num % 10 \n\t\tsum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)\n\t\tnum //= 10\n\t\t\n\tif (sum_of_the_power_of_digits == number) : \n\t\treturn True \n\telse : \n\t\treturn False"
        },
        {
            "instruction": "Design an algorithm in Python to check if an integer is even or odd.",
            "question": "def check_number(n):\n    ___%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ncheck_number(5) \n# Output: Odd",
            "correct_answer": "def check_number(n):\n    if n%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ncheck_number(5) \n# Output: Odd"
        },
        {
            "instruction": "Generate a python code for an algorithmic solution for the following problem:",
            "question": "def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    ___ in range(n): \n        temp = X - A[i]  \n        ___ >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False",
            "correct_answer": "def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False"
        },
        {
            "instruction": "Build a Python generator that yields the next power of 2 for a given number.",
            "question": "def nextPowerOf2Generator(n): \n    power = 1\n    ___: \n        pow_val = power * 2\n        yield pow_val \n        power = pow_val \n  \nn = 4\n\n___ in nextPowerOf2Generator(n):\n    ___ > n:\n        print(i)\n        break",
            "correct_answer": "def nextPowerOf2Generator(n): \n    power = 1\n    while True: \n        pow_val = power * 2\n        yield pow_val \n        power = pow_val \n  \nn = 4\n\nfor i in nextPowerOf2Generator(n):\n    if i > n:\n        print(i)\n        break"
        },
        {
            "instruction": "Generate a Python program that takes an input of a number and checks if it is prime.",
            "question": "def is_prime(num):\n    ___ == 2:\n        return True\n    elif num < 2 or not all(num % i ___ in range(2, num)):\n        return False\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result)",
            "correct_answer": "def is_prime(num):\n    if num == 2:\n        return True\n    elif num < 2 or not all(num % i for i in range(2, num)):\n        return False\n    return True\n\nnum = 7\nresult = is_prime(num)\nprint(result)"
        },
        {
            "instruction": "Create a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.",
            "question": "import nltk\n\nsentence = 'This is an example sentence.'\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nletter_count = 0\n___ in words:\n letter_count += len(word)\n\nprint('POS Tags: ', tagged_words)\nprint('Letter Count: ', letter_count)",
            "correct_answer": "import nltk\n\nsentence = 'This is an example sentence.'\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nletter_count = 0\nfor word in words:\n letter_count += len(word)\n\nprint('POS Tags: ', tagged_words)\nprint('Letter Count: ', letter_count)"
        },
        {
            "instruction": "Write a Python program to automatically generate the HTML for a table from a dictionary of data.",
            "question": "html_str = '<table><tr>'\n\n___ in d:\n html_str += '<th>{}</th>'.format(key)\nhtml_str += '</tr>'\n\n___ in range(len(d['col1'])):\n html_str += '<tr>'\n ___ in d:\n html_str += '<td>{}</td>'.format(d[key][i])\n html_str += '</tr>'\n\nhtml_str += '</table>'\n\nprint(html_str)",
            "correct_answer": "html_str = '<table><tr>'\n\nfor key in d:\n html_str += '<th>{}</th>'.format(key)\nhtml_str += '</tr>'\n\nfor i in range(len(d['col1'])):\n html_str += '<tr>'\n for key in d:\n html_str += '<td>{}</td>'.format(d[key][i])\n html_str += '</tr>'\n\nhtml_str += '</table>'\n\nprint(html_str)"
        },
        {
            "instruction": "Create a block of code for a Python program to generate a multiplication table for a given number.",
            "question": "# Create a multiplication table ___ given number\nnum = 6\n\n# Loop to generate the table\n___ in range(1, 11):\n  print(f'{num} x {i} = {num * i}')",
            "correct_answer": "# Create a multiplication table for a given number\nnum = 6\n\n# Loop to generate the table\nfor i in range(1, 11):\n  print(f'{num} x {i} = {num * i}')"
        },
        {
            "instruction": "Create a web application in Python that displays a directory structure tree for a given path.",
            "question": "import os\n\ndef make_tree(path): \n files = os.listdir(path) \n ___ in files: \n     full_path = os.path.join(path, f) \n     ___.path.isdir(full_path): \n         print(f) \n         make_tree(full_path) \n     else: \n         print(\" -\" + f) \n  \npath = '/home/myUser/myFolder' \nmake_tree(path)",
            "correct_answer": "import os\n\ndef make_tree(path): \n files = os.listdir(path) \n for f in files: \n     full_path = os.path.join(path, f) \n     if os.path.isdir(full_path): \n         print(f) \n         make_tree(full_path) \n     else: \n         print(\" -\" + f) \n  \npath = '/home/myUser/myFolder' \nmake_tree(path)"
        },
        {
            "instruction": "Write a Python code to determine if the user has enough money in the account for a given transaction.",
            "question": "def enough_balance(balance, amount):\n    ___ > balance:\n        return False\n    return True\n\n___ == '__main__':\n    print(enough_balance(balance, amount))",
            "correct_answer": "def enough_balance(balance, amount):\n    if amount > balance:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(enough_balance(balance, amount))"
        },
        {
            "instruction": "Optimize the python code below for memory efficiency.",
            "question": "my_list = [i**2 ___ in range(20)]",
            "correct_answer": "my_list = [i**2 for i in range(20)]"
        },
        {
            "instruction": "Rewrite the following python code to be more concise while still producing the same output.",
            "question": "___ in range(10):\n print(\"------------\\n\"*10)",
            "correct_answer": "for i in range(10):\n print(\"------------\\n\"*10)"
        },
        {
            "instruction": "Use the inputs provided, write Python code to check if two integers are equal.",
            "question": "___(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")",
            "correct_answer": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")"
        },
        {
            "instruction": "Generate a Python program that can verify if a given sentence is correct or misspelled.",
            "question": "import re\n\ndef spell_check(sentence):\n  words = re.findall(r'\\w+', sentence)\n  ___ in words:\n    ___ word.lower() in dict:\n        return False\n  return True\n\nsentence = \"This is my new computer\"\nresult = spell_check(sentence)\n___:\n    print('Correct spelling')\nelse:\n    print('Incorrect spelling')",
            "correct_answer": "import re\n\ndef spell_check(sentence):\n  words = re.findall(r'\\w+', sentence)\n  for word in words:\n    if not word.lower() in dict:\n        return False\n  return True\n\nsentence = \"This is my new computer\"\nresult = spell_check(sentence)\nif result:\n    print('Correct spelling')\nelse:\n    print('Incorrect spelling')"
        },
        {
            "instruction": "Write a Python code snippet for comparing two strings regardless of their case. You should use regular expressions.",
            "question": "import re\n\nstring1 = \"Hello\"\nstring2 = \"heLLo\"\n\n___.search(string1.lower(), string2.lower()):\n print(\"Strings are equal regardless of case.\")",
            "correct_answer": "import re\n\nstring1 = \"Hello\"\nstring2 = \"heLLo\"\n\nif re.search(string1.lower(), string2.lower()):\n print(\"Strings are equal regardless of case.\")"
        },
        {
            "instruction": "Code an algorithm in Python to check if two given sets are equal.",
            "question": "def is_equal(A, B):\n    ___(A) != len(B):\n        return False\n    ___ in A:\n        ___ not in B:\n            return False\n    return True",
            "correct_answer": "def is_equal(A, B):\n    if len(A) != len(B):\n        return False\n    for el in A:\n        if el not in B:\n            return False\n    return True"
        },
        {
            "instruction": "Given two strings s and t, create a new Python function to check if s is an anagram of t.",
            "question": "def is_anagram(s, t):\n s_list = list(s)\n t_list = list(t)\n s_list.sort()\n t_list.sort()\n ___ == t_list:\n return True\n else:\n return False",
            "correct_answer": "def is_anagram(s, t):\n s_list = list(s)\n t_list = list(t)\n s_list.sort()\n t_list.sort()\n if s_list == t_list:\n return True\n else:\n return False"
        },
        {
            "instruction": "Create a Python script that takes a number and prints the multiplication table for that number.",
            "question": "num = 4 # Take input\n  \n# To take input from the user \n# num = int(input(\"Display multiplication table of? \")) \n  \n# Iterate 10 times from i = 1 to 10 \n___ in range(1, 11): \n   print(num, 'x', i, '=', num*i)",
            "correct_answer": "num = 4 # Take input\n  \n# To take input from the user \n# num = int(input(\"Display multiplication table of? \")) \n  \n# Iterate 10 times from i = 1 to 10 \nfor i in range(1, 11): \n   print(num, 'x', i, '=', num*i)"
        },
        {
            "instruction": "Write a Python program that uses a while loop to calculate a Fibonacci sequence up to the given upper limit.",
            "question": "upper_limit = 10\n\nfibonacci_sequence = [0, 1]\n\na = 0\nb = 1\n\n___ <= upper_limit:\n c = a + b\n a = b\n b = c\n fibonacci_sequence.append(b)\n\nprint(fibonacci_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13]",
            "correct_answer": "upper_limit = 10\n\nfibonacci_sequence = [0, 1]\n\na = 0\nb = 1\n\nwhile b <= upper_limit:\n c = a + b\n a = b\n b = c\n fibonacci_sequence.append(b)\n\nprint(fibonacci_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13]"
        },
        {
            "instruction": "Write a Python program to check if a number is prime by eliminating the multiples of all numbers from 2 to the square root of the number.",
            "question": "import math\n\ndef is_prime(n):\n    ___ in range(2, int(math.sqrt(n))+1):\n        ___ % i == 0:\n            return False\n    return True\n\nprint(is_prime(n))",
            "correct_answer": "import math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(n))"
        },
        {
            "instruction": "Optimize this while loop in the given Python code.",
            "question": "i = 0\n___ < 5:\n    print(i)\n    i += 1",
            "correct_answer": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1"
        },
        {
            "instruction": "Modify the following code in Python to check if a number is prime or not.",
            "question": "def checkPrime(n):\n    ___ <= 1:\n        return False\n\n    ___ in range(2,n):\n        ___ % i == 0:\n            return False\n    \n    return True",
            "correct_answer": "def checkPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    \n    return True"
        },
        {
            "instruction": "Write a function in Python that takes two strings as input and return true if one is a rotation of the other.",
            "question": "def is_rotation(s1, s2):\n  # edge case check\n  ___(s1) != len(s2):\n    return False\n\n  # concatenate s2 to itself\n  concat_s2 = s2 + s2\n\n  #search s1 in concat_s2\n  return s1 in concat_s2",
            "correct_answer": "def is_rotation(s1, s2):\n  # edge case check\n  if len(s1) != len(s2):\n    return False\n\n  # concatenate s2 to itself\n  concat_s2 = s2 + s2\n\n  #search s1 in concat_s2\n  return s1 in concat_s2"
        },
        {
            "instruction": "Create a Python function for computing the Factorial of a number.",
            "question": "def factorial(n):\n   ___ == 0:\n      return 1\n   else:\n      return n * factorial(n-1)\n\nprint(factorial(6))",
            "correct_answer": "def factorial(n):\n   if n == 0:\n      return 1\n   else:\n      return n * factorial(n-1)\n\nprint(factorial(6))"
        },
        {
            "instruction": "Create a Python function that uses a given dictionary to calculate the sum of all the values for each key.",
            "question": "def sum_dict_values(dict):\n  result = 0\n  ___ in dict:\n    result += dict[key]\n\n  return result\n\ndict = {'a': 4, 'b': 2, 'c': 1}\nsum = sum_dict_values(dict)\nprint(sum) # 7",
            "correct_answer": "def sum_dict_values(dict):\n  result = 0\n  for key in dict:\n    result += dict[key]\n\n  return result\n\ndict = {'a': 4, 'b': 2, 'c': 1}\nsum = sum_dict_values(dict)\nprint(sum) # 7"
        },
        {
            "instruction": "Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word.",
            "question": "def parse_text(text, word):\n  word_count = 0\n  words = text.split()\n  ___ in words:\n    ___ == word:\n      word_count += 1\n  return word_count\n  \ntext = 'This is an example text.'\nword = 'example'\nword_count = parse_text(text, word)\nprint('The word \"{}\" appears {} times in the text.'.format(word, word_count))",
            "correct_answer": "def parse_text(text, word):\n  word_count = 0\n  words = text.split()\n  for w in words:\n    if w == word:\n      word_count += 1\n  return word_count\n  \ntext = 'This is an example text.'\nword = 'example'\nword_count = parse_text(text, word)\nprint('The word \"{}\" appears {} times in the text.'.format(word, word_count))"
        },
        {
            "instruction": "Implement a solutions for the Tower of Hanoi problem using Python.",
            "question": "def hanoi(n, source, aux, dest):\n ___ == 1:\n  print('Move disk 1 from {0} to {1}'.format(source, dest))\n else:\n  hanoi(n-1, source, dest, aux)\n  print('Move disk {0} from {1} to {2}'.format(n, source, dest))\n  hanoi(n-1, aux, source, dest)\n\n# Driver program\nn = 4\nhanoi(n, 'a', 'b', 'c')",
            "correct_answer": "def hanoi(n, source, aux, dest):\n if n == 1:\n  print('Move disk 1 from {0} to {1}'.format(source, dest))\n else:\n  hanoi(n-1, source, dest, aux)\n  print('Move disk {0} from {1} to {2}'.format(n, source, dest))\n  hanoi(n-1, aux, source, dest)\n\n# Driver program\nn = 4\nhanoi(n, 'a', 'b', 'c')"
        },
        {
            "instruction": "Generate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.",
            "question": "user_input = input(\"User: \")\n\n___ == \"Hello\":\n print(\"Chatbot: Hi there!\")\nelse:\n print(\"Chatbot: I'm not sure what you mean, please try again.\")",
            "correct_answer": "user_input = input(\"User: \")\n\nif user_input == \"Hello\":\n print(\"Chatbot: Hi there!\")\nelse:\n print(\"Chatbot: I'm not sure what you mean, please try again.\")"
        },
        {
            "instruction": "You need to optimize a given Python code for improving speed.",
            "question": "def find_corresponding_nums(nums1, nums2):\n    result = []\n    seen = set(nums2) \n    ___ in nums1:\n        ___ in seen:\n            result.append(num1)\n    return result",
            "correct_answer": "def find_corresponding_nums(nums1, nums2):\n    result = []\n    seen = set(nums2) \n    for num1 in nums1:\n        if num1 in seen:\n            result.append(num1)\n    return result"
        },
        {
            "instruction": "Generate a batch of X random numbers in Python using a for loop.",
            "question": "import random\nnumbers = []\n\n___ in range(10):\n number = random.randint(1, 100)\n numbers.append(number)\n \nprint(numbers)",
            "correct_answer": "import random\nnumbers = []\n\nfor i in range(10):\n number = random.randint(1, 100)\n numbers.append(number)\n \nprint(numbers)"
        },
        {
            "instruction": "Optimize this Python code for speed.",
            "question": "lst = list(range(100))\n \n___ in lst:\n    print(i)",
            "correct_answer": "lst = list(range(100))\n \nfor i in lst:\n    print(i)"
        },
        {
            "instruction": "Write a Python program to optimize the given code for speed and reduce memory usage.",
            "question": "def func(a):\n    result = [x + 5 ___ in a]\n    return result",
            "correct_answer": "def func(a):\n    result = [x + 5 for x in a]\n    return result"
        },
        {
            "instruction": "Edit the following Python code to include a while loop:",
            "question": "a = 0\nb = 0\n\n___ < 10:\n    a += 1\n    b = b + a\n\nprint(b)",
            "correct_answer": "a = 0\nb = 0\n\nwhile a < 10:\n    a += 1\n    b = b + a\n\nprint(b)"
        },
        {
            "instruction": "Generate a function in Python that displays the Fibonacci sequence for a given value.",
            "question": "def fibonacci(n):\n a, b = 0, 1\n result = []\n \n ___ < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n))",
            "correct_answer": "def fibonacci(n):\n a, b = 0, 1\n result = []\n \n while a < n:\n result.append(a)\n a, b = b, a + b\n\n return result\n\nprint(fibonacci(n))"
        },
        {
            "instruction": "Write a function in Python that takes in two strings and returns true if both strings have the same letter counts.",
            "question": "def isPermutation(s1, s2):\n s1_dict = {}\n s2_dict = {}\n ___ in s1:\n  ___ in s1_dict:\n   s1_dict[c] += 1\n  else:\n   s1_dict[c] = 1\n ___ in s2:\n  ___ in s2_dict:\n   s2_dict[c] += 1\n  else:\n   s2_dict[c] = 1\n \n return s1_dict == s2_dict",
            "correct_answer": "def isPermutation(s1, s2):\n s1_dict = {}\n s2_dict = {}\n for c in s1:\n  if c in s1_dict:\n   s1_dict[c] += 1\n  else:\n   s1_dict[c] = 1\n for c in s2:\n  if c in s2_dict:\n   s2_dict[c] += 1\n  else:\n   s2_dict[c] = 1\n \n return s1_dict == s2_dict"
        },
        {
            "instruction": "Create a Python script to check if a given word or phrase is a palindrome.",
            "question": "def is_palindrome(word):\n    word_list = list(word)\n    ___ == word_list[::-1]:\n        return True\n    else:\n        return False\n\nresult = is_palindrome('madam')\nprint(result)",
            "correct_answer": "def is_palindrome(word):\n    word_list = list(word)\n    if word_list == word_list[::-1]:\n        return True\n    else:\n        return False\n\nresult = is_palindrome('madam')\nprint(result)"
        },
        {
            "instruction": "Implement an algorithm in Python to check for palindromes.",
            "question": "def isPalindrome(text):\n    n = len(text)\n    ___ in range(n // 2):\n        ___[i] != text[n - i - 1]:\n            return False\n    return True\n\nprint(isPalindrome('noon'))",
            "correct_answer": "def isPalindrome(text):\n    n = len(text)\n    for i in range(n // 2):\n        if text[i] != text[n - i - 1]:\n            return False\n    return True\n\nprint(isPalindrome('noon'))"
        },
        {
            "instruction": "Optimize a given code in Python for higher efficiency.",
            "question": "def power(base, exponent):\n    answer = 1\n    ___ > 0:\n        ___ & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer",
            "correct_answer": "def power(base, exponent):\n    answer = 1\n    while exponent > 0:\n        if exponent & 1:\n            answer *= base\n        base *= base\n        exponent >>= 1\n    return answer"
        },
        {
            "instruction": "Develop an algorithm in Python for generating the nth Fibonacci number.",
            "question": "def fibonacci(n):\n # base case\n ___ == 1:\n  return 0\n elif n == 2:\n  return 1\n # recursive case\n else:\n  return fibonacci(n-1) + fibonacci(n-2)\n\n# testing\nprint(fibonacci(5)) # Output: 3",
            "correct_answer": "def fibonacci(n):\n # base case\n if n == 1:\n  return 0\n elif n == 2:\n  return 1\n # recursive case\n else:\n  return fibonacci(n-1) + fibonacci(n-2)\n\n# testing\nprint(fibonacci(5)) # Output: 3"
        },
        {
            "instruction": "Generate a Python script for searching for a pattern in a given text.",
            "question": "import re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\n___:\n    print(\"Pattern found!\")",
            "correct_answer": "import re\ntext = \"The cat jumped over the fence\"\npattern = \"cat\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Pattern found!\")"
        },
        {
            "instruction": "Optimize the following Python code for calculating the Fibonacci numbers up to n.",
            "question": "def fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n ___ in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n ___ > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10))",
            "correct_answer": "def fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n if n in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n if n > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10))"
        },
        {
            "instruction": "A number is said to be abundant if its proper divisors sum to more than the number itself. Create a python program to identify if a given number is abundant or not.",
            "question": "def is_abundant(num):\n    divisor_sum = 0\n    ___ in range(1, int(num/2)+1):\n        ___ % i == 0:\n            divisor_sum += i\n\n    return divisor_sum > num\n\nnum = 21\n\n___(num):\n    print(f\"{num} is abundant\")\nelse:\n    print(f\"{num} is not abundant\")",
            "correct_answer": "def is_abundant(num):\n    divisor_sum = 0\n    for i in range(1, int(num/2)+1):\n        if num % i == 0:\n            divisor_sum += i\n\n    return divisor_sum > num\n\nnum = 21\n\nif is_abundant(num):\n    print(f\"{num} is abundant\")\nelse:\n    print(f\"{num} is not abundant\")"
        },
        {
            "instruction": "Create a python program for checking whether a number is a palindrome or not.",
            "question": "def is_palindrome(num):\n  rev = 0\n  tmp = num\n  \n  ___ > 0:\n    rev = rev * 10\n    rev = rev + (tmp % 10)\n    tmp = tmp // 10\n\n  return num == rev\n  \nnum = 12321\nif (is_palindrome(num)):\n  print(\"Number is a palindrome\")\nelse:\n  print(\"Number is not a palindrome\")",
            "correct_answer": "def is_palindrome(num):\n  rev = 0\n  tmp = num\n  \n  while tmp > 0:\n    rev = rev * 10\n    rev = rev + (tmp % 10)\n    tmp = tmp // 10\n\n  return num == rev\n  \nnum = 12321\nif (is_palindrome(num)):\n  print(\"Number is a palindrome\")\nelse:\n  print(\"Number is not a palindrome\")"
        },
        {
            "instruction": "Optimize the Python code snippet (below) for performance efficiency.",
            "question": "def process_data(data):\n    processed_data = []\n    ___ in data:\n        if (item % 10) == 0:\n            processed_data.append(item)\n    return processed_data\n\ndef process_data_fast(data):\n    return [item ___ in data ___ % 10 == 0]",
            "correct_answer": "def process_data(data):\n    processed_data = []\n    for item in data:\n        if (item % 10) == 0:\n            processed_data.append(item)\n    return processed_data\n\ndef process_data_fast(data):\n    return [item for item in data if item % 10 == 0]"
        },
        {
            "instruction": "Create a python program for searching for a word in a text document.",
            "question": "import re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\n___:\n    print('Found!');\nelse:\n    print('Not Found!')",
            "correct_answer": "import re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\nif result:\n    print('Found!');\nelse:\n    print('Not Found!')"
        },
        {
            "instruction": "Write a function in Python to check if an integer is prime or not.",
            "question": "def is_prime(number):\n  ___ < 2:\n    return False\n  else:\n    ___ in range(2, number):\n      ___ % x == 0:\n        return False\n    return True\n\nn = 37\nprint (is_prime(n)) # Output: True",
            "correct_answer": "def is_prime(number):\n  if number < 2:\n    return False\n  else:\n    for x in range(2, number):\n      if number % x == 0:\n        return False\n    return True\n\nn = 37\nprint (is_prime(n)) # Output: True"
        },
        {
            "instruction": "Create a Python program to calculate the grade for a student.",
            "question": "Maths = 85\nEnglish = 70\nScience = 90\n\n# Calculate the average \naverage = (Maths + English + Science) / 3\n\n# Check the grade\n___ >= 80:\n    grade = 'A'\nelif average >= 70:\n    grade = 'B'\nelif average >= 60:\n    grade = 'C'\nelif average >= 50:\n    grade = 'D'\nelse:\n    grade = 'F'\n\n# Print the grade\nprint(grade)",
            "correct_answer": "Maths = 85\nEnglish = 70\nScience = 90\n\n# Calculate the average \naverage = (Maths + English + Science) / 3\n\n# Check the grade\nif average >= 80:\n    grade = 'A'\nelif average >= 70:\n    grade = 'B'\nelif average >= 60:\n    grade = 'C'\nelif average >= 50:\n    grade = 'D'\nelse:\n    grade = 'F'\n\n# Print the grade\nprint(grade)"
        },
        {
            "instruction": "Create a Python program that prints out a message if a given number is divisible by 7.",
            "question": "num = 49\n\n___ % 7 == 0:\n    print(\"The number %d is divisible by 7!\" %num)",
            "correct_answer": "num = 49\n\nif num % 7 == 0:\n    print(\"The number %d is divisible by 7!\" %num)"
        },
        {
            "instruction": "Develop an algorithm using Python that determines if a number is a prime number or not.",
            "question": "def is_prime(n):\n    ___ <= 1: \n        return False\n    ___ in range(2, n): \n        ___ % i == 0: \n            return False\n    return True",
            "correct_answer": "def is_prime(n):\n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True"
        },
        {
            "instruction": "Optimize the following Python code for runtime and memory performance.",
            "question": "def factorial(n):\n    ___ == 0:\n        return 1\n\n    res = 1\n    ___ in range(2, n+1):\n        res *= i\n    return res",
            "correct_answer": "def factorial(n):\n    if n == 0:\n        return 1\n\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n    return res"
        },
        {
            "instruction": "Create a Python function to check if a given number is abundant or not. An abundant number is a number which is less than the sum of its proper divisors.",
            "question": "def is_abundant(number):\n    sum = 0\n    ___ in range(1, number):\n        ___ % i == 0:\n            sum += i\n    return sum > number",
            "correct_answer": "def is_abundant(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum > number"
        },
        {
            "instruction": "Create a program in Python for finding the greatest common divisor of two numbers.",
            "question": "def gcd(a, b):\n    ___ != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n\nprint(gcd(20,45))",
            "correct_answer": "def gcd(a, b):\n    while b != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n\nprint(gcd(20,45))"
        },
        {
            "instruction": "Write a FOR loop to create a Pascal Triangle of size N in Python.",
            "question": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    ___ in range(max(n,0)): \n        print(trow) \n        trow=[l+r ___,r in zip(trow+y, y+trow)] \n  \n# Driver program to test the above function \nn = 5\npascal_triangle(n)",
            "correct_answer": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n,0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow+y, y+trow)] \n  \n# Driver program to test the above function \nn = 5\npascal_triangle(n)"
        },
        {
            "instruction": "Design an algorithm in Python for linear search.",
            "question": "def linear_search(arr, target):    \n    ___ in range(len(arr)):\n        ___[i] == target:\n            return i\n    return -1",
            "correct_answer": "def linear_search(arr, target):    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"
        },
        {
            "instruction": "Write a Python program for a program that checks if two strings are palindromes.",
            "question": "def is_palindrome(str1, str2):\n # Reverse str1\n reverse_str1 = str1[::-1]\n\n # Check ___ is the same as the reversed version of str2\n ___ == str2:\n return True\n else:\n return False\n\n# Sample input\nstr1 = 'radar'\nstr2 = 'dad'\n\n# Check ___ strings are palindromes\nprint(is_palindrome(str1, str2)) # Output: True",
            "correct_answer": "def is_palindrome(str1, str2):\n # Reverse str1\n reverse_str1 = str1[::-1]\n\n # Check if str1 is the same as the reversed version of str2\n if reverse_str1 == str2:\n return True\n else:\n return False\n\n# Sample input\nstr1 = 'radar'\nstr2 = 'dad'\n\n# Check if the strings are palindromes\nprint(is_palindrome(str1, str2)) # Output: True"
        },
        {
            "instruction": "Create a regex pattern that matches two different words and prints out the second word if found.",
            "question": "pattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \n___: \n    print(match.group(2)) # Prints \"now\" or \"later\"",
            "correct_answer": "pattern = r\"learn (Python|Java) (\\w+)\" \nmatch = re.search(pattern, text) \nif match: \n    print(match.group(2)) # Prints \"now\" or \"later\""
        },
        {
            "instruction": "Create a function in Python to determine if a number is divisible by another number.",
            "question": "def isDivisible(num1, num2):\n    # check ___ is divisible by num2\n    if (num1 % num2) == 0:\n        return True\n    else:\n        return False\n\nnum1 = 6\nnum2 = 3\n\nresult = isDivisible(num1, num2)\nprint(result)",
            "correct_answer": "def isDivisible(num1, num2):\n    # check if num1 is divisible by num2\n    if (num1 % num2) == 0:\n        return True\n    else:\n        return False\n\nnum1 = 6\nnum2 = 3\n\nresult = isDivisible(num1, num2)\nprint(result)"
        },
        {
            "instruction": "Modify the following Python code for calculating the factorial of a number.",
            "question": "def factorial(n):\n    ___ == 0:\n        return 1\n    else:\n        fact = 1\n        ___ in range(1,n+1):\n            fact = fact*i\n        return fact",
            "correct_answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact*i\n        return fact"
        },
        {
            "instruction": "Optimize the following Python code for improved performance.",
            "question": "def factorial(n):\n fact = 1\n ___ in range(1, n+1):\n   fact *= i\n  return fact",
            "correct_answer": "def factorial(n):\n fact = 1\n for i in range(1, n+1):\n   fact *= i\n  return fact"
        },
        {
            "instruction": "Create a Python program for extracting text from an online book.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\n# Input web address of the book\nurl = 'https://www.example.com/book.html'\n\n# Download the page\npage = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the text\ntext = soup.find_all('p')\n___ in text:\n print(p.text)",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\n# Input web address of the book\nurl = 'https://www.example.com/book.html'\n\n# Download the page\npage = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the text\ntext = soup.find_all('p')\nfor p in text:\n print(p.text)"
        },
        {
            "instruction": "Design a python class for a shopping cart.",
            "question": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    \n    def add_item(self, item):\n        self.items.append(item)\n    \n    def remove_item(self, item):\n        ___ in self.items:\n            self.items.remove(item)\n    \n    def get_total_amount(self):\n        total_amount = 0\n        ___ in self.items:\n            total_amount += item.price\n        return total_amount",
            "correct_answer": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    \n    def add_item(self, item):\n        self.items.append(item)\n    \n    def remove_item(self, item):\n        if item in self.items:\n            self.items.remove(item)\n    \n    def get_total_amount(self):\n        total_amount = 0\n        for item in self.items:\n            total_amount += item.price\n        return total_amount"
        },
        {
            "instruction": "Construct a function in Python to compare the two given dictionaries and return true if both of them contains the same elements.",
            "question": "def compare_dicts(dict1, dict2):\n  # Iterate through keys in both dictionaries and compare values\n  ___, value in dict1.items():\n    ___ not in dict2 or dict2[key] != value:\n      return False\n \n  # If all elements matched\n  return True",
            "correct_answer": "def compare_dicts(dict1, dict2):\n  # Iterate through keys in both dictionaries and compare values\n  for key, value in dict1.items():\n    if key not in dict2 or dict2[key] != value:\n      return False\n \n  # If all elements matched\n  return True"
        },
        {
            "instruction": "Write a Python program to compare two dictionaries to check if they are equal.",
            "question": "def compare_dicts(dict1, dict2):\n    ___ == dict2:\n        return True\n    return False\n\nresult = compare_dicts(d1, d2)\nprint(result)",
            "correct_answer": "def compare_dicts(dict1, dict2):\n    if dict1 == dict2:\n        return True\n    return False\n\nresult = compare_dicts(d1, d2)\nprint(result)"
        },
        {
            "instruction": "Offer a suggestion for increasing the performance of the following Python Script",
            "question": "def function(arg):\n    ___ in arg:\n        print(i)",
            "correct_answer": "def function(arg):\n    for i in arg:\n        print(i)"
        },
        {
            "instruction": "You need to write a Python program for computing the factorial of a number.",
            "question": "def factorial(num):\n    ___ == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nprint(factorial(5))",
            "correct_answer": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nprint(factorial(5))"
        },
        {
            "instruction": "write a python program for its purpose",
            "question": "\"\"\"\nCompute the factorial of a given number\n\"\"\"\n\ndef factorial(n): \n\t___ == 1: \n\t\treturn 1\n\telse: \n\t\treturn n * factorial(n-1) \n\n___ == '__main__': \n\tnum = int(input()) \n\tprint(factorial(num))",
            "correct_answer": "\"\"\"\nCompute the factorial of a given number\n\"\"\"\n\ndef factorial(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn n * factorial(n-1) \n\nif __name__ == '__main__': \n\tnum = int(input()) \n\tprint(factorial(num))"
        },
        {
            "instruction": "Compare two strings to check if they are anagrams or not in Python.",
            "question": "def is_anagram(w1, w2):\n    # Check ___ are equal\n    ___(w1) == len(w2):\n        # Sort the strings\n        s1 = sorted(w1)\n        s2 = sorted(w2)\n        # Check ___ strings are equal\n        ___ == s2:\n            return True\n    return False\n\n# Example\nw1 = \"silent\"\nw2 = \"listen\"\n\nprint(is_anagram(w1, w2)) #Output: True",
            "correct_answer": "def is_anagram(w1, w2):\n    # Check if lengths are equal\n    if len(w1) == len(w2):\n        # Sort the strings\n        s1 = sorted(w1)\n        s2 = sorted(w2)\n        # Check if sorted strings are equal\n        if s1 == s2:\n            return True\n    return False\n\n# Example\nw1 = \"silent\"\nw2 = \"listen\"\n\nprint(is_anagram(w1, w2)) #Output: True"
        },
        {
            "instruction": "Code up a web scraper in Python for a particular website.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nall_divs = soup.find_all('div')\n\n___ in all_divs:\n    try:\n        print(div['class'])\n    except:\n        print(div.text)",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nall_divs = soup.find_all('div')\n\nfor div in all_divs:\n    try:\n        print(div['class'])\n    except:\n        print(div.text)"
        },
        {
            "instruction": "Develop a Python script for calculating the Fibonacci numbers for a given input.",
            "question": "def Fibonacci(n): \n    ___<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n  \nprint(Fibonacci(8))",
            "correct_answer": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n  \nprint(Fibonacci(8))"
        },
        {
            "instruction": "Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.",
            "question": "num = int(input(\"Enter a positive integer: \"))\n\n___ > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")",
            "correct_answer": "num = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")"
        },
        {
            "instruction": "Optimize this Python program for better efficiency.",
            "question": "def add_two_lists(l1, l2):\n    return [x + y ___, y in zip(l1, l2)]",
            "correct_answer": "def add_two_lists(l1, l2):\n    return [x + y for x, y in zip(l1, l2)]"
        },
        {
            "instruction": "Create a function in Python for evaluating a given polynomial expression.",
            "question": "def evaluate_polynomial(expression):\n  expression = expression.strip()\n  tokens  = expression.split(\"+\")\n  result = 0\n  ___ in tokens:\n    term = term.strip()\n    coefficient, exponent = term.split(\"x\")\n    result += float(coefficient) * float(expoent)\n\n  return result",
            "correct_answer": "def evaluate_polynomial(expression):\n  expression = expression.strip()\n  tokens  = expression.split(\"+\")\n  result = 0\n  for term in tokens:\n    term = term.strip()\n    coefficient, exponent = term.split(\"x\")\n    result += float(coefficient) * float(expoent)\n\n  return result"
        },
        {
            "instruction": "Find the number of ways to reach nth step in a staircase if a person can take 1 or 2 steps at a time in Python.",
            "question": "def stairs(n): \n    step = [0] * (n + 2) \n    step[1] = 1\n    step[2] = 2\n  \n    ___ in range(3, n + 2): \n        step[i] = step[i - 1] + step[i - 2] \n  \n    return step[n] \n      \nn = 6\nprint(stairs(n))",
            "correct_answer": "def stairs(n): \n    step = [0] * (n + 2) \n    step[1] = 1\n    step[2] = 2\n  \n    for i in range(3, n + 2): \n        step[i] = step[i - 1] + step[i - 2] \n  \n    return step[n] \n      \nn = 6\nprint(stairs(n))"
        },
        {
            "instruction": "Develop a Python Program to determine if two given strings are an anagram or not.",
            "question": "def is_anagram(string1, string2):\n    # check ___ have equal length \n    ___(string1) != len(string2): \n        return False \n    sorted1 = sorted(string1); \n    sorted2 = sorted(string2); \n    # check ___ strings are the same \n    ___ == sorted2:\n        return True \n    return False",
            "correct_answer": "def is_anagram(string1, string2):\n    # check if strings have equal length \n    if len(string1) != len(string2): \n        return False \n    sorted1 = sorted(string1); \n    sorted2 = sorted(string2); \n    # check if sorted strings are the same \n    if sorted1 == sorted2:\n        return True \n    return False"
        },
        {
            "instruction": "Write a Python program to compare two integers and prints if one is greater then another.",
            "question": "# compare two integers\nint1=1\nint2=2\n___ > int2:\n    print(\"int1 is greater than int2\")\nelif int2 > int1:\n    print(\"int2 is greater than int1\")\nelse:\n    print(\"int1 and int2 are equal\")",
            "correct_answer": "# compare two integers\nint1=1\nint2=2\nif int1 > int2:\n    print(\"int1 is greater than int2\")\nelif int2 > int1:\n    print(\"int2 is greater than int1\")\nelse:\n    print(\"int1 and int2 are equal\")"
        },
        {
            "instruction": "Create functions in Python for validating if a number is prime or not.",
            "question": "def is_prime(n):\n    ___ == 1:\n        return False\n    ___ in range(2,int(n**(1/2))+1):\n        ___%i == 0:\n            return False\n    return True\n\n___(12):\n    print(\"Prime\")\nelse:\n    print(\"Not Prime\")",
            "correct_answer": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2,int(n**(1/2))+1):\n        if n%i == 0:\n            return False\n    return True\n\nif is_prime(12):\n    print(\"Prime\")\nelse:\n    print(\"Not Prime\")"
        },
        {
            "instruction": "Create an algorithm in Python for the classification of numbers into even or odd.",
            "question": "def classifyNumber(num): \n    ___ % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" \n  \nprint(classifyNumber(3))",
            "correct_answer": "def classifyNumber(num): \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" \n  \nprint(classifyNumber(3))"
        },
        {
            "instruction": "Refactor the following code to use the most Pythonic approach:\n\n```\nfor i in range(0, list_items_len):\n    if list_items[i] == target_item:\n        index = i\n        break\n```",
            "question": "list_items = ['a', 'b', 'c', 'd', 'e']\ntarget_item = 'c'\n\nindex = list_items.index(target_item) ___ in list_items else None",
            "correct_answer": "list_items = ['a', 'b', 'c', 'd', 'e']\ntarget_item = 'c'\n\nindex = list_items.index(target_item) if target_item in list_items else None"
        },
        {
            "instruction": "Create a Python program to check if two strings are anagrams.",
            "question": "def is_anagram(s1, s2): \n    # Convert both strings to lower case \n    s1 = s1.lower() \n    s2 = s2.lower() \n\n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n\n    ___ == s2: \n        return True \n    else: \n        return False",
            "correct_answer": "def is_anagram(s1, s2): \n    # Convert both strings to lower case \n    s1 = s1.lower() \n    s2 = s2.lower() \n\n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n\n    if s1 == s2: \n        return True \n    else: \n        return False"
        },
        {
            "instruction": "Create a Python program to calculate the sum of the digits for a number that is provided as input.",
            "question": "# Function to find the sum of digits\ndef sum_digits(num):\n # Variable to store the sum of digits\n sum = 0\n \n ___ > 0:\n  digit = num % 10\n  sum = sum + digit\n  num = num // 10\n \n return sum\n \nnum = 1234\nsum = sum_digits(num)\nprint(\"Sum of digits of %d is %d\" % (num, sum))\n# Output: Sum of digits of 1234 is 10",
            "correct_answer": "# Function to find the sum of digits\ndef sum_digits(num):\n # Variable to store the sum of digits\n sum = 0\n \n while num > 0:\n  digit = num % 10\n  sum = sum + digit\n  num = num // 10\n \n return sum\n \nnum = 1234\nsum = sum_digits(num)\nprint(\"Sum of digits of %d is %d\" % (num, sum))\n# Output: Sum of digits of 1234 is 10"
        },
        {
            "instruction": "Write a Python program to calculate the sum of two given integers, if the two values are equal then return the triple of their sum.",
            "question": "def calculate_sum(a, b):\n    ___ == b:\n        return (a + b) * 3\n    else:\n        return a + b\n    \na = 2\nb = 2\nresult = calculate_sum(a, b)\nprint(result)",
            "correct_answer": "def calculate_sum(a, b):\n    if a == b:\n        return (a + b) * 3\n    else:\n        return a + b\n    \na = 2\nb = 2\nresult = calculate_sum(a, b)\nprint(result)"
        },
        {
            "instruction": "Generate a Python program which determines if a given number is divisible by 7",
            "question": "def is_divisible_by_7(num):\n    ___ % 7 == 0:\n        return True\n    else:\n        return False\n\nresult = is_divisible_by_7(28)\nprint(result)",
            "correct_answer": "def is_divisible_by_7(num):\n    if num % 7 == 0:\n        return True\n    else:\n        return False\n\nresult = is_divisible_by_7(28)\nprint(result)"
        },
        {
            "instruction": "Using a while loop, write a Python program to reverse a given sentence.",
            "question": "# Initialize an empty string \nrevString = \"\"\n\n# Set 'idx' to point to the end of the string \nidx = len(sent) - 1\n \n# Iterate in reverse through the string \n___ >= 0:\n    # Append each individual character to the result string\n    revString += sent[idx]\n    # Decrement the index\n    idx -= 1\n\n# Output the reversed result\nprint(revString)",
            "correct_answer": "# Initialize an empty string \nrevString = \"\"\n\n# Set 'idx' to point to the end of the string \nidx = len(sent) - 1\n \n# Iterate in reverse through the string \nwhile idx >= 0:\n    # Append each individual character to the result string\n    revString += sent[idx]\n    # Decrement the index\n    idx -= 1\n\n# Output the reversed result\nprint(revString)"
        },
        {
            "instruction": "Write a Python program to determine if a number provided by the user is prime or not.",
            "question": "# Ask the user ___ number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check ___\n___ in range(2, num):\n ___ % i == 0:\n is_prime = False\n break\n\n# Output result\n___:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')",
            "correct_answer": "# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')"
        },
        {
            "instruction": "Write a Python program to check if two strings are isomorphic.",
            "question": "def is_isomorphic(s1, s2):\n    ___(s1) != len(s2):\n        return False\n\n    s1_dict = dict()\n    ___, char in enumerate(s1):\n        ___ in s1_dict:\n            ___[char] != s2[i]:\n                return False\n        else:\n            s1_dict[char] = s2[i]\n\n    return True",
            "correct_answer": "def is_isomorphic(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    s1_dict = dict()\n    for i, char in enumerate(s1):\n        if char in s1_dict:\n            if s1_dict[char] != s2[i]:\n                return False\n        else:\n            s1_dict[char] = s2[i]\n\n    return True"
        },
        {
            "instruction": "Implement a python program to check if a number is powerful. A powerful number is one who has a power of 2 as any of its prime divisors.",
            "question": "def is_power(number):\n    flag = False\n    ___ > 2:\n        ___ in range(2, number // 2 + 1):\n            ___ % i == 0:\n                ___ % (i ** 2) == 0:\n                    flag = True\n                number = number / i\n    \n    return flag\n\nprint(is_power(18))",
            "correct_answer": "def is_power(number):\n    flag = False\n    if number > 2:\n        for i in range(2, number // 2 + 1):\n            while number % i == 0:\n                if number % (i ** 2) == 0:\n                    flag = True\n                number = number / i\n    \n    return flag\n\nprint(is_power(18))"
        },
        {
            "instruction": "Write a Python code for converting a given sentence into pig latin.",
            "question": "def convert_string_to_pig_latin(sentence):\n    words = sentence.split()\n    pig_latin_words = []\n    ___ in words:\n        ___[0] in 'aeiou':\n            pig_word = word + 'way'\n        else:\n            pig_word = word[1:] + word[0] + 'ay'\n        pig_latin_words.append(pig_word)\n    return ' '.join(pig_latin_words)",
            "correct_answer": "def convert_string_to_pig_latin(sentence):\n    words = sentence.split()\n    pig_latin_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            pig_word = word + 'way'\n        else:\n            pig_word = word[1:] + word[0] + 'ay'\n        pig_latin_words.append(pig_word)\n    return ' '.join(pig_latin_words)"
        },
        {
            "instruction": "Build a program in Python for finding the largest prime number in a given range.",
            "question": "def largest_prime(num):\n    largest_prime = 0\n    ___ in range (num):\n        if(isPrime(n)):\n            largest_prime = n\n    return largest_prime\n\ndef isPrime(n):\n    if(n == 1):\n        return False\n    elif(n == 2):\n        return True\n    else:\n        ___ in range(2,n//2+1):\n            if(n % x == 0):\n                return False\n        return True\n\nprint(largest_prime(100))",
            "correct_answer": "def largest_prime(num):\n    largest_prime = 0\n    for n in range (num):\n        if(isPrime(n)):\n            largest_prime = n\n    return largest_prime\n\ndef isPrime(n):\n    if(n == 1):\n        return False\n    elif(n == 2):\n        return True\n    else:\n        for x in range(2,n//2+1):\n            if(n % x == 0):\n                return False\n        return True\n\nprint(largest_prime(100))"
        },
        {
            "instruction": "Construct a Python program for finding the intersection of two arrays.",
            "question": "def intersection(arr1, arr2):\n  result = [i ___ in arr1 ___ in arr2]\n  return result\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nresult = intersection(arr1, arr2)\nprint(result)  # [3, 4]",
            "correct_answer": "def intersection(arr1, arr2):\n  result = [i for i in arr1 if i in arr2]\n  return result\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nresult = intersection(arr1, arr2)\nprint(result)  # [3, 4]"
        },
        {
            "instruction": "Develop an algorithm in Python for solving the Tower of Hanoi problem.",
            "question": "def hanoi(discs, source, aux, dest):\n    ___ == 1:\n        print (\"Move disc 1 from {} to {}\".format(source, dest))\n        return\n\n    hanoi(discs-1, source, dest, aux)\n    print (\"Move disc {} from {} to {}\".format(discs, source, dest))\n    hanoi(discs-1, aux, source, dest)\n\nhanoi(3,'A', 'B', 'C')",
            "correct_answer": "def hanoi(discs, source, aux, dest):\n    if discs == 1:\n        print (\"Move disc 1 from {} to {}\".format(source, dest))\n        return\n\n    hanoi(discs-1, source, dest, aux)\n    print (\"Move disc {} from {} to {}\".format(discs, source, dest))\n    hanoi(discs-1, aux, source, dest)\n\nhanoi(3,'A', 'B', 'C')"
        },
        {
            "instruction": "Create a python program to calculate Fibonacci sequence for a given number.",
            "question": "def fibonacci(n):\n    ___ == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n___ == '__main__':\n    n = 8\n    print(fibonacci(n))",
            "correct_answer": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    n = 8\n    print(fibonacci(n))"
        },
        {
            "instruction": "Optimize a given Python program for speed, memory usage and readability.",
            "question": "def factorial(n):\n    result = 1\n    ___ in range(2, n+1):\n        result *= i\n    return result",
            "correct_answer": "def factorial(n):\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result"
        },
        {
            "instruction": "Create a web crawler in Python which searches for all links on a given website and prints them out in the terminal.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML from the given URL\nresp = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Find all the links\n___ in soup.find_all('a'):\n    print(link.get('href'))",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML from the given URL\nresp = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Find all the links\nfor link in soup.find_all('a'):\n    print(link.get('href'))"
        },
        {
            "instruction": "Create a Python function for encrypting strings using a \u201cVigenere Cipher\u201d.",
            "question": "def encrypt_vigenere(plaintext, key):\n ciphertext = \"\"\n index = 0\n ___ in plaintext:\n     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)\n     index = (index + 1) % len(key)\n return ciphertext",
            "correct_answer": "def encrypt_vigenere(plaintext, key):\n ciphertext = \"\"\n index = 0\n for c in plaintext:\n     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)\n     index = (index + 1) % len(key)\n return ciphertext"
        },
        {
            "instruction": "Create a Python program to mark a character as asterisk (*) if it's the same as the previous one?",
            "question": "def mark_asterisk(input):\n    res = \"\"\n    temp = input[0]\n    ___ in input:\n        ___ == temp:\n            res += '*'\n        else:\n            res += char\n            temp = char\n    return res",
            "correct_answer": "def mark_asterisk(input):\n    res = \"\"\n    temp = input[0]\n    for char in input:\n        if char == temp:\n            res += '*'\n        else:\n            res += char\n            temp = char\n    return res"
        },
        {
            "instruction": "Generate a python program to determine if two objects are mutually exclusive or not.",
            "question": "def mutually_exclusive(object1, object2):\n    ___(object1.intersection(object2)) > 0:\n        return False\n    else:\n        return True\n    \nobject1 = set([1, 2, 3])\nobject2 = set([4, 5, 6])\n\nresult = mutually_exclusive(object1, object2)\nprint(result) # Outputs True as objects don't share elements.",
            "correct_answer": "def mutually_exclusive(object1, object2):\n    if len(object1.intersection(object2)) > 0:\n        return False\n    else:\n        return True\n    \nobject1 = set([1, 2, 3])\nobject2 = set([4, 5, 6])\n\nresult = mutually_exclusive(object1, object2)\nprint(result) # Outputs True as objects don't share elements."
        },
        {
            "instruction": "Design a Python function to check if two given strings are anagrams or not.",
            "question": "def check_anagram(str1, str2):\n \n    ___(str1) == sorted(str2):\n        return True\n    else:\n        return False",
            "correct_answer": "def check_anagram(str1, str2):\n \n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False"
        },
        {
            "instruction": "Create a web scraper in Python that searches a given website for a specified HTML element.",
            "question": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nhtml = response.content\n\nsoup = BeautifulSoup(html, 'html.parser')\n___ in soup.find_all('div'):\n print(div.text)",
            "correct_answer": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nhtml = response.content\n\nsoup = BeautifulSoup(html, 'html.parser')\nfor div in soup.find_all('div'):\n print(div.text)"
        },
        {
            "instruction": "Compose a function in Python to check if a given number is a power of two.",
            "question": "def is_power_two(num):\n    ___ == 0:\n        return False\n    \n    ___ != 1:\n        ___ % 2 != 0:\n            return False\n        num = num // 2\n    return True",
            "correct_answer": "def is_power_two(num):\n    if num == 0:\n        return False\n    \n    while num != 1:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n    return True"
        },
        {
            "instruction": "Write a Python function that will calculate the average temperature for the past week.",
            "question": "def calc_avg_temperature(temperatures):\n  total = 0\n  ___ in temperatures:\n    total += temp\n  avg = total / len(temperatures)\n  return avg\n\nprint(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))\n\n# Output: 71.17142857142857",
            "correct_answer": "def calc_avg_temperature(temperatures):\n  total = 0\n  for temp in temperatures:\n    total += temp\n  avg = total / len(temperatures)\n  return avg\n\nprint(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))\n\n# Output: 71.17142857142857"
        },
        {
            "instruction": "Create a Python script to detect if a number is prime.",
            "question": "def is_prime(n):\n    ___ <= 1:\n        return False\n    ___ in range(2, n):\n        ___ % i == 0:\n            return False\n    return True\n\n___ == \"__main__\":\n    n = 10\n    ___(n):\n        print(\"{} is a prime number\".format(n))\n    else:\n        print(\"{} is not a prime number\".format(n))",
            "correct_answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = 10\n    if is_prime(n):\n        print(\"{} is a prime number\".format(n))\n    else:\n        print(\"{} is not a prime number\".format(n))"
        },
        {
            "instruction": "Construct an algorithm for factoring a large number in Python.",
            "question": "def get_factor(n):\n    factors = []\n   \n    ___ in range(2, n + 1):\n        ___ % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\nnumber = 600851475143\nprint(get_factor(number))",
            "correct_answer": "def get_factor(n):\n    factors = []\n   \n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\nnumber = 600851475143\nprint(get_factor(number))"
        },
        {
            "instruction": "Create a Python script to clean the given text and make it ready for processing.",
            "question": "text_cleaned = \"This is the text ___!\nSome punctuation must be removed.\nLets Trim the whitespace too.\nPlease preserve the cases as is.\"",
            "correct_answer": "text_cleaned = \"This is the text for processing!\nSome punctuation must be removed.\nLets Trim the whitespace too.\nPlease preserve the cases as is.\""
        },
        {
            "instruction": "Modify the following Python code to raise an exception if the input value is not an integer",
            "question": "def square_root(x):\n    ___ isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5",
            "correct_answer": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5"
        },
        {
            "instruction": "Design an algorithm in Python for finding and printing all prime numbers between 1 and a given number.",
            "question": "def find_all_primes(n): \n  ___ in range(2,n + 1):\n    ___ in range(2,num):\n      if (num % i) == 0:\n        break \n    else:\n      print(num)\n\nfind_all_primes(100)",
            "correct_answer": "def find_all_primes(n): \n  for num in range(2,n + 1):\n    for i in range(2,num):\n      if (num % i) == 0:\n        break \n    else:\n      print(num)\n\nfind_all_primes(100)"
        }
    ]
}