Instruction,Input,Output,materi,question_id,Full Code,Template
Please generate a Python script that calculates the mean of a given array of numbers.,"[4, 9, 3, 5]","def calculateMean(array):
    # sum up all elements in the array
    mean = 0
    for i in range(len(array)):
        mean += array[i]
    # calculate the mean by dividing the sum by number of elements
    mean /= len(array)
    return mean

array = [4, 9, 3, 5]
mean = calculateMean(array)
print(mean)",Data Structure,8,"def calculateMean(array):
    # sum up all elements in the array
    mean = 0
    for i in range(len(array)):
        mean += array[i]
    # calculate the mean by dividing the sum by number of elements
    mean /= len(array)
    return mean

array = [4, 9, 3, 5]
mean = calculateMean(array)
print(mean)","    ___
    ___
    mean = 0
    ___
    ___
    # calculate the mean by dividing the sum by number of elements
    ___
    return mean

    ___
    ___
print(mean)"
Create an algorithm in Python to find the first index of an item in an array.,"arr = [1,3,7,9,0,4]
num = 7","def findIndex(arr, num):
    for index in range(len(arr)):
        if arr[index] == num:
            return index
    return -1

arr = [1,3,7,9,0,4]
num = 7
index = findIndex(arr, num)
print('Index of %d is %d' % (num, index)) # Index of 7 is 2",Data Structure,13,"def findIndex(arr, num):
    for index in range(len(arr)):
        if arr[index] == num:
            return index
    return -1

arr = [1,3,7,9,0,4]
num = 7
index = findIndex(arr, num)
print('Index of %d is %d' % (num, index)) # Index of 7 is 2","def findIndex(arr, num):
    ___
    ___
    ___
    return -1

arr = [1,3,7,9,0,4]
num = 7
    ___
    ___"
Suggest a way to randomize the order of the following list using Python.,"array = [1, 2, 3, 4, 5, 6]","import random
array = [1, 2, 3, 4, 5, 6]
random.shuffle(array)  # shuffle list in-place using a random permutation",Data Structure,15,"import random
array = [1, 2, 3, 4, 5, 6]
random.shuffle(array)  # shuffle list in-place using a random permutation","import random
    ___
    ___"
Write a Python program to remove an item from a list whose index is specified.,"list = ['Apple', 'Orange', 'Banana', 'Mango']","def removeSpecifiedIndex(list, index): 
  # using list comprehension 
  new_list = [list[i] for i in range(len(list)) if i != index]  

  return new_list 

list = ['Apple', 'Orange', 'Banana', 'Mango']  
index = 2

print(removeSpecifiedIndex(list, index))",Data Structure,19,"def removeSpecifiedIndex(list, index): 
  # using list comprehension 
  new_list = [list[i] for i in range(len(list)) if i != index]  

  return new_list 

list = ['Apple', 'Orange', 'Banana', 'Mango']  
index = 2

print(removeSpecifiedIndex(list, index))","    ___
  # using list comprehension 
    ___

  return new_list 

list = ['Apple', 'Orange', 'Banana', 'Mango']  
    ___

    ___"
Write a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array.,"arr = [1, 6, 8, 4, 9, 6, 10]
n = len(arr)","def findMax(arr, n):
 # Initializing max with first element of array
 max = arr[0]

 # Starting loop from second element
 for i in range(1, n):
 # Comparing max with remaining elements of array
 if arr[i] > max:
 max = arr[i]

 # Returning maximum
 return max",Data Structure,28,"def findMax(arr, n):
 # Initializing max with first element of array
 max = arr[0]

 # Starting loop from second element
 for i in range(1, n):
 # Comparing max with remaining elements of array
 if arr[i] > max:
 max = arr[i]

 # Returning maximum
 return max","def findMax(arr, n):
    ___
 max = arr[0]

 # Starting loop from second element
 for i in range(1, n):
    ___
 if arr[i] > max:
 max = arr[i]

 # Returning maximum
 return max"
Create a program in Python to sort a given unsorted list.,"[5, 4, 1, 8, 9, 2]","def sortList(lst): 
    lst.sort() 
    return lst
  
ar_list = [5, 4, 1, 8, 9, 2]
result = sortList(ar_list) 
  
print(result)",Data Structure,48,"def sortList(lst): 
    lst.sort() 
    return lst
  
ar_list = [5, 4, 1, 8, 9, 2]
result = sortList(ar_list) 
  
print(result)","def sortList(lst): 
    ___
    return lst
  
ar_list = [5, 4, 1, 8, 9, 2]
result = sortList(ar_list) 
  
print(result)"
Design a sorting algorithm in Python that will sort a given array of numbers in ascending order.,"[5, 9, 4, 2, 6]","def sort(nums):
    for i in range(len(nums)):
        min_ind = i
        for j in range(i+1, len(nums)):
            if nums[j] < nums[min_ind]:
                min_ind = j
        nums[i], nums[min_ind] = nums[min_ind], nums[i]
    return nums",Data Structure,53,"def sort(nums):
    for i in range(len(nums)):
        min_ind = i
        for j in range(i+1, len(nums)):
            if nums[j] < nums[min_ind]:
                min_ind = j
        nums[i], nums[min_ind] = nums[min_ind], nums[i]
    return nums","    ___
    for i in range(len(nums)):
        min_ind = i
        for j in range(i+1, len(nums)):
            if nums[j] < nums[min_ind]:
                min_ind = j
        nums[i], nums[min_ind] = nums[min_ind], nums[i]
    return nums"
Write a Python program to implement Linear Search for an array of numbers,"arr = [2, 3, 5, 7, 11]
n = 11","def LinearSearch(arr, n):
 for i in range(len(arr)):
 if arr[i] == n:
 return i
 return -1

index = LinearSearch(arr, n)
print(index)",Data Structure,68,"def LinearSearch(arr, n):
 for i in range(len(arr)):
 if arr[i] == n:
 return i
 return -1

index = LinearSearch(arr, n)
print(index)","def LinearSearch(arr, n):
 for i in range(len(arr)):
 if arr[i] == n:
 return i
 return -1

    ___
    ___"
Implement a search algorithm in Python to look for the value in the list.,"list_tmp = [1, 23, 42, 5, 7, 34, 89]
value = 42","def search(list_tmp, value): 
    for index, item in enumerate(list_tmp): 
        if item == value: 
            return index 

    return -1",Data Structure,75,"def search(list_tmp, value): 
    for index, item in enumerate(list_tmp): 
        if item == value: 
            return index 

    return -1","    ___
    ___
        if item == value: 
    ___

    return -1"
"Given a list of numbers, write a Python program to calculate the median.","[3, 4, 5, 9, 12, 15]","def median(nums):
    nums.sort()
    n = len(nums)
    if n % 2 == 0:
        return (nums[n//2] + nums[(n//2) - 1]) / 2
    return nums[n//2]

nums = [3, 4, 5, 9, 12, 15]
print(median(nums))",Data Structure,102,"def median(nums):
    nums.sort()
    n = len(nums)
    if n % 2 == 0:
        return (nums[n//2] + nums[(n//2) - 1]) / 2
    return nums[n//2]

nums = [3, 4, 5, 9, 12, 15]
print(median(nums))","def median(nums):
    ___
    n = len(nums)
    if n % 2 == 0:
        return (nums[n//2] + nums[(n//2) - 1]) / 2
    return nums[n//2]

nums = [3, 4, 5, 9, 12, 15]
print(median(nums))"
Write a Python program for computing the sum of a given array of integers.,"[1, 2, 3, 4, 5]","def compute_sum(int_arry):
    sum = 0
    # loop through each element in the array
    for i in int_arry:
        sum += i
    return sum

# example testing code
int_arry = [1, 2, 3, 4, 5]
total_sum = compute_sum(int_arry)

print(""Sum of array elements is"", total_sum)",Data Structure,111,"def compute_sum(int_arry):
    sum = 0
    # loop through each element in the array
    for i in int_arry:
        sum += i
    return sum

# example testing code
int_arry = [1, 2, 3, 4, 5]
total_sum = compute_sum(int_arry)

print(""Sum of array elements is"", total_sum)","def compute_sum(int_arry):
    sum = 0
    ___
    for i in int_arry:
        sum += i
    return sum

# example testing code
int_arry = [1, 2, 3, 4, 5]
total_sum = compute_sum(int_arry)

    ___"
"In Python, write a script to sort the list items in descending order.","list_items = [3, 7, 5, 8, 10]","list_items = [3, 7, 5, 8, 10]

list_items.sort(reverse=True)

print(list_items) # Output: [10, 8, 7, 5, 3]",Data Structure,116,"list_items = [3, 7, 5, 8, 10]

list_items.sort(reverse=True)

print(list_items) # Output: [10, 8, 7, 5, 3]","list_items = [3, 7, 5, 8, 10]

    ___

print(list_items) # Output: [10, 8, 7, 5, 3]"
"Create a Python script that takes a sentence as an input, separates all the words into a list and prints them in alphabetical order.",This is an example sentence,"input_sentence = ""This is an example sentence""
words = input_sentence.split()
words.sort()

print(words) # ['an', 'example', 'is', 'sentence', 'This']",Data Structure,121,"input_sentence = ""This is an example sentence""
words = input_sentence.split()
words.sort()

print(words) # ['an', 'example', 'is', 'sentence', 'This']","input_sentence = ""This is an example sentence""
words = input_sentence.split()
    ___

print(words) # ['an', 'example', 'is', 'sentence', 'This']"
"Generate a function in Python which takes an array as an argument and returns an array of length two, with the first element being the maximum value and the second element being the minimum value of the array.","[1, 5, 7, 3, 9]","def minmax(array):
  max_val = max(array)
  min_val = min(array)
  return [max_val, min_val]",Data Structure,122,"def minmax(array):
  max_val = max(array)
  min_val = min(array)
  return [max_val, min_val]","    ___
    ___
    ___
  return [max_val, min_val]"
Design a Python program to implement a search engine that searches for a specific keyword in a given set of text documents.,"[text documents, keyword]","def search_engine(documents, keyword):
    # Create an index of the documents
    index = create_index(documents)
    # Search the index for the keyword
    search_result = search(index, keyword)
    # Return the search result
    return search_result",Data Structure,198,"def search_engine(documents, keyword):
    # Create an index of the documents
    index = create_index(documents)
    # Search the index for the keyword
    search_result = search(index, keyword)
    # Return the search result
    return search_result","def search_engine(documents, keyword):
    ___
    ___
    ___
    ___
    ___
    return search_result"
Develop an efficient sorting technique in Python to arrange the following list of strings.,"L1= [""This"", ""is"", ""a"", ""list"", ""of"", ""strings""]","def sort_list(L1):
    L1.sort()
    return L1",Data Structure,233,"def sort_list(L1):
    L1.sort()
    return L1","def sort_list(L1):
    ___
    return L1"
Create a python script to visualize the distribution of values in a numpy array,"numpy array [1, 2, 3, 4, 5, 6]","import matplotlib.pyplot as plt
import numpy as np
 
arr = np.array([1,2,3,4,5,6])
 
plt.hist(arr)
plt.title(""Distribution of values in the given array"")
plt.show()",Data Structure,247,"import matplotlib.pyplot as plt
import numpy as np
 
arr = np.array([1,2,3,4,5,6])
 
plt.hist(arr)
plt.title(""Distribution of values in the given array"")
plt.show()","import matplotlib.pyplot as plt
import numpy as np
 
    ___
 
plt.hist(arr)
    ___
plt.show()"
Coding a classifier in Python to classify a given data set into four categories,Data set of 20 records with 4 numerical features,"import numpy as np
from sklearn.svm import SVC

# X represents the 20 records with 4 numerical features
X = np.array([[], [], [], ..., []])
# y represents the 4 categories 
y = np.array([1, 2, 3, 4])

# Create a svm classifier with linear kernel
classifier = SVC(kernel='linear', random_state=0)

# Fit the data
classifier.fit(X, y)",Data Structure,261,"import numpy as np
from sklearn.svm import SVC

# X represents the 20 records with 4 numerical features
X = np.array([[], [], [], ..., []])
# y represents the 4 categories 
y = np.array([1, 2, 3, 4])

# Create a svm classifier with linear kernel
classifier = SVC(kernel='linear', random_state=0)

# Fit the data
classifier.fit(X, y)","import numpy as np
from sklearn.svm import SVC

# X represents the 20 records with 4 numerical features
    ___
# y represents the 4 categories 
    ___

# Create a svm classifier with linear kernel
classifier = SVC(kernel='linear', random_state=0)

# Fit the data
classifier.fit(X, y)"
Design a function in Python to sort the given list of numbers in descending order.,"The given list of numbers is: [2, 4, 1, 6, 9, 8]","def descendingSort(nums):
    # sort list in reverse order
    nums.sort(reverse=True)
    return nums

print(descendingSort([2, 4, 1, 6, 9, 8]))",Data Structure,291,"def descendingSort(nums):
    # sort list in reverse order
    nums.sort(reverse=True)
    return nums

print(descendingSort([2, 4, 1, 6, 9, 8]))","def descendingSort(nums):
    ___
    ___
    return nums

print(descendingSort([2, 4, 1, 6, 9, 8]))"
Generate a program in Python to find the median of a list of numbers.,"[5, 8, 2, 7, 4]","def median(nums):
    nums.sort()
    length = len(nums)
 
    if length % 2 == 0:
        return (nums[length//2] + nums[(length//2)-1])/2.0
    else:
        return nums[length//2] 

list = [5, 8, 2, 7, 4]
med = median(list)
print('The median of the list is ' + str(med))",Data Structure,323,"def median(nums):
    nums.sort()
    length = len(nums)
 
    if length % 2 == 0:
        return (nums[length//2] + nums[(length//2)-1])/2.0
    else:
        return nums[length//2] 

list = [5, 8, 2, 7, 4]
med = median(list)
print('The median of the list is ' + str(med))","def median(nums):
    ___
    length = len(nums)
 
    if length % 2 == 0:
        return (nums[length//2] + nums[(length//2)-1])/2.0
    else:
        return nums[length//2] 

list = [5, 8, 2, 7, 4]
med = median(list)
print('The median of the list is ' + str(med))"
"Create a program in Python that given a list of integer inputs, sorts them in descending order.","list = [4, 9, 2, 6, 5]","list = [4, 9, 2, 6, 5]

# sort list in descending order
list.sort(reverse=True)

print(list) # [9, 6, 5, 4, 2]",Data Structure,346,"list = [4, 9, 2, 6, 5]

# sort list in descending order
list.sort(reverse=True)

print(list) # [9, 6, 5, 4, 2]","list = [4, 9, 2, 6, 5]

    ___
    ___

print(list) # [9, 6, 5, 4, 2]"
Build a Python script for searching a given element in an array.,"[3, 10, 7, 12], element to search: 7","def searchElement(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1

arr = [3, 10, 7, 12] 
x = 7
index = searchElement(arr, x) 
if index != -1: 
    print(""Element"", x, ""found at index"", index )
else: 
    print(""Element not found"")",Data Structure,347,"def searchElement(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1

arr = [3, 10, 7, 12] 
x = 7
index = searchElement(arr, x) 
if index != -1: 
    print(""Element"", x, ""found at index"", index )
else: 
    print(""Element not found"")","def searchElement(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1

arr = [3, 10, 7, 12] 
x = 7
    ___
    ___
    ___
else: 
    print(""Element not found"")"
Create a program in Python to sort a list of tuples (words and their frequency) in descending order.,"[(""hello"", 10), (""world"", 15), (""foo"", 8)]","def sortTuples(tuples):
    tuples.sort(key=lambda x: x[1],reverse=True)
    return tuples",Data Structure,356,"def sortTuples(tuples):
    tuples.sort(key=lambda x: x[1],reverse=True)
    return tuples","def sortTuples(tuples):
    ___
    return tuples"
"Write a python script to calculate the sum of an array of integers, ignoring any negative numbers.","array = [-4, 1, 6, 2, -9, 5]","def sum_without_negatives(arr):
    total = 0
    for n in arr:
        if n >= 0:
            total += n
    return total

array = [-4, 1, 6, 2, -9, 5]
print(sum_without_negatives(array))",Data Structure,369,"def sum_without_negatives(arr):
    total = 0
    for n in arr:
        if n >= 0:
            total += n
    return total

array = [-4, 1, 6, 2, -9, 5]
print(sum_without_negatives(array))","def sum_without_negatives(arr):
    total = 0
    for n in arr:
        if n >= 0:
            total += n
    return total

    ___
    ___"
Create a function to perform list sorting using Python.,"list = [4, 5, 2, 1, 3]","def sortList(list):
    list.sort()
    return list

sortedList = sortList([4, 5, 2, 1, 3])
print(sortedList)",Data Structure,386,"def sortList(list):
    list.sort()
    return list

sortedList = sortList([4, 5, 2, 1, 3])
print(sortedList)","def sortList(list):
    ___
    return list

sortedList = sortList([4, 5, 2, 1, 3])
print(sortedList)"
Create a program in Python to sort a given list of words alphabetically,"words=[“Computer”, “Science”, “Engineering”, “Technology”]","def sort_words(words):
    words.sort()
    return words

words = [""Computer"", ""Science"", ""Engineering"", ""Technology""]
sorted_words = sort_words(words)
print(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']",Data Structure,423,"def sort_words(words):
    words.sort()
    return words

words = [""Computer"", ""Science"", ""Engineering"", ""Technology""]
sorted_words = sort_words(words)
print(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']","def sort_words(words):
    ___
    return words

words = [""Computer"", ""Science"", ""Engineering"", ""Technology""]
sorted_words = sort_words(words)
print(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']"
"Generate a Python script that takes in a list of numbers, rearranges them in ascending order, and prints out the result.","[3, 2, 5, 7, 1, 4]","def sort_list(nums): 
    # Sort list in ascending order
    nums.sort()
    
    # Print out the sorted list
    for num in nums: 
        print(num) 
  
# Test the function
nums = [3, 2, 5, 7, 1, 4]
sort_list(nums)",Data Structure,435,"def sort_list(nums): 
    # Sort list in ascending order
    nums.sort()
    
    # Print out the sorted list
    for num in nums: 
        print(num) 
  
# Test the function
nums = [3, 2, 5, 7, 1, 4]
sort_list(nums)","def sort_list(nums): 
    # Sort list in ascending order
    ___
    
    # Print out the sorted list
    for num in nums: 
        print(num) 
  
# Test the function
nums = [3, 2, 5, 7, 1, 4]
sort_list(nums)"
"Using the NumPy library in Python, calculate the mean of the following array.","array = [2, 4, 7, 8, 9]","import numpy as np

arr = np.array([2, 4, 7, 8, 9])

mean = np.mean(arr)

print(mean) # 6.2",Data Structure,452,"import numpy as np

arr = np.array([2, 4, 7, 8, 9])

mean = np.mean(arr)

print(mean) # 6.2","import numpy as np

    ___

mean = np.mean(arr)

print(mean) # 6.2"
Can you write a Python script to sort a list of strings alphabetically?,"[""Hello"", ""Yes"", ""No"", ""World""]","strings = [""Hello"", ""Yes"", ""No"", ""World""]

strings.sort()

print(strings)",Data Structure,455,"strings = [""Hello"", ""Yes"", ""No"", ""World""]

strings.sort()

print(strings)","strings = [""Hello"", ""Yes"", ""No"", ""World""]

    ___

print(strings)"
Develop a python program that sorts a given list of words in lexicographic order.,"[apple, bike, dog, cat]","# Sort a list of words in lexicographic order
words = [""apple"", ""bike"", ""dog"", ""cat""]

# Sort the list
words.sort()

# Print the list
print(words)

# Output:
# ['apple', 'bike', 'cat', 'dog']",Data Structure,505,"# Sort a list of words in lexicographic order
words = [""apple"", ""bike"", ""dog"", ""cat""]

# Sort the list
words.sort()

# Print the list
print(words)

# Output:
# ['apple', 'bike', 'cat', 'dog']","# Sort a list of words in lexicographic order
words = [""apple"", ""bike"", ""dog"", ""cat""]

# Sort the list
    ___

# Print the list
print(words)

# Output:
# ['apple', 'bike', 'cat', 'dog']"
Create an Python program that computes the median value of an array of numbers.,"arr = [1, 5, 2, 4, 3, 6]","def median(arr):
    arr.sort()
    if len(arr) % 2 != 0:
        return arr[int(len(arr)/2)]
    else:
        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2)-1]) / 2

medianValue = median(arr)
print(medianValue)",Data Structure,515,"def median(arr):
    arr.sort()
    if len(arr) % 2 != 0:
        return arr[int(len(arr)/2)]
    else:
        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2)-1]) / 2

medianValue = median(arr)
print(medianValue)","def median(arr):
    ___
    if len(arr) % 2 != 0:
        return arr[int(len(arr)/2)]
    else:
        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2)-1]) / 2

medianValue = median(arr)
print(medianValue)"
Develop a Python function that can detect loops in a given linked list.,Linked List: head -> 1 -> 2 -> 3 -> 4 -> 5,"def detectLoop(head):
    slow_p = head 
    fast_p = head 
    while(slow_p and fast_p and fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p:
            return True
    return False",Data Structure,523,"def detectLoop(head):
    slow_p = head 
    fast_p = head 
    while(slow_p and fast_p and fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p:
            return True
    return False","    ___
    ___
    ___
    while(slow_p and fast_p and fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p:
            return True
    return False"
Develop a Python program that takes a list of numbers as an input and outputs the numbers in the list sorted in ascending order.,"[5, 3, 7, 2, 4, 9, 1]","def sortAscending(list): 
    list.sort() 
    return list
  
# Driver Code 
list = [5, 3, 7, 2, 4, 9, 1]  
print(sortAscending(list)) 

# Output: [1, 2, 3, 4, 5, 7, 9]",Data Structure,544,"def sortAscending(list): 
    list.sort() 
    return list
  
# Driver Code 
list = [5, 3, 7, 2, 4, 9, 1]  
print(sortAscending(list)) 

# Output: [1, 2, 3, 4, 5, 7, 9]","def sortAscending(list): 
    ___
    return list
  
# Driver Code 
list = [5, 3, 7, 2, 4, 9, 1]  
print(sortAscending(list)) 

# Output: [1, 2, 3, 4, 5, 7, 9]"
Create a machine learning model in Python that can classify a set of samples into two classes.,"Sample1: 0.8, 0.1, 0.3
Sample2: 1.0, 0.4, 0.7
Sample3: 0.4, 0.5, 0.9
Sample4: 0.2, 0.7, 0.8","import numpy as np
from sklearn.svm import SVC

X = np.array([[0.8, 0.1, 0.3],
            [1.0, 0.4, 0.7],
            [0.4, 0.5, 0.9],
            [0.2, 0.7, 0.8]])

y = np.array([0, 1, 0, 1])

model = SVC()
model.fit(X, y)",Data Structure,548,"import numpy as np
from sklearn.svm import SVC

X = np.array([[0.8, 0.1, 0.3],
            [1.0, 0.4, 0.7],
            [0.4, 0.5, 0.9],
            [0.2, 0.7, 0.8]])

y = np.array([0, 1, 0, 1])

model = SVC()
model.fit(X, y)","import numpy as np
from sklearn.svm import SVC

    ___
            [1.0, 0.4, 0.7],
            [0.4, 0.5, 0.9],
            [0.2, 0.7, 0.8]])

    ___

model = SVC()
model.fit(X, y)"
Generate a code in Python that sorts the given list of numbers,"lst = [3, 4, 15, 1, 0]","def sort_list(lst): 
    lst.sort() 
    return lst 
  
# Driver code 
lst = [3, 4, 15, 1, 0] 
sorted_list = sort_list(lst) 
  
print(""Sorted list:"", sorted_list)",Data Structure,564,"def sort_list(lst): 
    lst.sort() 
    return lst 
  
# Driver code 
lst = [3, 4, 15, 1, 0] 
sorted_list = sort_list(lst) 
  
print(""Sorted list:"", sorted_list)","def sort_list(lst): 
    ___
    return lst 
  
# Driver code 
lst = [3, 4, 15, 1, 0] 
sorted_list = sort_list(lst) 
  
print(""Sorted list:"", sorted_list)"
Create an algorithm in Python to sort an array of integers.,"The array to be sorted: [2, 1, 6, 5, 8]","def quicksort(array):
  if len(array) <= 1:
    return array
  
  pivot = array[len(array) // 2]
  left = [x for x in array if x < pivot]
  middle = [x for x in array if x == pivot]
  right = [x for x in array if x > pivot]
  return quicksort(left) + middle + quicksort(right)

# test
array = [2, 1, 6, 5, 8]
print(quicksort(array))",Data Structure,607,"def quicksort(array):
  if len(array) <= 1:
    return array
  
  pivot = array[len(array) // 2]
  left = [x for x in array if x < pivot]
  middle = [x for x in array if x == pivot]
  right = [x for x in array if x > pivot]
  return quicksort(left) + middle + quicksort(right)

# test
array = [2, 1, 6, 5, 8]
print(quicksort(array))","    ___
    ___
    ___
  
    ___
    ___
    ___
    ___
  return quicksort(left) + middle + quicksort(right)

# test
    ___
    ___"
Create a Python program to read a list of strings and display the same strings in a reverse order.,"[""Apple"", ""Banana"", ""Mango"", ""Orange""]","def reverse_strings(string_list):
 reversed_string_list = []
 for string in string_list:
 reversed_string_list.insert(0, string)
 return reversed_string_list

string_list = [""Apple"", ""Banana"", ""Mango"", ""Orange""]
print(reverse_strings(string_list))",Data Structure,661,"def reverse_strings(string_list):
 reversed_string_list = []
 for string in string_list:
 reversed_string_list.insert(0, string)
 return reversed_string_list

string_list = [""Apple"", ""Banana"", ""Mango"", ""Orange""]
print(reverse_strings(string_list))","def reverse_strings(string_list):
 reversed_string_list = []
 for string in string_list:
    ___
 return reversed_string_list

string_list = [""Apple"", ""Banana"", ""Mango"", ""Orange""]
print(reverse_strings(string_list))"
Write a Python function to sort a list of tuples according to the second element of each tuple.,"[(4, 3), (2, 5), (0, 1)]","def sort_by_tuple_second(tuple_list):
    tuple_list.sort(key=lambda x: x[1])
    return tuple_list",Data Structure,676,"def sort_by_tuple_second(tuple_list):
    tuple_list.sort(key=lambda x: x[1])
    return tuple_list","def sort_by_tuple_second(tuple_list):
    ___
    return tuple_list"
Implement a search algorithm in Python that takes a list and a query as input and returns all matching elements.,"list = [1, 2, 3, 4, 5, 6]
query = 4","def search(list, query): 
    results = []
    for item in list:
        if item == query: 
            results.append(item) 
    return results

list = [1, 2, 3, 4, 5, 6]
query = 4

result = search(list, query)
print(result)",Data Structure,715,"def search(list, query): 
    results = []
    for item in list:
        if item == query: 
            results.append(item) 
    return results

list = [1, 2, 3, 4, 5, 6]
query = 4

result = search(list, query)
print(result)","    ___
    results = []
    for item in list:
        if item == query: 
            results.append(item) 
    return results

list = [1, 2, 3, 4, 5, 6]
query = 4

    ___
print(result)"
Create a Python script to sort the numbers in an array.,"[2, 4, 5, 1, 3]","def sort_array(array):
    array.sort()
    return array

result = sort_array([2, 4, 5, 1, 3])
print(result)",Data Structure,733,"def sort_array(array):
    array.sort()
    return array

result = sort_array([2, 4, 5, 1, 3])
print(result)","    ___
    ___
    ___

result = sort_array([2, 4, 5, 1, 3])
print(result)"
Write a python script that sorts a list of strings by length.,"['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']","def sort_strings_by_length(strings):
    # Sort strings by length in ascending order
    strings.sort(key=len)
    return strings",Data Structure,735,"def sort_strings_by_length(strings):
    # Sort strings by length in ascending order
    strings.sort(key=len)
    return strings","def sort_strings_by_length(strings):
    # Sort strings by length in ascending order
    ___
    return strings"
Optimize the following Python code for calculating the sum of an array.,"arr = [1, 2, 3, 4, 5, 6]
total = 0
for el in arr:
 total += el","arr = [1, 2, 3, 4, 5, 6]
total = sum(arr) # use sum() to sum up all elements of the array in one line",Data Structure,743,"arr = [1, 2, 3, 4, 5, 6]
total = sum(arr) # use sum() to sum up all elements of the array in one line","arr = [1, 2, 3, 4, 5, 6]
    ___"
Modify this Python code to insert the number 5 into a list at the 5th position.,"data = [1, 2, 3, 4]","data = [1, 2, 3, 4] 

# insert element '5' at 5th position 
data.insert(4, 5) 
print(""Modified list:"") 
print(data)",Data Structure,774,"data = [1, 2, 3, 4] 

# insert element '5' at 5th position 
data.insert(4, 5) 
print(""Modified list:"") 
print(data)","data = [1, 2, 3, 4] 

    ___
    ___
print(""Modified list:"") 
print(data)"
Implement a program in Python to find the average of an array of length n.,"Input: [2, 4, 6, 8, 10]","def findAverage(arr):
    # Initialize sum
    sum = 0
 
    # Iterate over the array to calculate sum
    for n in arr:
        sum += n
 
    # Calculate the average and return  
    return sum/len(arr)


# Driver code
arr = [2, 4, 6, 8, 10]
print(findAverage(arr))",Data Structure,792,"def findAverage(arr):
    # Initialize sum
    sum = 0
 
    # Iterate over the array to calculate sum
    for n in arr:
        sum += n
 
    # Calculate the average and return  
    return sum/len(arr)


# Driver code
arr = [2, 4, 6, 8, 10]
print(findAverage(arr))","def findAverage(arr):
    # Initialize sum
    sum = 0
 
    ___
    for n in arr:
        sum += n
 
    # Calculate the average and return  
    return sum/len(arr)


# Driver code
arr = [2, 4, 6, 8, 10]
print(findAverage(arr))"
Write a Python script that sorts an array of strings in alphabetical order case insensitively.,"[""Apple"", ""Banana"", ""orange""]","def sort_array(arr): 
    arr.sort(key = lambda x: x.lower()) 
    return arr

# driver code 
arr = [""Apple"", ""Banana"", ""orange""] 
print(sort_array(arr)) 
# Output: ['Apple', 'Banana', 'orange']",Data Structure,808,"def sort_array(arr): 
    arr.sort(key = lambda x: x.lower()) 
    return arr

# driver code 
arr = [""Apple"", ""Banana"", ""orange""] 
print(sort_array(arr)) 
# Output: ['Apple', 'Banana', 'orange']","def sort_array(arr): 
    ___
    return arr

# driver code 
arr = [""Apple"", ""Banana"", ""orange""] 
print(sort_array(arr)) 
# Output: ['Apple', 'Banana', 'orange']"
Write an algorithm in Python to sort a given list of strings in alphabetical order.,"[‘cat’, ‘dog’, ‘apple’, ‘zebra’]","def sort_string_list(strings):
  strings.sort()
  return strings

my_list = ['cat', 'dog', 'apple', 'zebra']
print(sort_string_list(my_list))",Data Structure,816,"def sort_string_list(strings):
  strings.sort()
  return strings

my_list = ['cat', 'dog', 'apple', 'zebra']
print(sort_string_list(my_list))","def sort_string_list(strings):
    ___
  return strings

my_list = ['cat', 'dog', 'apple', 'zebra']
print(sort_string_list(my_list))"
Create an application in Python which will take an array of numbers and returns the median.,"[3, 4, 9, 6, 5]","def get_median(arr):
 arr.sort()
 n = len(arr)
 if n % 2 == 0:
 return (arr[n//2] + arr[n//2 - 1])/2
 else:
 return arr[n//2]

if name == ""main"":
 arr = [3, 4, 9, 6, 5]
 print(get_median(arr)) # Output -> 5.5",Data Structure,866,"def get_median(arr):
 arr.sort()
 n = len(arr)
 if n % 2 == 0:
 return (arr[n//2] + arr[n//2 - 1])/2
 else:
 return arr[n//2]

if name == ""main"":
 arr = [3, 4, 9, 6, 5]
 print(get_median(arr)) # Output -> 5.5","def get_median(arr):
    ___
 n = len(arr)
 if n % 2 == 0:
 return (arr[n//2] + arr[n//2 - 1])/2
 else:
 return arr[n//2]

if name == ""main"":
 arr = [3, 4, 9, 6, 5]
 print(get_median(arr)) # Output -> 5.5"
Compose a Python program for finding the median value of an unsorted array.,"[4, 5, 6, 7, 8, 1, 2]","def median(arr):
    # Sort the array
    arr.sort()

    # Calculate length
    n = len(arr)

    # Check if n is even
    if n % 2 == 0:
        median1 = arr[n // 2]
        median2 = arr[n // 2 - 1]
        median = (median1 + median2) / 2
    else:
        median = arr[n // 2]

    return median

arr = [4, 5, 6, 7, 8, 1, 2]
result = median(arr)
print(result) # 4.5",Data Structure,867,"def median(arr):
    # Sort the array
    arr.sort()

    # Calculate length
    n = len(arr)

    # Check if n is even
    if n % 2 == 0:
        median1 = arr[n // 2]
        median2 = arr[n // 2 - 1]
        median = (median1 + median2) / 2
    else:
        median = arr[n // 2]

    return median

arr = [4, 5, 6, 7, 8, 1, 2]
result = median(arr)
print(result) # 4.5","def median(arr):
    ___
    ___

    # Calculate length
    n = len(arr)

    # Check if n is even
    if n % 2 == 0:
        median1 = arr[n // 2]
        median2 = arr[n // 2 - 1]
        median = (median1 + median2) / 2
    else:
        median = arr[n // 2]

    return median

arr = [4, 5, 6, 7, 8, 1, 2]
result = median(arr)
print(result) # 4.5"
Generate a structured array from a given dictionary in Python.,"dictionary = {
  ""name"": ""John"",
  ""age"": 24,
  ""nationality"": ""American""
}","import numpy as np
data = np.array(list(dictionary.values()),
      dtype=[('name','U20'),('age','i4'),('nationality','U10')]
)",Data Structure,888,"import numpy as np
data = np.array(list(dictionary.values()),
      dtype=[('name','U20'),('age','i4'),('nationality','U10')]
)","import numpy as np
    ___
      dtype=[('name','U20'),('age','i4'),('nationality','U10')]
)"
Generate a Python script for sorting a list in ascending order.,"[3, 4, 8, 5, 10]","def sortList(list): 
    list.sort() 
    return list
    
unsorted_list = [3, 4, 8, 5, 10]
sorted_list = sortList(unsorted_list)

print(""Sorted list:"", sorted_list)",Data Structure,893,"def sortList(list): 
    list.sort() 
    return list
    
unsorted_list = [3, 4, 8, 5, 10]
sorted_list = sortList(unsorted_list)

print(""Sorted list:"", sorted_list)","def sortList(list): 
    ___
    return list
    
unsorted_list = [3, 4, 8, 5, 10]
sorted_list = sortList(unsorted_list)

print(""Sorted list:"", sorted_list)"
Write a Python program to check an array if it contains consecutive integers.,"[2, 3, 4, 5, 6]","def check_array_for_consecutive(arr):
    arr.sort()
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] != 1:
            return False
    return True

arr = [2, 3, 4, 5, 6]
print(check_array_for_consecutive(arr))",Data Structure,907,"def check_array_for_consecutive(arr):
    arr.sort()
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] != 1:
            return False
    return True

arr = [2, 3, 4, 5, 6]
print(check_array_for_consecutive(arr))","def check_array_for_consecutive(arr):
    ___
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] != 1:
            return False
    return True

arr = [2, 3, 4, 5, 6]
print(check_array_for_consecutive(arr))"
Create a function in Python that takes in a list and sorts it in ascending order.,"[3, 5, 1, 2, 9]","def sortList(list):
 list.sort()
 return list

print(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]",Data Structure,913,"def sortList(list):
 list.sort()
 return list

print(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]","def sortList(list):
    ___
 return list

print(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]"
Create a Python script to calculate the median of an array of integers.,"[3, 1, 4, 5, 2]","def median(arr): 
 # Sort the array 
 arr.sort() 
 n = len(arr) 
  
 # If number of elements is odd, 
 # return the middle element 
 if n % 2 != 0: 
  return arr[n//2] 
  
 # If number of elements is even, 
 # return the average of the middle 
 # two elements 
 else:
  return (arr[n//2] + arr[(n//2)-1]) / 2

# Driver code 
arr = [3, 1, 4, 5, 2] 
print(median(arr))",Data Structure,926,"def median(arr): 
 # Sort the array 
 arr.sort() 
 n = len(arr) 
  
 # If number of elements is odd, 
 # return the middle element 
 if n % 2 != 0: 
  return arr[n//2] 
  
 # If number of elements is even, 
 # return the average of the middle 
 # two elements 
 else:
  return (arr[n//2] + arr[(n//2)-1]) / 2

# Driver code 
arr = [3, 1, 4, 5, 2] 
print(median(arr))","def median(arr): 
    ___
    ___
 n = len(arr) 
  
 # If number of elements is odd, 
 # return the middle element 
 if n % 2 != 0: 
  return arr[n//2] 
  
 # If number of elements is even, 
 # return the average of the middle 
 # two elements 
 else:
  return (arr[n//2] + arr[(n//2)-1]) / 2

# Driver code 
arr = [3, 1, 4, 5, 2] 
print(median(arr))"
Design and program a Python function to find the maximum number from an array of integers,"[10, 2, 4, 6, 8, 9]","def max_num(arr):
    max_num = arr[0]
    for i in arr:
        if i > max_num:
            max_num = i
    return max_num

if __name__ == '__main__':
    arr = [10, 2, 4, 6, 8, 9]
    print('The maximum number in array is', max_num(arr))",Data Structure,977,"def max_num(arr):
    max_num = arr[0]
    for i in arr:
        if i > max_num:
            max_num = i
    return max_num

if __name__ == '__main__':
    arr = [10, 2, 4, 6, 8, 9]
    print('The maximum number in array is', max_num(arr))","def max_num(arr):
    max_num = arr[0]
    for i in arr:
        if i > max_num:
            max_num = i
    return max_num

if __name__ == '__main__':
    arr = [10, 2, 4, 6, 8, 9]
    ___"
Produce an algorithm in Python to determine the maximum difference between any two elements in an array.,"[2, 7, 9, 5, 1, 3, 5]","def max_diff(array):
    max_diff = -float('inf')
    for i in range(1, len(array)):
        for j in range(i):
            diff = array[i]-array[j]
            if diff > max_diff:
                max_diff = diff
    return max_diff",Data Structure,1028,"def max_diff(array):
    max_diff = -float('inf')
    for i in range(1, len(array)):
        for j in range(i):
            diff = array[i]-array[j]
            if diff > max_diff:
                max_diff = diff
    return max_diff","    ___
    max_diff = -float('inf')
    ___
        for j in range(i):
    ___
            if diff > max_diff:
                max_diff = diff
    return max_diff"
"Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order.","Sample List: [""cat"",""bird"",""dog"",""zebra"",""ant""]","# create a list
sample_list = [""cat"", ""bird"", ""dog"", ""zebra"", ""ant""]
 
# sort the list
sample_list.sort()
 
# reverse the list
sample_list.reverse()
 
# print the reversed list
print(sample_list)
# ['zebra', 'dog', 'cat', 'bird', 'ant']",Data Structure,1037,"# create a list
sample_list = [""cat"", ""bird"", ""dog"", ""zebra"", ""ant""]
 
# sort the list
sample_list.sort()
 
# reverse the list
sample_list.reverse()
 
# print the reversed list
print(sample_list)
# ['zebra', 'dog', 'cat', 'bird', 'ant']","# create a list
sample_list = [""cat"", ""bird"", ""dog"", ""zebra"", ""ant""]
 
    ___
    ___
 
# reverse the list
sample_list.reverse()
 
# print the reversed list
print(sample_list)
# ['zebra', 'dog', 'cat', 'bird', 'ant']"
Can you build a program in Python to calculate the median of a given list of integers?,"[4, 9, 12, 8, 1]","def median(list): 
	list.sort() 
	length = len(list) 
	if length % 2 == 0: 
		return sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2
	else: 
		return list[int(length / 2)] 

median_of_list = median([4, 9, 12, 8, 1]) 
print(""Median of the list is: "" + str(median_of_list)) 
# Output: 8",Data Structure,1038,"def median(list): 
	list.sort() 
	length = len(list) 
	if length % 2 == 0: 
		return sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2
	else: 
		return list[int(length / 2)] 

median_of_list = median([4, 9, 12, 8, 1]) 
print(""Median of the list is: "" + str(median_of_list)) 
# Output: 8","def median(list): 
    ___
	length = len(list) 
	if length % 2 == 0: 
		return sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2
	else: 
		return list[int(length / 2)] 

median_of_list = median([4, 9, 12, 8, 1]) 
print(""Median of the list is: "" + str(median_of_list)) 
# Output: 8"
Create a Python script to calculate the running sum of an array.,"[1, 2, 3, 4, 5]","# Create a function to compute running sum
def running_sum(lst):
    running_sum = 0
    running_lst = []
    for num in lst:
        running_sum += num
        running_lst.append(running_sum)
    return running_lst

# Test array
test = [1, 2, 3, 4, 5]

# Print the result
print(running_sum(test))",Data Structure,1055,"# Create a function to compute running sum
def running_sum(lst):
    running_sum = 0
    running_lst = []
    for num in lst:
        running_sum += num
        running_lst.append(running_sum)
    return running_lst

# Test array
test = [1, 2, 3, 4, 5]

# Print the result
print(running_sum(test))","# Create a function to compute running sum
def running_sum(lst):
    running_sum = 0
    running_lst = []
    for num in lst:
        running_sum += num
        running_lst.append(running_sum)
    return running_lst

    ___
test = [1, 2, 3, 4, 5]

# Print the result
print(running_sum(test))"
Create a code snippet to sort a given array of strings in descending order based on their lengths in Python.,"arr = [""Python"", ""Javascript"", ""Ruby"", ""Java""]","arr.sort(key=lambda x: len(x), reverse=True)
print(arr)",Data Structure,1089,"arr.sort(key=lambda x: len(x), reverse=True)
print(arr)","    ___
print(arr)"
Design a Python program to read numbers from a given array and determine if all numbers are divisible by 5.,"array = [10, 15, 20, 25, 30]","def checkDivisible(array):
  for num in array:
    if num % 5 != 0:
      return False
  return True

array = [10, 15, 20, 25, 30]

if checkDivisible(array):
  print('All numbers are divisible by 5')
else:
  print('Not all numbers are divisible by 5')",Data Structure,1095,"def checkDivisible(array):
  for num in array:
    if num % 5 != 0:
      return False
  return True

array = [10, 15, 20, 25, 30]

if checkDivisible(array):
  print('All numbers are divisible by 5')
else:
  print('Not all numbers are divisible by 5')","    ___
    ___
    if num % 5 != 0:
      return False
  return True

    ___

    ___
  print('All numbers are divisible by 5')
else:
  print('Not all numbers are divisible by 5')"
Implement a sorting algorithm in Python that sorts a given array of numbers.,"array = [2, 7, 4, 1, 5, 3]","def sort_array(array):
    for i in range(len(array)): 
        min_idx = i 
        for j in range(i+1, len(array)): 
            if array[min_idx] > array[j]: 
                min_idx = j       
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
result = sort_array(array)
print(result) // Output: [1, 2, 3, 4, 5, 7]",Data Structure,1103,"def sort_array(array):
    for i in range(len(array)): 
        min_idx = i 
        for j in range(i+1, len(array)): 
            if array[min_idx] > array[j]: 
                min_idx = j       
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
result = sort_array(array)
print(result) // Output: [1, 2, 3, 4, 5, 7]","    ___
    ___
        min_idx = i 
    ___
    ___
                min_idx = j       
    ___
    ___
    ___
print(result) // Output: [1, 2, 3, 4, 5, 7]"
Suggest a completion for the following Python code that finds the median of a list of numbers.,"def median(nums):
    nums.sort()","def median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        left = len(nums) // 2 - 1
        right = len(nums) // 2
        return (nums[left] + nums[right]) / 2
    else:
        middle = len(nums) // 2
        return nums[middle]",Data Structure,1124,"def median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        left = len(nums) // 2 - 1
        right = len(nums) // 2
        return (nums[left] + nums[right]) / 2
    else:
        middle = len(nums) // 2
        return nums[middle]","def median(nums):
    ___
    if len(nums) % 2 == 0:
        left = len(nums) // 2 - 1
        right = len(nums) // 2
        return (nums[left] + nums[right]) / 2
    else:
        middle = len(nums) // 2
        return nums[middle]"
Write a Python function to insert a list of elements into a given list according to the given index.,"list = [1, 2, 3] 
index = 1 
elements = [4,5]","def insert_list(list, index, elements): 
    return (list[0:index] + elements + list[index:])",Data Structure,1130,"def insert_list(list, index, elements): 
    return (list[0:index] + elements + list[index:])","    ___
    ___"
Create a REST API endpoint in Python with a GET route to query a database. The route should accept a 'name' as a query parameter and return a list of results from the query.,name= 'John',"@app.route('/api/search', methods=['GET'])
def search():
name = request.args.get('name')
query = _db.execute(""SELECT * FROM users WHERE name=?"", [name]).fetchall()
return jsonify(query)",Data Structure,1150,"@app.route('/api/search', methods=['GET'])
def search():
name = request.args.get('name')
query = _db.execute(""SELECT * FROM users WHERE name=?"", [name]).fetchall()
return jsonify(query)","    ___
    ___
name = request.args.get('name')
query = _db.execute(""SELECT * FROM users WHERE name=?"", [name]).fetchall()
return jsonify(query)"
Generate a Python program that searches a list of given integers for a given target value and returns its index if found.,"list = [2, 3, 4, 5, 6], target = 4","def search(list, target):
  for i in range(len(list)):
    if list[i] == target:
      return i
  return -1

list = [2, 3, 4, 5, 6]
target = 4

index = search(list, target)
if index == -1:
  print(""The target was not found."")
else:
  print(""The target was found at index %d."" % index)",Data Structure,1155,"def search(list, target):
  for i in range(len(list)):
    if list[i] == target:
      return i
  return -1

list = [2, 3, 4, 5, 6]
target = 4

index = search(list, target)
if index == -1:
  print(""The target was not found."")
else:
  print(""The target was found at index %d."" % index)","    ___
  for i in range(len(list)):
    if list[i] == target:
      return i
  return -1

list = [2, 3, 4, 5, 6]
target = 4

    ___
    ___
  print(""The target was not found."")
else:
    ___"
Create a python script that prints out a list of names in alphabetical order.,"Robert, Asher, Aster, Athena","list_of_names= [""Asher"", ""Aster"", ""Athena"", ""Robert""]
list_of_names.sort()

print(list_of_names)",Data Structure,1170,"list_of_names= [""Asher"", ""Aster"", ""Athena"", ""Robert""]
list_of_names.sort()

print(list_of_names)","list_of_names= [""Asher"", ""Aster"", ""Athena"", ""Robert""]
    ___

print(list_of_names)"
Write code to find the median of an array of integers using Python.,"[2, 4, 5, 7, 8, 9, 11]","def get_median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int((len(nums)/2) - 1)] )/ 2
    else:
        return nums[int(len(nums) / 2)]

nums = [2, 4, 5, 7, 8, 9, 11]
median = get_median(nums)
print(""Median is: "",median)",Data Structure,1176,"def get_median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int((len(nums)/2) - 1)] )/ 2
    else:
        return nums[int(len(nums) / 2)]

nums = [2, 4, 5, 7, 8, 9, 11]
median = get_median(nums)
print(""Median is: "",median)","def get_median(nums):
    ___
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int((len(nums)/2) - 1)] )/ 2
    else:
        return nums[int(len(nums) / 2)]

nums = [2, 4, 5, 7, 8, 9, 11]
median = get_median(nums)
print(""Median is: "",median)"
Write a Python program that reads in a list of numbers and sorts them in the ascending order.,"[2, 3, 4, 5, 1]","def sort_list(lst):
    lst.sort()
    return lst

result = sort_list([2, 3, 4, 5, 1])
print(result)",Data Structure,1192,"def sort_list(lst):
    lst.sort()
    return lst

result = sort_list([2, 3, 4, 5, 1])
print(result)","def sort_list(lst):
    ___
    return lst

result = sort_list([2, 3, 4, 5, 1])
print(result)"
Create a function in Python that takes a value and inserts it into an already sorted list.,"[1, 5, 8], 6","# Python 
def insertInSortedList(sorted_list, value):
    left = 0
    right = len(sorted_list) - 1

    while left <= right:
        mid = left + (right - left) // 2
        if value < sorted_list[mid]:
            right = mid - 1
        else:
            left = mid + 1

    sorted_list.insert(left, value)
    return sorted_list",Data Structure,1196,"# Python 
def insertInSortedList(sorted_list, value):
    left = 0
    right = len(sorted_list) - 1

    while left <= right:
        mid = left + (right - left) // 2
        if value < sorted_list[mid]:
            right = mid - 1
        else:
            left = mid + 1

    sorted_list.insert(left, value)
    return sorted_list","# Python 
def insertInSortedList(sorted_list, value):
    left = 0
    right = len(sorted_list) - 1

    while left <= right:
        mid = left + (right - left) // 2
        if value < sorted_list[mid]:
            right = mid - 1
        else:
            left = mid + 1

    ___
    return sorted_list"
Create a program in Python for performing a linear search on a given list.,"[1, 2, 3, 4, 5, 6], 5","def linear_search(list, n): 
  
    for i in range(len(list)): 
  
        if list[i] == n: 
            return i 

list = [1, 2, 3, 4, 5, 6] 
n = 5

x = linear_search(list, n) 

if x == None: 
    print(""Element is not present in the list"") 
else: 
    print(""Element is present at index"", x)",Data Structure,1200,"def linear_search(list, n): 
  
    for i in range(len(list)): 
  
        if list[i] == n: 
            return i 

list = [1, 2, 3, 4, 5, 6] 
n = 5

x = linear_search(list, n) 

if x == None: 
    print(""Element is not present in the list"") 
else: 
    print(""Element is present at index"", x)","def linear_search(list, n): 
  
    for i in range(len(list)): 
  
        if list[i] == n: 
            return i 

list = [1, 2, 3, 4, 5, 6] 
n = 5

x = linear_search(list, n) 

if x == None: 
    print(""Element is not present in the list"") 
else: 
    ___"
Implement a bubble sort algorithm in Python to sort a list of numbers from lowest to highest.,"[5, 3, 1, 4, 7]","def bubble_sort(array):
    for i in range(len(array)):
        for j in range(i + 1, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]
    return array

arr = [5, 3, 1, 4, 7]
sorted_arr = bubble_sort(arr)
print(sorted_arr)",Data Structure,1241,"def bubble_sort(array):
    for i in range(len(array)):
        for j in range(i + 1, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]
    return array

arr = [5, 3, 1, 4, 7]
sorted_arr = bubble_sort(arr)
print(sorted_arr)","    ___
    ___
    ___
    ___
    ___
    ___

arr = [5, 3, 1, 4, 7]
sorted_arr = bubble_sort(arr)
print(sorted_arr)"
Can you write a python program to identify the last index of a given element in a list?,"The list [2, 5, 9, 2, 4] and the element 2","# Define the list
list_ = [2, 5, 9, 2, 4]
  
# Find the last index of element 2
last_index = len(list_) - list_[::-1].index(2) - 1
  
# Print the result
print(last_index)",Data Structure,1282,"# Define the list
list_ = [2, 5, 9, 2, 4]
  
# Find the last index of element 2
last_index = len(list_) - list_[::-1].index(2) - 1
  
# Print the result
print(last_index)","# Define the list
list_ = [2, 5, 9, 2, 4]
  
    ___
    ___
  
# Print the result
print(last_index)"
Develop a Python code that takes in an array of integers and outputs the array sorted in descending order.,"[9, 2, 7, 1]","def sort_descending(arr):
    arr.sort(reverse=True)
    return arr

arr = [9, 2, 7, 1]
res = sort_descending(arr) 
print (str(res))",Data Structure,1294,"def sort_descending(arr):
    arr.sort(reverse=True)
    return arr

arr = [9, 2, 7, 1]
res = sort_descending(arr) 
print (str(res))","def sort_descending(arr):
    ___
    return arr

arr = [9, 2, 7, 1]
res = sort_descending(arr) 
print (str(res))"
Construct a program in Python to search for a given number in an array.,"array = [1, 2, 3, 4, 5]
number = 3","def search(array, x):
	for i in range(len(array)):
		if array[i] == x:
			return i
	return -1",Data Structure,1304,"def search(array, x):
	for i in range(len(array)):
		if array[i] == x:
			return i
	return -1","    ___
    ___
    ___
			return i
	return -1"
Create a Python script to sort the following list in ABC order,"list = [3, 6, 9, 1, 4, 8]","list = [3, 6, 9, 1, 4, 8]

list.sort()

print(list)",Data Structure,1308,"list = [3, 6, 9, 1, 4, 8]

list.sort()

print(list)","list = [3, 6, 9, 1, 4, 8]

    ___

print(list)"
Write a Python program that performs linear regression. The program should generate a prediction given an input and a list of parameters.,"Input: 5 
Parameters: [0.5, 1.2, 3.1]","import numpy as np
 
def predict(x, params):
 x = np.array(x)
 params = np.array(params)
 
 y = 0
 for i in range(params.shape[0]):
 y += params[i] * x ** i
 
 return y
 
x = 5
params = [0.5, 1.2, 3.1]
 
y = predict(x, params)
print(y) # Output: 35.4",Data Structure,1325,"import numpy as np
 
def predict(x, params):
 x = np.array(x)
 params = np.array(params)
 
 y = 0
 for i in range(params.shape[0]):
 y += params[i] * x ** i
 
 return y
 
x = 5
params = [0.5, 1.2, 3.1]
 
y = predict(x, params)
print(y) # Output: 35.4","import numpy as np
 
def predict(x, params):
    ___
    ___
 
 y = 0
 for i in range(params.shape[0]):
 y += params[i] * x ** i
 
 return y
 
x = 5
params = [0.5, 1.2, 3.1]
 
y = predict(x, params)
print(y) # Output: 35.4"
"For an existing Python program, write a function to sort a given list of numbers in ascending order.","[4, 3, 2, 5, 1]","def sort_list(numbers): 
 numbers.sort()
 return numbers

print(sort_list([4, 3, 2, 5, 1]))",Data Structure,1331,"def sort_list(numbers): 
 numbers.sort()
 return numbers

print(sort_list([4, 3, 2, 5, 1]))","def sort_list(numbers): 
    ___
 return numbers

print(sort_list([4, 3, 2, 5, 1]))"
Create an algorithm in Python to search a given list for a specific value.,"[1, 4, 6, 8, 10], 8","def search(lst, target):
 for i in range(len(lst)):
  if lst[i] == target:
   return i
 return -1

search([1, 4, 6, 8, 10], 8)  # Output: 3",Data Structure,1332,"def search(lst, target):
 for i in range(len(lst)):
  if lst[i] == target:
   return i
 return -1

search([1, 4, 6, 8, 10], 8)  # Output: 3","    ___
 for i in range(len(lst)):
  if lst[i] == target:
   return i
 return -1

    ___"
Construct a Python code to combine the elements of two given list and return a sorted union list.,"input_list_1: [4, 10, 2]
input_list_2: [10, 2, 15]","def union_list(list1, list2): 
    list3 = list1 + list2 
    list3.sort() 
    return list3 
    
union_list(input_list_1, input_list_2)",Data Structure,1384,"def union_list(list1, list2): 
    list3 = list1 + list2 
    list3.sort() 
    return list3 
    
union_list(input_list_1, input_list_2)","def union_list(list1, list2): 
    list3 = list1 + list2 
    ___
    return list3 
    
union_list(input_list_1, input_list_2)"
Generate python code to implement a linear search algorithm to find a particular value in an array.,"array = [5, 10, 15, 20]","def linear_search(array, value):
    length = len(array)
    
    for i in range(length):
        if array[i] == value:
            return i
            
    return -1

print(linear_search(array, 15))",Data Structure,1404,"def linear_search(array, value):
    length = len(array)
    
    for i in range(length):
        if array[i] == value:
            return i
            
    return -1

print(linear_search(array, 15))","    ___
    ___
    
    for i in range(length):
    ___
            return i
            
    return -1

    ___"
Write a python program to sort a list of strings based on their lengths.,"['test', 'sample', 'hello', 'world']","list_of_strings = ['test', 'sample', 'hello', 'world']

list_of_strings.sort(key=len)

print(list_of_strings)",Data Structure,1405,"list_of_strings = ['test', 'sample', 'hello', 'world']

list_of_strings.sort(key=len)

print(list_of_strings)","list_of_strings = ['test', 'sample', 'hello', 'world']

    ___

print(list_of_strings)"
Develop a Python program to compact a given list of integers by removing its duplicate elements.,"[1, 1, 2, 2, 3, 4, 4, 5]","def compact_list(array):
    return list(set(array))",Data Structure,1421,"def compact_list(array):
    return list(set(array))","    ___
    ___"
Write a Python program to insert an item at a given position into a list,"lst = [""Red"", ""Orange"", ""Yellow""]
item = ""Black""
pos = 2","def insert_item(lst, item, pos):
    lst.insert(pos, item)
    return lst

lst = [""Red"", ""Orange"", ""Yellow""]
item = ""Black""
pos = 2

print(insert_item(lst, item, pos))",Data Structure,1422,"def insert_item(lst, item, pos):
    lst.insert(pos, item)
    return lst

lst = [""Red"", ""Orange"", ""Yellow""]
item = ""Black""
pos = 2

print(insert_item(lst, item, pos))","def insert_item(lst, item, pos):
    ___
    return lst

lst = [""Red"", ""Orange"", ""Yellow""]
item = ""Black""
pos = 2

print(insert_item(lst, item, pos))"
Create a Python 3 program to sort a list of numbers in ascending order.,"[5, 7 ,1 ,3, 4]","def sort_list(lst):
  lst.sort()
  return lst

lst = [5, 7 ,1 ,3, 4]
sorted_list = sort_list(lst)
print(sorted_list)",Data Structure,1448,"def sort_list(lst):
  lst.sort()
  return lst

lst = [5, 7 ,1 ,3, 4]
sorted_list = sort_list(lst)
print(sorted_list)","def sort_list(lst):
    ___
  return lst

lst = [5, 7 ,1 ,3, 4]
sorted_list = sort_list(lst)
print(sorted_list)"
Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers.,"[1,2,3]","""""""
A function to return the squares of an array in Python 
""""""

def square_array(input_array): 
  squared_array = []
  for i in input_array: 
    squared_array.append(i*i)
  return squared_array",Data Structure,1461,"""""""
A function to return the squares of an array in Python 
""""""

def square_array(input_array): 
  squared_array = []
  for i in input_array: 
    squared_array.append(i*i)
  return squared_array","""""""
    ___
""""""

def square_array(input_array): 
  squared_array = []
  for i in input_array: 
    squared_array.append(i*i)
  return squared_array"
Generate a Python program that takes a numerical list and finds the index of the largest value.,"[3, 5, 9, 10]","# list of numbers 
list = [3, 5, 9, 10] 

# maximum number 
MaxNum = max(list) 

# index of the maximum number 
index = list.index(MaxNum) 

print(""Maximum number is:"", MaxNum) 
print(""Index of maximum number is:"", index)",Data Structure,1473,"# list of numbers 
list = [3, 5, 9, 10] 

# maximum number 
MaxNum = max(list) 

# index of the maximum number 
index = list.index(MaxNum) 

print(""Maximum number is:"", MaxNum) 
print(""Index of maximum number is:"", index)","# list of numbers 
list = [3, 5, 9, 10] 

# maximum number 
MaxNum = max(list) 

    ___
    ___

print(""Maximum number is:"", MaxNum) 
    ___"
Create a python program that takes a sentence and returns a list of words in alphabetical order.,Sentence:  The quick brown fox jumped over the lazy dog.,"sentence = ""The quick brown fox jumped over the lazy dog.""

# Split sentence into words
words = sentence.split()

# Sort list of words alphabetically
words.sort()

# Print sorted list of words
print(words)

# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']",Data Structure,1509,"sentence = ""The quick brown fox jumped over the lazy dog.""

# Split sentence into words
words = sentence.split()

# Sort list of words alphabetically
words.sort()

# Print sorted list of words
print(words)

# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']","sentence = ""The quick brown fox jumped over the lazy dog.""

# Split sentence into words
words = sentence.split()

# Sort list of words alphabetically
    ___

# Print sorted list of words
print(words)

# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']"
"Formulate a script in Python that takes as input an array of integers, and returns the highest number in the array.","[1, 2, 5, 3, 7, 4]","def highest_number(arr):
    '''
    Function to get the highest number in an array of integers
    
    Parameters
    arr: list of integers
    
    Returns
    highest number in the array
    '''
    highest_num = arr[0]
    for num in arr:
        if num > highest_num:
            highest_num = num
    return highest_num",Data Structure,1526,"def highest_number(arr):
    '''
    Function to get the highest number in an array of integers
    
    Parameters
    arr: list of integers
    
    Returns
    highest number in the array
    '''
    highest_num = arr[0]
    for num in arr:
        if num > highest_num:
            highest_num = num
    return highest_num","def highest_number(arr):
    '''
    ___
    
    Parameters
    arr: list of integers
    
    Returns
    ___
    '''
    highest_num = arr[0]
    for num in arr:
        if num > highest_num:
            highest_num = num
    return highest_num"
Is it possible to write a function in Python to convert a given list of lists into a CMOV instruction?,"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def listoflists_to_cmov(listoflists): 
    # Initialise CMOV array
    cmov = [0]*9
  
    # Fill CMOV array with given list of lists
    for i, list_ in enumerate(listoflists): 
        cmov[i*3:(i+1)*3] = list_

    # Return CMOV array 
    return cmov",Data Structure,1528,"def listoflists_to_cmov(listoflists): 
    # Initialise CMOV array
    cmov = [0]*9
  
    # Fill CMOV array with given list of lists
    for i, list_ in enumerate(listoflists): 
        cmov[i*3:(i+1)*3] = list_

    # Return CMOV array 
    return cmov","def listoflists_to_cmov(listoflists): 
    ___
    cmov = [0]*9
  
    ___
    for i, list_ in enumerate(listoflists): 
        cmov[i*3:(i+1)*3] = list_

    ___
    return cmov"
"Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number.","[3, 1, 5, 4, 2],  5","def sortList(arr, num): 
    arr.sort(key = lambda x: x*num) 
    return arr 
  
arr = [3, 1, 5, 4, 2] 
num = 5
print(sortList(arr, num))",Data Structure,1535,"def sortList(arr, num): 
    arr.sort(key = lambda x: x*num) 
    return arr 
  
arr = [3, 1, 5, 4, 2] 
num = 5
print(sortList(arr, num))","def sortList(arr, num): 
    ___
    return arr 
  
arr = [3, 1, 5, 4, 2] 
num = 5
print(sortList(arr, num))"
Modify the following Python funciton to return the second largest element in the list.,"x = [1, 2, 3, 4, 5]","def second_largest(x):
    x.sort()
    return x[-2]",Data Structure,1544,"def second_largest(x):
    x.sort()
    return x[-2]","def second_largest(x):
    ___
    return x[-2]"
Develop a Python program that accepts a list of numbers and prints the 2nd largest and the 3rd smallest elements from the list.,"[3, 5, 2, 4, 9, 7]","def main():
 numbers = [3, 5, 2, 4, 9, 7]
 numbers.sort()
 
 print('The 2nd largest number is', numbers[-2])
 print('The 3rd smallest number is', numbers[2])
 
if __name__ == '__main__':
 main()",Data Structure,1593,"def main():
 numbers = [3, 5, 2, 4, 9, 7]
 numbers.sort()
 
 print('The 2nd largest number is', numbers[-2])
 print('The 3rd smallest number is', numbers[2])
 
if __name__ == '__main__':
 main()","def main():
 numbers = [3, 5, 2, 4, 9, 7]
    ___
 
 print('The 2nd largest number is', numbers[-2])
 print('The 3rd smallest number is', numbers[2])
 
if __name__ == '__main__':
 main()"
Create a function in Python that takes in a list of integers and prints out the largest multiple of 3.,"List: [3, 15, 4, 6, 5]","def largestMultipleOf3(list): 
    list.sort() 
    running_sum = 0
    for i in range(len(list)): 
        running_sum += list[i] 

    if running_sum % 3 == 0:  
        return running_sum  

    return largestMultipleOf3(list[:-1]) 

list = [3, 15, 4, 6, 5] 
print(largestMultipleOf3(list)) // 15",Data Structure,1601,"def largestMultipleOf3(list): 
    list.sort() 
    running_sum = 0
    for i in range(len(list)): 
        running_sum += list[i] 

    if running_sum % 3 == 0:  
        return running_sum  

    return largestMultipleOf3(list[:-1]) 

list = [3, 15, 4, 6, 5] 
print(largestMultipleOf3(list)) // 15","def largestMultipleOf3(list): 
    ___
    running_sum = 0
    for i in range(len(list)): 
        running_sum += list[i] 

    if running_sum % 3 == 0:  
        return running_sum  

    return largestMultipleOf3(list[:-1]) 

list = [3, 15, 4, 6, 5] 
print(largestMultipleOf3(list)) // 15"
Generate an optimized python program for splitting an array into two subarrays with equal sum.,"[1, 2, 3, 4, 5, 6]","def split_array_sum(arr):
  sum_arr = sum(arr)
  half_sum = sum_arr // 2
  current_sum = 0
  left_index = 0
  
  for index, value in enumerate(arr):
    current_sum += value
    if current_sum >= half_sum:
        left_index = index
        break
  
  left_arr = arr[:left_index+1]
  right_arr = arr[left_index+1:]
  return left_arr, right_arr",Data Structure,1628,"def split_array_sum(arr):
  sum_arr = sum(arr)
  half_sum = sum_arr // 2
  current_sum = 0
  left_index = 0
  
  for index, value in enumerate(arr):
    current_sum += value
    if current_sum >= half_sum:
        left_index = index
        break
  
  left_arr = arr[:left_index+1]
  right_arr = arr[left_index+1:]
  return left_arr, right_arr","def split_array_sum(arr):
  sum_arr = sum(arr)
  half_sum = sum_arr // 2
  current_sum = 0
  left_index = 0
  
    ___
    current_sum += value
    if current_sum >= half_sum:
    ___
        break
  
  left_arr = arr[:left_index+1]
  right_arr = arr[left_index+1:]
  return left_arr, right_arr"
Generate a Python program that reads in a list of words and sorts them alphabetically.,"List of words: ['apple', 'banana', 'cat', 'zebra']","words = ['apple', 'banana', 'cat', 'zebra']
words.sort()

for word in words:
 print(word)",Data Structure,1667,"words = ['apple', 'banana', 'cat', 'zebra']
words.sort()

for word in words:
 print(word)","words = ['apple', 'banana', 'cat', 'zebra']
    ___

for word in words:
 print(word)"
Write a Python program to optimize an array of numbers so that the sum of elements is maximum and all the elements are greater than 0.,"[1,-2,3,4,-5]","import numpy as np

# Get the input array
arr = [1,-2,3,4,-5]

# Optimize the array so that the sum of elements is maximized
# and all the elements are greater than 0
new_arr = np.max(arr,0)

# Print the optimized array
print(""Optimized Array : "",*new_arr)",Data Structure,1676,"import numpy as np

# Get the input array
arr = [1,-2,3,4,-5]

# Optimize the array so that the sum of elements is maximized
# and all the elements are greater than 0
new_arr = np.max(arr,0)

# Print the optimized array
print(""Optimized Array : "",*new_arr)","import numpy as np

    ___
arr = [1,-2,3,4,-5]

    ___
# and all the elements are greater than 0
new_arr = np.max(arr,0)

    ___
print(""Optimized Array : "",*new_arr)"
Create a function in Python that sorts the elements of a given list.,"[5, 7, 2, 3, 4, 1]","def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([5, 7, 2, 3, 4, 1])
print(result)",Data Structure,1679,"def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([5, 7, 2, 3, 4, 1])
print(result)","def sort_list(numbers):
    ___
    return numbers

result = sort_list([5, 7, 2, 3, 4, 1])
print(result)"
Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order.,"['cat', 'dog', 'apple', 'banana']","strings = ['cat', 'dog', 'apple', 'banana']

strings.sort()

for string in strings:
    print(string)",Data Structure,1722,"strings = ['cat', 'dog', 'apple', 'banana']

strings.sort()

for string in strings:
    print(string)","strings = ['cat', 'dog', 'apple', 'banana']

    ___

for string in strings:
    print(string)"
Write a Python function that takes a dictionary as input and returns a list of values sorted in ascending order.,"mydict = {'x':4, 'y':2, 'z':1}","def sort_dict_values(d):
    # create a list of values from the dictionary
    values = list(d.values())
    # sort the list 
    values.sort()
    return values

result = sort_dict_values(mydict)
print(result)",Data Structure,1736,"def sort_dict_values(d):
    # create a list of values from the dictionary
    values = list(d.values())
    # sort the list 
    values.sort()
    return values

result = sort_dict_values(mydict)
print(result)","def sort_dict_values(d):
    # create a list of values from the dictionary
    values = list(d.values())
    ___
    ___
    return values

result = sort_dict_values(mydict)
print(result)"
Generate a Python program to optimize an array of numbers,"A = [5, 4, 8, 9, 6, 1, -4, 7]","def optimize_array(A):
    A.sort()
    return A

print(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))",Data Structure,1760,"def optimize_array(A):
    A.sort()
    return A

print(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))","def optimize_array(A):
    ___
    return A

print(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))"
Write a Python program to edit an existing array without creating a new array.,"arr = [1,2,3,4,5]","def edit_array(arr):
    for i in range(len(arr)):
        arr[i] += 10
    return arr

if __name__ == '__main__':
    arr = [1,2,3,4,5]
    print(""Edited array:"", edit_array(arr))",Data Structure,1793,"def edit_array(arr):
    for i in range(len(arr)):
        arr[i] += 10
    return arr

if __name__ == '__main__':
    arr = [1,2,3,4,5]
    print(""Edited array:"", edit_array(arr))","def edit_array(arr):
    for i in range(len(arr)):
        arr[i] += 10
    return arr

if __name__ == '__main__':
    arr = [1,2,3,4,5]
    ___"
Create a Python program to sort a list of numbers from lowest to highest.,"[5, 2, 3, 7, 4]","def sort_list(numbers): 
    numbers.sort() 
    return numbers 
  
# Driver code 
numbers = [5, 2, 3, 7, 4]
print(sort_list(numbers))",Data Structure,1803,"def sort_list(numbers): 
    numbers.sort() 
    return numbers 
  
# Driver code 
numbers = [5, 2, 3, 7, 4]
print(sort_list(numbers))","def sort_list(numbers): 
    ___
    return numbers 
  
# Driver code 
numbers = [5, 2, 3, 7, 4]
print(sort_list(numbers))"
Create a Python program to sort the elements of a list in descending order (largest value first).,"numbers = [1, 7, 25, 8, 14]","numbers = [1, 7, 25, 8, 14]

# Sort the list in descending order
numbers.sort(reverse=True)

# Print the sorted list
print(numbers)

# Output
[25, 14, 8, 7, 1]",Data Structure,1827,"numbers = [1, 7, 25, 8, 14]

# Sort the list in descending order
numbers.sort(reverse=True)

# Print the sorted list
print(numbers)

# Output
[25, 14, 8, 7, 1]","numbers = [1, 7, 25, 8, 14]

# Sort the list in descending order
    ___

# Print the sorted list
print(numbers)

# Output
[25, 14, 8, 7, 1]"
"Given a list of integers, write a Python program to find the index of the largest number.","[5, 10, 20, 6, 8]","nums = [5, 10, 20, 6, 8]
max_num = max(nums)
max_index = nums.index(max_num)

print(max_index)",Data Structure,1832,"nums = [5, 10, 20, 6, 8]
max_num = max(nums)
max_index = nums.index(max_num)

print(max_index)","nums = [5, 10, 20, 6, 8]
max_num = max(nums)
    ___

print(max_index)"
Write a code to convert a JSON object to an array of dictionaries in Python.,"JSON Object: {
 ""Fruit"": ""Apple"",
 ""Shape"": ""Round"",
 ""Color"": ""Red""
}","#Function to convert a JSON object to an array of dictionaries in Python
import json

def json_to_array(data):
    my_dict = json.loads(data)
    return [{k: v} for k, v in my_dict.items()]

# Driver code
data = '{ ""Fruit"": ""Apple"", ""Shape"": ""Round"", ""Color"": ""Red"" }'
dict_array = json_to_array(data)
print(dict_array)",Data Structure,1833,"#Function to convert a JSON object to an array of dictionaries in Python
import json

def json_to_array(data):
    my_dict = json.loads(data)
    return [{k: v} for k, v in my_dict.items()]

# Driver code
data = '{ ""Fruit"": ""Apple"", ""Shape"": ""Round"", ""Color"": ""Red"" }'
dict_array = json_to_array(data)
print(dict_array)","    ___
import json

def json_to_array(data):
    my_dict = json.loads(data)
    return [{k: v} for k, v in my_dict.items()]

# Driver code
data = '{ ""Fruit"": ""Apple"", ""Shape"": ""Round"", ""Color"": ""Red"" }'
dict_array = json_to_array(data)
print(dict_array)"
Write a Python program to sort a list according to a given order of letters.,"['c','d','a','b'], order=['a', 'b', 'c', 'd']","def sort_by_order(l, order):
	return sorted(l, key = lambda x : order.index(x))",Data Structure,1844,"def sort_by_order(l, order):
	return sorted(l, key = lambda x : order.index(x))","def sort_by_order(l, order):
    ___"
Write a Python function to sort an array of numbers in descending order,"[3, 7, 1, 5]","def sortDescending(arr):
    arr.sort(reverse=True)
    return arr

array = [3, 7, 1, 5]
sortedArray = sortDescending(array)",Data Structure,1845,"def sortDescending(arr):
    arr.sort(reverse=True)
    return arr

array = [3, 7, 1, 5]
sortedArray = sortDescending(array)","def sortDescending(arr):
    ___
    return arr

    ___
    ___"
Create a Python script to check if an array contains contiguous numbers.,"arr = [20, 21, 22, 23, 24]","def is_contiguous(arr):
    if (len(arr) == 0):
        return True
    arr.sort()
    for i in range(len(arr) - 1):
        if (arr[i] + 1 != arr[i+1]):
            return False
    return True",Data Structure,1850,"def is_contiguous(arr):
    if (len(arr) == 0):
        return True
    arr.sort()
    for i in range(len(arr) - 1):
        if (arr[i] + 1 != arr[i+1]):
            return False
    return True","def is_contiguous(arr):
    if (len(arr) == 0):
        return True
    ___
    for i in range(len(arr) - 1):
        if (arr[i] + 1 != arr[i+1]):
            return False
    return True"
Develop an algorithm in Python to check if an array contains a given number.,"array = [2, 4, 6, 8], number = 8","def checkNumber(array, number):
    for i in array:
        if i == number:
            return True
    return False

checkNumber([2, 4, 6, 8], 8)",Data Structure,1854,"def checkNumber(array, number):
    for i in array:
        if i == number:
            return True
    return False

checkNumber([2, 4, 6, 8], 8)","    ___
    ___
        if i == number:
            return True
    return False

checkNumber([2, 4, 6, 8], 8)"
Modify the following Python code to reverse the order of the elements in an array,"arr = [1, 2, 3, 4, 5]",arr = arr[::-1]  # Reverses the order of elements in the array.,Data Structure,1861,arr = arr[::-1]  # Reverses the order of elements in the array.,    ___
Create a function in Python which takes a list of integers as input and returns a sorted list.,"[3, 2, 5, 1, 4]","def sort_list(list):
    list.sort()
    return list
    
sorted_list = sort_list([3, 2, 5, 1, 4])
print(sorted_list) # output: [1, 2, 3, 4, 5]",Data Structure,1885,"def sort_list(list):
    list.sort()
    return list
    
sorted_list = sort_list([3, 2, 5, 1, 4])
print(sorted_list) # output: [1, 2, 3, 4, 5]","def sort_list(list):
    ___
    return list
    
sorted_list = sort_list([3, 2, 5, 1, 4])
print(sorted_list) # output: [1, 2, 3, 4, 5]"
Create a Python program to implement linear search to find a specified item in an array.,"Array = [1, 2, 3, 4, 5], search_number = 4","def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1

arr = [1, 2, 3, 4, 5]
search_number = 4
result = linear_search(arr, search_number)
if result == -1:
    print(""Number not found in the array"")
else:
    print(""Number found at index:"", result)",Data Structure,1907,"def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1

arr = [1, 2, 3, 4, 5]
search_number = 4
result = linear_search(arr, search_number)
if result == -1:
    print(""Number not found in the array"")
else:
    print(""Number found at index:"", result)","def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1

arr = [1, 2, 3, 4, 5]
search_number = 4
result = linear_search(arr, search_number)
if result == -1:
    ___
else:
    ___"
Build a Python program that will receive a list of integers as an input and output the lowest common multiple (LCM) of these numbers.,"array = [2,4,6]","# Function to calculate LCM 
def lcm(l):
    ans = l[0]
    for i in l[1:]:
          ans = (ans*i)//gcd(ans, i)
    return ans;
  
# Driver program to test above function 
array = [2,4,6] 
print(""The LCM of"", array,""is"", lcm(array))",Data Structure,1918,"# Function to calculate LCM 
def lcm(l):
    ans = l[0]
    for i in l[1:]:
          ans = (ans*i)//gcd(ans, i)
    return ans;
  
# Driver program to test above function 
array = [2,4,6] 
print(""The LCM of"", array,""is"", lcm(array))","# Function to calculate LCM 
def lcm(l):
    ans = l[0]
    for i in l[1:]:
          ans = (ans*i)//gcd(ans, i)
    return ans;
  
# Driver program to test above function 
    ___
    ___"
Create a program in Python to sort a given array in ascending order using bubble sort.,"[3,7,4,1]","def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1):
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [3,7,4,1]
bubble_sort(arr) 
print (""Sorted array :"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),",Data Structure,2001,"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1):
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [3,7,4,1]
bubble_sort(arr) 
print (""Sorted array :"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),","def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1):
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [3,7,4,1]
bubble_sort(arr) 
    ___
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Create a program in Python that shuffles an array of numbers.,"[1, 5, 8, 11, 3]","import random

# Create an array
arr = [1, 5, 8, 11, 3]

# Function to shuffle an array
def shuffle_array(arr):
    random.shuffle(arr)
    return arr

# Shuffle the array and print the result
print(shuffle_array(arr))",Data Structure,2014,"import random

# Create an array
arr = [1, 5, 8, 11, 3]

# Function to shuffle an array
def shuffle_array(arr):
    random.shuffle(arr)
    return arr

# Shuffle the array and print the result
print(shuffle_array(arr))","import random

    ___
arr = [1, 5, 8, 11, 3]

    ___
def shuffle_array(arr):
    random.shuffle(arr)
    return arr

    ___
print(shuffle_array(arr))"
Suggest a function to remove elements of an array that are greater than a given limit,"[1, 2, 3, 4, 5, 6, 7, 8, 9]","# Python program to remove elements of an array that are greater than a given limit

def remove_above_limit(arr, limit):
    new_arr = [x for x in arr if x <= limit]
    return new_arr",Data Structure,2024,"# Python program to remove elements of an array that are greater than a given limit

def remove_above_limit(arr, limit):
    new_arr = [x for x in arr if x <= limit]
    return new_arr","    ___

def remove_above_limit(arr, limit):
    new_arr = [x for x in arr if x <= limit]
    return new_arr"
Write a Python code to sort a list of words alphabetically.,"word_list = [""hello"", ""computer"", ""science"", ""art""]","word_list.sort()
print(word_list)",Data Structure,2045,"word_list.sort()
print(word_list)","    ___
print(word_list)"
Develop a Python program to sort a 3D array according to the second axis in ascending order.,"[[[1,6,4],
  [4,3,2],
  [2,3,6]],
 [[3,3,3],
  [2,2,2],
  [1,1,1]]]","def sort_array(arr):
    arr.sort(key=lambda x: x[1])
    return arr

data = [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]]

print(sort_array(data))",Data Structure,2047,"def sort_array(arr):
    arr.sort(key=lambda x: x[1])
    return arr

data = [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]]

print(sort_array(data))","def sort_array(arr):
    ___
    return arr

data = [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]]

print(sort_array(data))"
Write a python program that sorts a list of numbers in descending order.,"list_numbers = [8, 4, 6, 10, 3]","list_numbers = [8, 4, 6, 10, 3]

list_numbers.sort(reverse=True)

print(list_numbers) # Output: [10, 8, 6, 4, 3]",Data Structure,2049,"list_numbers = [8, 4, 6, 10, 3]

list_numbers.sort(reverse=True)

print(list_numbers) # Output: [10, 8, 6, 4, 3]","list_numbers = [8, 4, 6, 10, 3]

    ___

print(list_numbers) # Output: [10, 8, 6, 4, 3]"
Create a function in Python that returns the sequential median value from an array of integers.,"arr = [1, 3, 5, 6, 9, 11]","def find_median(arr):
    n = len(arr) 
    arr.sort() 
  
    if n % 2 != 0: 
        return arr[n//2] 
  
    return (arr[(n-1)//2] + arr[n//2]) / 2.0",Data Structure,2057,"def find_median(arr):
    n = len(arr) 
    arr.sort() 
  
    if n % 2 != 0: 
        return arr[n//2] 
  
    return (arr[(n-1)//2] + arr[n//2]) / 2.0","def find_median(arr):
    n = len(arr) 
    ___
  
    if n % 2 != 0: 
        return arr[n//2] 
  
    return (arr[(n-1)//2] + arr[n//2]) / 2.0"
Create a Python program to compute the sum of all elements in a given array.,"array = [1, 2, 3, 4, 5]","def compute_sum(array):
    sum = 0
    for element in array:
        sum += element
    return sum
    
if __name__ == '__main__':
    array = [1, 2, 3, 4, 5]
    print(compute_sum(array))",Data Structure,2064,"def compute_sum(array):
    sum = 0
    for element in array:
        sum += element
    return sum
    
if __name__ == '__main__':
    array = [1, 2, 3, 4, 5]
    print(compute_sum(array))","    ___
    sum = 0
    ___
        sum += element
    return sum
    
if __name__ == '__main__':
    ___
    ___"
Construct a python program for linear search for a given element in an array.,"Array: [1, 2, 3, 4, 5] 
Element: 4","def linearSearch(array, element): 
    for i in range(len(array)): 
        if array[i]==element: 
            return i
    return -1

linearSearch([1, 2, 3, 4, 5], 4) # returns 3",Data Structure,2065,"def linearSearch(array, element): 
    for i in range(len(array)): 
        if array[i]==element: 
            return i
    return -1

linearSearch([1, 2, 3, 4, 5], 4) # returns 3","    ___
    ___
    ___
            return i
    return -1

linearSearch([1, 2, 3, 4, 5], 4) # returns 3"
Create a Python function that sorts the numbers in a given list in ascending order.,"[8,3,5,2,9,7]","def sort_list(list):
    list.sort()
    return list

if __name__ == ""__main__"":
    l = [8,3,5,2,9,7]
    print(sort_list(l))",Data Structure,2074,"def sort_list(list):
    list.sort()
    return list

if __name__ == ""__main__"":
    l = [8,3,5,2,9,7]
    print(sort_list(l))","def sort_list(list):
    ___
    return list

if __name__ == ""__main__"":
    l = [8,3,5,2,9,7]
    print(sort_list(l))"
Create a function in Python which takes two arguments – an array of integers and an integer x – and returns a list of all pairs in the array with a sum equal to x.,"array = [4, 6, 2, 8]
x = 10","def equalSums(array, x): 
    result = [] 

    for i in range(0, len(array)-1): 
        for j in range(i + 1, len(array)): 
            if array[i] + array[j] == x: 
                result.append([array[i], array[j]]) 
  
    return result 
  
print(equalSums(array, x))",Data Structure,2092,"def equalSums(array, x): 
    result = [] 

    for i in range(0, len(array)-1): 
        for j in range(i + 1, len(array)): 
            if array[i] + array[j] == x: 
                result.append([array[i], array[j]]) 
  
    return result 
  
print(equalSums(array, x))","    ___
    result = [] 

    ___
    ___
    ___
    ___
  
    return result 
  
    ___"
Create a Python script to implement a linear search for a given list of numbers.,"numbers_list = [1, 4, 5, 6, 7, 8 , 10]
number = 6","def linear_search(numbers_list, number):
    """"""Implements a linear search for a given list of numbers and returns the index of the number if exists""""""
    
    for index, element in enumerate(numbers_list):
        if element == number:
            return index
    return -1",Data Structure,2105,"def linear_search(numbers_list, number):
    """"""Implements a linear search for a given list of numbers and returns the index of the number if exists""""""
    
    for index, element in enumerate(numbers_list):
        if element == number:
            return index
    return -1","def linear_search(numbers_list, number):
    ___
    
    ___
        if element == number:
    ___
    return -1"
Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity.,"array = [3, 8, 2, 5, 4, 1, 9]","def find_smallest_number(array):
    smallest = array[0]
    for element in array:
        if element < smallest:
            smallest = element
    return smallest",Data Structure,2123,"def find_smallest_number(array):
    smallest = array[0]
    for element in array:
        if element < smallest:
            smallest = element
    return smallest","    ___
    ___
    ___
        if element < smallest:
            smallest = element
    return smallest"
Create a Python program to normalize a list of numbers so that the sum of the numbers add up to 1.,"[2, 5, 8, 9, 12, 25]","import numpy as np

def normalize_list(lst):
    lst = np.array(lst)
    normalized = lst / lst.sum()
    return normalized

lst = [2, 5, 8, 9, 12, 25]
normalized_list = normalize_list(lst)
print(normalized_list)",Data Structure,2137,"import numpy as np

def normalize_list(lst):
    lst = np.array(lst)
    normalized = lst / lst.sum()
    return normalized

lst = [2, 5, 8, 9, 12, 25]
normalized_list = normalize_list(lst)
print(normalized_list)","import numpy as np

def normalize_list(lst):
    ___
    normalized = lst / lst.sum()
    return normalized

lst = [2, 5, 8, 9, 12, 25]
normalized_list = normalize_list(lst)
print(normalized_list)"
Create a Python program to sort a given array in increasing and decreasing order.,"Array: [3, 5, 8, 9, 0, 4, 1]","def sort_array(arr): 
	asc_arr = arr.copy() 
	asc_arr.sort() 

	dsc_arr = arr.copy()
	dsc_arr.sort(reverse=True)
 
	return asc_arr, dsc_arr

asc_arr, dsc_arr = sort_array([3, 5, 8, 9, 0, 4, 1])
print(""Sorted in ascending order:"", asc_arr)
print(""Sorted in descending order:"", dsc_arr)",Data Structure,2141,"def sort_array(arr): 
	asc_arr = arr.copy() 
	asc_arr.sort() 

	dsc_arr = arr.copy()
	dsc_arr.sort(reverse=True)
 
	return asc_arr, dsc_arr

asc_arr, dsc_arr = sort_array([3, 5, 8, 9, 0, 4, 1])
print(""Sorted in ascending order:"", asc_arr)
print(""Sorted in descending order:"", dsc_arr)","def sort_array(arr): 
	asc_arr = arr.copy() 
    ___

	dsc_arr = arr.copy()
    ___
 
	return asc_arr, dsc_arr

asc_arr, dsc_arr = sort_array([3, 5, 8, 9, 0, 4, 1])
print(""Sorted in ascending order:"", asc_arr)
print(""Sorted in descending order:"", dsc_arr)"
Write a Python program to edit an array of strings to filter out all the strings that do not contain the given substring.,"array = [""stack"", ""overflow"", ""coding"", ""challenge""]
substring = ""stack""","# Filtering out the strings that don't contain the substring
filtered_array = [s for s in array if substring in s]

print(filtered_array)",Data Structure,2143,"# Filtering out the strings that don't contain the substring
filtered_array = [s for s in array if substring in s]

print(filtered_array)","# Filtering out the strings that don't contain the substring
    ___

print(filtered_array)"
Write a Python program to take a list of integers and sort them in ascending order using insertion sort.,"[4, 3, 7, 2, 1]","def insertion_sort(arr):
 for index in range(1,len(arr)):
 key = arr[index]
 j = index-1
 while j >=0 and key < arr[j]:
 arr[j+1] = arr[j]
 j -= 1
 arr[j+1] = key

arr = [4, 3, 7, 2, 1]
insertion_sort(arr)
print(arr)

# Output: [1, 2, 3, 4, 7]",Data Structure,2169,"def insertion_sort(arr):
 for index in range(1,len(arr)):
 key = arr[index]
 j = index-1
 while j >=0 and key < arr[j]:
 arr[j+1] = arr[j]
 j -= 1
 arr[j+1] = key

arr = [4, 3, 7, 2, 1]
insertion_sort(arr)
print(arr)

# Output: [1, 2, 3, 4, 7]","def insertion_sort(arr):
    ___
    ___
    ___
 while j >=0 and key < arr[j]:
 arr[j+1] = arr[j]
 j -= 1
 arr[j+1] = key

arr = [4, 3, 7, 2, 1]
insertion_sort(arr)
print(arr)

# Output: [1, 2, 3, 4, 7]"
Generate a Python script to sort a 2D array of integers by the second column.,"[[1, 10], [5, 5], [4, 8]]","def sort_2d_arr(arr):
    arr.sort(key = lambda x : x[1])
    return arr

print(sort_2d_arr([[1, 10], [5, 5], [4, 8]]))

# Output
[[5, 5], [4, 8], [1, 10]]",Data Structure,2220,"def sort_2d_arr(arr):
    arr.sort(key = lambda x : x[1])
    return arr

print(sort_2d_arr([[1, 10], [5, 5], [4, 8]]))

# Output
[[5, 5], [4, 8], [1, 10]]","def sort_2d_arr(arr):
    ___
    return arr

print(sort_2d_arr([[1, 10], [5, 5], [4, 8]]))

# Output
[[5, 5], [4, 8], [1, 10]]"
Develop a Python program to search an element in a list using linear search.,"[25, 10, 5, 2, 50], 50","def linear_search(list, element):
    for i in range(len(list)):
        if list[i] == element:
            return i
    return -1

index = linear_search([25, 10, 5, 2, 50], 50)
if index < 0:
    print(f""{element} not found in the list"")
else:
    print(f""{element} found at index {index}"")",Data Structure,2224,"def linear_search(list, element):
    for i in range(len(list)):
        if list[i] == element:
            return i
    return -1

index = linear_search([25, 10, 5, 2, 50], 50)
if index < 0:
    print(f""{element} not found in the list"")
else:
    print(f""{element} found at index {index}"")","def linear_search(list, element):
    for i in range(len(list)):
        if list[i] == element:
            return i
    return -1

    ___
    ___
    print(f""{element} not found in the list"")
else:
    ___"
Generate a function in Python that finds the max element in a given list.,"[2, 78, 34, 55]","def maxElement(arr):
    return max(arr)

array = [2, 78, 34, 55]

print(maxElement(array)) # 78",Data Structure,2244,"def maxElement(arr):
    return max(arr)

array = [2, 78, 34, 55]

print(maxElement(array)) # 78","def maxElement(arr):
    return max(arr)

    ___

    ___"
Write a Python code for sorting a list of integers in ascending order.,"[5,2,7,3,1]","list=[5,2,7,3,1]
list.sort()
print(list)",Data Structure,2271,"list=[5,2,7,3,1]
list.sort()
print(list)","list=[5,2,7,3,1]
    ___
print(list)"
Create a Python package that contains a collection of functions for finding the average value of an array.,"[1,2,3,4,5]","def average(array):
 '''
 Finds the average of all numbers in an array

 Args:
 array (list): List of numbers

 Returns:
 float: The average of all values in the array
 '''

 total = 0
 for value in array:
 total += value

 return total / len(array)",Data Structure,2294,"def average(array):
 '''
 Finds the average of all numbers in an array

 Args:
 array (list): List of numbers

 Returns:
 float: The average of all values in the array
 '''

 total = 0
 for value in array:
 total += value

 return total / len(array)","    ___
 '''
    ___

 Args:
    ___

 Returns:
    ___
 '''

 total = 0
    ___
 total += value

    ___"
Suggest a way to sort a list of integers in python in ascending order.,"[9, 1, 8, 0, 2]","sorted_list = [9, 1, 8, 0, 2].sort()
print(sorted_list)",Data Structure,2305,"sorted_list = [9, 1, 8, 0, 2].sort()
print(sorted_list)","    ___
print(sorted_list)"
Design a class in Python that finds the highest number in a given array of integers.,"[3, 5, 1, 8, 11, 12]","class HighestNumberFinder:
    def __init__(self, array):
        self.array = array
    
    def find_highest_number(self):
        highest_number = self.array[0]
        for number in self.array:
            if (number > highest_number):
                highest_number = number
        return highest_number",Data Structure,2322,"class HighestNumberFinder:
    def __init__(self, array):
        self.array = array
    
    def find_highest_number(self):
        highest_number = self.array[0]
        for number in self.array:
            if (number > highest_number):
                highest_number = number
        return highest_number","class HighestNumberFinder:
    ___
    ___
    
    def find_highest_number(self):
    ___
    ___
            if (number > highest_number):
                highest_number = number
        return highest_number"
Write a Python program to delete the third element of a list.,"list = [1, 2, 3, 4, 5]","def delete_third_element(list): 
    """"""Function to delete the third element of a list"""""" 
    del list[2] 
    return list

#Example:
print(delete_third_element(list))",Data Structure,2341,"def delete_third_element(list): 
    """"""Function to delete the third element of a list"""""" 
    del list[2] 
    return list

#Example:
print(delete_third_element(list))","def delete_third_element(list): 
    ___
    del list[2] 
    return list

#Example:
print(delete_third_element(list))"
Create a Python program which will sort the given array of numbers,"[9, 5, 1, 10]","def sortArray(arr): 
    arr.sort() 
    return arr 
  
# Driver code 
arr = [9, 5, 1, 10] 
print(sortArray(arr)) 
# Output: [1, 5, 9, 10]",Data Structure,2342,"def sortArray(arr): 
    arr.sort() 
    return arr 
  
# Driver code 
arr = [9, 5, 1, 10] 
print(sortArray(arr)) 
# Output: [1, 5, 9, 10]","def sortArray(arr): 
    ___
    return arr 
  
# Driver code 
arr = [9, 5, 1, 10] 
print(sortArray(arr)) 
# Output: [1, 5, 9, 10]"
Write a function to reverse the elements of a given array in Python.,"[1, 2, 3, 4, 5]","def reverse_array(arr):
    """"""This function reverses the elements of a given array of numbers
    
    Parameters: 
        arr (list): The list of numbers to reverse.
	
    Returns: The reversed array
    """"""
    return arr[::-1]",Data Structure,2354,"def reverse_array(arr):
    """"""This function reverses the elements of a given array of numbers
    
    Parameters: 
        arr (list): The list of numbers to reverse.
	
    Returns: The reversed array
    """"""
    return arr[::-1]","def reverse_array(arr):
    ___
    
    Parameters: 
        arr (list): The list of numbers to reverse.
	
    ___
    """"""
    return arr[::-1]"
Generate a python statements to insert an item at a specific index in a list.,"list = [1, 2, 4, 5]
item = 3
index = 2","list.insert(index, item)",Data Structure,2362,"list.insert(index, item)",    ___
"Given a list of integers, write a Python program to find the maximum value in the array and display its index.","[3, 2, 5, 8, 6]","mylist = [3, 2, 5, 8, 6]

# initialize maximum value and index
maxval = 0
maxindex = 0

# iterate through list
for i, val in enumerate(mylist):
 # check if the current value is greater than the maximum value
 if val > maxval:
  maxval = val
  maxindex = i

# print the result
print('Maximum value:', maxval)
print('Index of maximum value:', maxindex)",Data Structure,2385,"mylist = [3, 2, 5, 8, 6]

# initialize maximum value and index
maxval = 0
maxindex = 0

# iterate through list
for i, val in enumerate(mylist):
 # check if the current value is greater than the maximum value
 if val > maxval:
  maxval = val
  maxindex = i

# print the result
print('Maximum value:', maxval)
print('Index of maximum value:', maxindex)","mylist = [3, 2, 5, 8, 6]

    ___
maxval = 0
maxindex = 0

# iterate through list
for i, val in enumerate(mylist):
 # check if the current value is greater than the maximum value
 if val > maxval:
  maxval = val
  maxindex = i

# print the result
print('Maximum value:', maxval)
print('Index of maximum value:', maxindex)"
Write a function in Python that computes the median of a given array of numbers.,"[2,3,4,5,6,7,8]","def median(arr):
 arr.sort() 
 n = len(arr) 
 if n % 2 != 0: 
 return arr[n//2] 
 else: 
 return (arr[(n-1)//2] + arr[n//2]) / 2

# driver code 
arr = [2,3,4,5,6,7,8] 
print(median(arr))",Data Structure,2388,"def median(arr):
 arr.sort() 
 n = len(arr) 
 if n % 2 != 0: 
 return arr[n//2] 
 else: 
 return (arr[(n-1)//2] + arr[n//2]) / 2

# driver code 
arr = [2,3,4,5,6,7,8] 
print(median(arr))","def median(arr):
    ___
 n = len(arr) 
 if n % 2 != 0: 
 return arr[n//2] 
 else: 
 return (arr[(n-1)//2] + arr[n//2]) / 2

# driver code 
arr = [2,3,4,5,6,7,8] 
print(median(arr))"
Find the maximum value of a 10 element array in Python.,"array = [1, 7, 3, 4, 5, 9, 8, 0, 2, 6]","# Max value in array

def max_val(array):
    max_val = array[0]
    for num in array[1:]:
        if num > max_val:
            max_val = num
    return max_val",Data Structure,2396,"# Max value in array

def max_val(array):
    max_val = array[0]
    for num in array[1:]:
        if num > max_val:
            max_val = num
    return max_val","    ___

    ___
    ___
    ___
        if num > max_val:
            max_val = num
    return max_val"
Update the given Python program to shuffle an array of numbers.,"[1, 2, 3, 4, 5, 6]","import random

def shuffleArray(arr):
    random.shuffle(arr)
    return arr

array = [1, 2, 3, 4, 5, 6]
shuffledArray = shuffleArray(array)
print(shuffledArray)",Data Structure,2400,"import random

def shuffleArray(arr):
    random.shuffle(arr)
    return arr

array = [1, 2, 3, 4, 5, 6]
shuffledArray = shuffleArray(array)
print(shuffledArray)","import random

def shuffleArray(arr):
    random.shuffle(arr)
    return arr

    ___
    ___
print(shuffledArray)"
Generate a Python program which use to generate an array of length N with random numbers based on the given seed.,"N = 10
Seed = 42","import random

def generate_array_with_random_numbers(n, seed):
 random.seed(seed)
 return [random.randint(0, 100) for _ in range(n)]

n = 10
seed = 42
array = generate_array_with_random_numbers(n, seed)

print(array)
# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]",Data Structure,2410,"import random

def generate_array_with_random_numbers(n, seed):
 random.seed(seed)
 return [random.randint(0, 100) for _ in range(n)]

n = 10
seed = 42
array = generate_array_with_random_numbers(n, seed)

print(array)
# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]","import random

def generate_array_with_random_numbers(n, seed):
 random.seed(seed)
 return [random.randint(0, 100) for _ in range(n)]

n = 10
seed = 42
    ___

    ___
# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]"
Sort a list in Python using the Quick Sort algorithm,"[5, 2, 9, 1, 4, 12]","def quicksort (array) :
    if len(array) <= 1 :
        return array
    else:
        pivot = array[len(array) // 2]
        left = [x for x in array if x < pivot]
        middle = [x for x in array if x == pivot]
        right = [x for x in array if x > pivot]
        return quicksort(left) + middle + quicksort(right)

array = [5, 2, 9, 1, 4, 12]
result = quicksort(array)
print(result)",Data Structure,2413,"def quicksort (array) :
    if len(array) <= 1 :
        return array
    else:
        pivot = array[len(array) // 2]
        left = [x for x in array if x < pivot]
        middle = [x for x in array if x == pivot]
        right = [x for x in array if x > pivot]
        return quicksort(left) + middle + quicksort(right)

array = [5, 2, 9, 1, 4, 12]
result = quicksort(array)
print(result)","    ___
    ___
    ___
    else:
    ___
    ___
    ___
    ___
        return quicksort(left) + middle + quicksort(right)

    ___
    ___
print(result)"
Create a Python program to search for an item in a list and return its index.,"[2, 3, 5, 7, 11], target = 5","def linear_search(list, target):
  for index, item in enumerate(list):
    if target == item:
      return index
    return -1

result = linear_search([2, 3, 5, 7, 11], 5)
print(result)",Data Structure,2429,"def linear_search(list, target):
  for index, item in enumerate(list):
    if target == item:
      return index
    return -1

result = linear_search([2, 3, 5, 7, 11], 5)
print(result)","def linear_search(list, target):
    ___
    if target == item:
    ___
    return -1

result = linear_search([2, 3, 5, 7, 11], 5)
print(result)"
Generate an HTML page with an ordered list which displays the top 5 programming languages in descending order.,"Python, Java, JavaScript, C#, C++","<html>
<head>
    <title>Top 5 Programming Languages</title>
</head>
<body>
    <ul>
        <li>Python</li>
        <li>Java</li>
        <li>JavaScript</li>
        <li>C#</li>
        <li>C++</li>
    </ul>
</body>
</html>",Data Structure,2445,"<html>
<head>
    <title>Top 5 Programming Languages</title>
</head>
<body>
    <ul>
        <li>Python</li>
        <li>Java</li>
        <li>JavaScript</li>
        <li>C#</li>
        <li>C++</li>
    </ul>
</body>
</html>","<html>
    ___
    <title>Top 5 Programming Languages</title>
    ___
<body>
    <ul>
        <li>Python</li>
        <li>Java</li>
        <li>JavaScript</li>
        <li>C#</li>
        <li>C++</li>
    </ul>
</body>
</html>"
Create a function in Python to perform a linear search on a list of numbers.,"def linear_search(numbers, x):","def linear_search(numbers, x):
    """"""This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.""""""
    for i in range(len(numbers)):
        if numbers[i] == x:
            return i 
    # if the number is not found
    return -1",Data Structure,2450,"def linear_search(numbers, x):
    """"""This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.""""""
    for i in range(len(numbers)):
        if numbers[i] == x:
            return i 
    # if the number is not found
    return -1","def linear_search(numbers, x):
    ___
    for i in range(len(numbers)):
        if numbers[i] == x:
            return i 
    # if the number is not found
    return -1"
Generate a Python program to output the maximum element in a given array.,"The array is [1, 4, 9, 3, 6, 5]","def findMax(arr):
    max_number = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_number:
            max_number = arr[i]
    return max_number

arr = [1, 4, 9, 3, 6, 5]
max_number = findMax(arr)
print(""The maximum element in the array is:"", max_number)",Data Structure,2455,"def findMax(arr):
    max_number = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_number:
            max_number = arr[i]
    return max_number

arr = [1, 4, 9, 3, 6, 5]
max_number = findMax(arr)
print(""The maximum element in the array is:"", max_number)","def findMax(arr):
    max_number = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_number:
            max_number = arr[i]
    return max_number

arr = [1, 4, 9, 3, 6, 5]
max_number = findMax(arr)
    ___"
Write a Python program that takes a list and prints out the items after sorting them in descending order.,"['apple', 'banana', 'cherry']","fruit = ['apple', 'banana', 'cherry'] 
fruit.sort(reverse=True)
print(fruit) # ['cherry', 'banana', 'apple']",Data Structure,2458,"fruit = ['apple', 'banana', 'cherry'] 
fruit.sort(reverse=True)
print(fruit) # ['cherry', 'banana', 'apple']","fruit = ['apple', 'banana', 'cherry'] 
    ___
print(fruit) # ['cherry', 'banana', 'apple']"
Write a code in Python for computing the maximum difference between any two elements in an array.,"Array: [2, 9, 4, 1, 5]","def max_difference(arr): 
  
    max_diff = 0
    for i in range(0, len(arr)): 
        for j in range(i+1, len(arr)): 
            diff = arr[j]-arr[i] 
            if(diff > max_diff): 
                max_diff = diff 
  
    return max_diff 
  
array = [2, 9, 4, 1, 5]
  
print(""Maximum difference ="", max_difference(array))",Data Structure,2461,"def max_difference(arr): 
  
    max_diff = 0
    for i in range(0, len(arr)): 
        for j in range(i+1, len(arr)): 
            diff = arr[j]-arr[i] 
            if(diff > max_diff): 
                max_diff = diff 
  
    return max_diff 
  
array = [2, 9, 4, 1, 5]
  
print(""Maximum difference ="", max_difference(array))","def max_difference(arr): 
  
    max_diff = 0
    for i in range(0, len(arr)): 
        for j in range(i+1, len(arr)): 
            diff = arr[j]-arr[i] 
            if(diff > max_diff): 
                max_diff = diff 
  
    return max_diff 
  
    ___
  
    ___"
Sort an array in ascending order using Python.,"8, 16, 7, 15, 1","def myFunc(arr): 
    arr.sort()
    return arr
  
arr = [8, 16, 7, 15, 1]
x = myFunc(arr)
print(x)",Data Structure,2493,"def myFunc(arr): 
    arr.sort()
    return arr
  
arr = [8, 16, 7, 15, 1]
x = myFunc(arr)
print(x)","def myFunc(arr): 
    ___
    return arr
  
arr = [8, 16, 7, 15, 1]
x = myFunc(arr)
print(x)"
Generate a Python program to delete the element at a given index from the given array.,"[1,2,3,4,5], index=3","def delete_element_at_index(arr, index):
    if index >= len(arr):
        raise Exception('index out of range')
    
    # Delete the element at the index
    del arr[index]

# Example array and index
my_arr = [1,2,3,4,5];
index = 3;

# Call the function
delete_element_at_index(my_arr, index)

# Print the array
print(my_arr)",Data Structure,2501,"def delete_element_at_index(arr, index):
    if index >= len(arr):
        raise Exception('index out of range')
    
    # Delete the element at the index
    del arr[index]

# Example array and index
my_arr = [1,2,3,4,5];
index = 3;

# Call the function
delete_element_at_index(my_arr, index)

# Print the array
print(my_arr)","    ___
    ___
    ___
    
    ___
    ___

    ___
my_arr = [1,2,3,4,5];
    ___

# Call the function
    ___

    ___
print(my_arr)"
Edit the following Python code to sort a list of numbers in reversed order.,"numbers = [15, 2, 5, 12, 8]",numbers.sort(reverse=True),Data Structure,2507,numbers.sort(reverse=True),    ___
Write a python function to remove duplicates from an array.,"[1, 2, 3, 3, 3, 4, 5, 6]","""""""
Remove duplicates from an array
""""""

def remove_duplicates(arr):
    # Create a set 
    seen = set()
    
    # Traverse the array
    for i in range(len(arr)):
        if arr[i] not in seen:
            seen.add(arr[i])
            
    return seen

if __name__ == '__main__':
    arr = [1, 2, 3, 3, 3, 4, 5, 6]
    print(remove_duplicates(arr))",Data Structure,2528,"""""""
Remove duplicates from an array
""""""

def remove_duplicates(arr):
    # Create a set 
    seen = set()
    
    # Traverse the array
    for i in range(len(arr)):
        if arr[i] not in seen:
            seen.add(arr[i])
            
    return seen

if __name__ == '__main__':
    arr = [1, 2, 3, 3, 3, 4, 5, 6]
    print(remove_duplicates(arr))","""""""
    ___
""""""

def remove_duplicates(arr):
    # Create a set 
    seen = set()
    
    ___
    for i in range(len(arr)):
        if arr[i] not in seen:
            seen.add(arr[i])
            
    return seen

if __name__ == '__main__':
    arr = [1, 2, 3, 3, 3, 4, 5, 6]
    print(remove_duplicates(arr))"
Create a Python program to search for a given query from a given array of strings using regular expressions.,"query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']","import re

query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']

for string in string_array:
    if re.search(query, string):
        print(string)

# Output:
# abc
# abcd
# abcde",Data Structure,2543,"import re

query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']

for string in string_array:
    if re.search(query, string):
        print(string)

# Output:
# abc
# abcd
# abcde","import re

query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']

for string in string_array:
    ___
        print(string)

# Output:
# abc
# abcd
# abcde"
Write an algorithm in Python to sort an array of numbers in descending order.,"[13, 11, 7, 4, 2]","def descendingSort(arr): 
    arr.sort(reverse=True) 
    return arr
  
arr = [13, 11, 7, 4, 2]
result = descendingSort(arr) 
  
print (result)",Data Structure,2552,"def descendingSort(arr): 
    arr.sort(reverse=True) 
    return arr
  
arr = [13, 11, 7, 4, 2]
result = descendingSort(arr) 
  
print (result)","def descendingSort(arr): 
    ___
    return arr
  
arr = [13, 11, 7, 4, 2]
result = descendingSort(arr) 
  
print (result)"
"Create a script in Python which receives a list of numbers, and prints the sorted list in ascending order.","List of numbers: [7, 3, 4, 2]","list_of_numbers = [7, 3, 4, 2]

# sort the list
list_of_numbers.sort()

# print the sorted list
print(list_of_numbers)",Data Structure,2567,"list_of_numbers = [7, 3, 4, 2]

# sort the list
list_of_numbers.sort()

# print the sorted list
print(list_of_numbers)","list_of_numbers = [7, 3, 4, 2]

    ___
    ___

# print the sorted list
print(list_of_numbers)"
Generate a Python program to insert an element into a given sorted array.,"The sorted array is [1, 2, 3, 5] and the new element is 4.","def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array and element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)",Data Structure,2571,"def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array and element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)","    ___
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
    ___
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
    ___
  
    ___
print(arr)"
Suggest a Python code to identify the median element of a given list,"example_list = [10,20,30,40]","def find_median(example_list):
    example_list.sort()
    if len(example_list) % 2 == 0:
        median = (example_list[int(len(example_list)/2)-1] + example_list[int(len(example_list)/2)])/2
    else:
        median = example_list[int((len(example_list)-1)/2)]
    return median",Data Structure,2575,"def find_median(example_list):
    example_list.sort()
    if len(example_list) % 2 == 0:
        median = (example_list[int(len(example_list)/2)-1] + example_list[int(len(example_list)/2)])/2
    else:
        median = example_list[int((len(example_list)-1)/2)]
    return median","def find_median(example_list):
    ___
    if len(example_list) % 2 == 0:
        median = (example_list[int(len(example_list)/2)-1] + example_list[int(len(example_list)/2)])/2
    else:
        median = example_list[int((len(example_list)-1)/2)]
    return median"
Implement an algorithm in Python to sort a list of integers.,"List: [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]","def sort(arr):
 for i in range(len(arr)):
 min_idx = i
 for j in range(i+1, len(arr)):
 if arr[min_idx] > arr[j]:
 min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

list = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]
sort(list)
print(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",Data Structure,2576,"def sort(arr):
 for i in range(len(arr)):
 min_idx = i
 for j in range(i+1, len(arr)):
 if arr[min_idx] > arr[j]:
 min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

list = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]
sort(list)
print(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","    ___
 for i in range(len(arr)):
 min_idx = i
 for j in range(i+1, len(arr)):
 if arr[min_idx] > arr[j]:
 min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

list = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]
    ___
print(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Create a Python program to sort a given list according to the second element,"list = [[2,4], [3,2], [4,1], [1,3]]","def sortList(list):
    list.sort(key=lambda x: x[1]) 
    return list

list = [[2,4], [3,2], [4,1], [1,3]]
sorted_list = sortList(list)

print(sorted_list)

# output
[[4, 1], [3, 2], [1, 3], [2, 4]]",Data Structure,2586,"def sortList(list):
    list.sort(key=lambda x: x[1]) 
    return list

list = [[2,4], [3,2], [4,1], [1,3]]
sorted_list = sortList(list)

print(sorted_list)

# output
[[4, 1], [3, 2], [1, 3], [2, 4]]","def sortList(list):
    ___
    return list

list = [[2,4], [3,2], [4,1], [1,3]]
sorted_list = sortList(list)

print(sorted_list)

# output
[[4, 1], [3, 2], [1, 3], [2, 4]]"
Generate a program in Python for sorting the elements of an array in descending order.,"[2, 4, 1, 6, 5]","def sort_descending(arr):
    # Sort array from largest to smallest
    arr.sort(reverse=True)

    # Print result
    print(arr)

# Test
arr = [2, 4, 1, 6, 5]
sort_descending(arr)
# Output: [6, 5, 4, 2, 1]",Data Structure,2595,"def sort_descending(arr):
    # Sort array from largest to smallest
    arr.sort(reverse=True)

    # Print result
    print(arr)

# Test
arr = [2, 4, 1, 6, 5]
sort_descending(arr)
# Output: [6, 5, 4, 2, 1]","def sort_descending(arr):
    ___
    ___

    # Print result
    print(arr)

# Test
arr = [2, 4, 1, 6, 5]
sort_descending(arr)
# Output: [6, 5, 4, 2, 1]"
Compose a line of Python code to insert an element into a given list.,"list1 = [1, 3, 7, 8]
element = 5","list1 = [1, 3, 7, 8]
element = 5

list1.insert(2, element)
print(""New list:"", list1)",Data Structure,2661,"list1 = [1, 3, 7, 8]
element = 5

list1.insert(2, element)
print(""New list:"", list1)","list1 = [1, 3, 7, 8]
element = 5

    ___
print(""New list:"", list1)"
Compose a function to find the maximum value in an array in Python.,"[1, 4, 2]","def find_max_value(arr):
    max_value = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_value = arr[i]
    return max_value

array = [1,4,2]
res = find_max_value(array)
print (res)",Data Structure,2668,"def find_max_value(arr):
    max_value = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_value = arr[i]
    return max_value

array = [1,4,2]
res = find_max_value(array)
print (res)","def find_max_value(arr):
    max_value = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_value = arr[i]
    return max_value

    ___
    ___
print (res)"
Write a Python program to create a 1D array of random numbers from 1 to 100.,5,"import random

# Create a 1-dimensional array of size 5
array = [0] * 5

# Fill the array with random numbers
for i in range(len(array)):
 array[i] = random.randint(1,100)

print(array)

# Output:
# [83, 5, 46, 69, 89]",Data Structure,2685,"import random

# Create a 1-dimensional array of size 5
array = [0] * 5

# Fill the array with random numbers
for i in range(len(array)):
 array[i] = random.randint(1,100)

print(array)

# Output:
# [83, 5, 46, 69, 89]","import random

    ___
    ___

    ___
    ___
    ___

    ___

# Output:
# [83, 5, 46, 69, 89]"
Create a program that takes a numerical array and returns a reversed array in Python.,"[1,2,3,4,5]","def reverse_array(array):
    reversed_array = array[::-1]
    return reversed_array

reversed_array = reverse_array([1,2,3,4,5])
print(reversed_array)",Data Structure,2710,"def reverse_array(array):
    reversed_array = array[::-1]
    return reversed_array

reversed_array = reverse_array([1,2,3,4,5])
print(reversed_array)","    ___
    ___
    return reversed_array

reversed_array = reverse_array([1,2,3,4,5])
print(reversed_array)"
Write a function to remove every other element in a Python list in place.,"[1, 2, 3, 4, 5, 6]","def remove_other_list_elements_inplace(list_elements):
    list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1]
    return list_elements 

sample_list = [1,2,3,4,5,6]
print(""Original List:"", sample_list) 

remove_other_list_elements_inplace(sample_list)
print(""Modified List:"", sample_list)",Data Structure,2727,"def remove_other_list_elements_inplace(list_elements):
    list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1]
    return list_elements 

sample_list = [1,2,3,4,5,6]
print(""Original List:"", sample_list) 

remove_other_list_elements_inplace(sample_list)
print(""Modified List:"", sample_list)","def remove_other_list_elements_inplace(list_elements):
    ___
    return list_elements 

sample_list = [1,2,3,4,5,6]
print(""Original List:"", sample_list) 

remove_other_list_elements_inplace(sample_list)
print(""Modified List:"", sample_list)"
Create a function in Python that takes a list of integers as input and returns a list of the sorted integers.,"[5, 7, 3, 2, 9]","def sort_list_of_integers(lst):
    lst.sort()
    return lst

print(sort_list_of_integers([5, 7, 3, 2, 9])) # Output: [2, 3, 5, 7, 9]",Data Structure,2729,"def sort_list_of_integers(lst):
    lst.sort()
    return lst

print(sort_list_of_integers([5, 7, 3, 2, 9])) # Output: [2, 3, 5, 7, 9]","def sort_list_of_integers(lst):
    ___
    return lst

print(sort_list_of_integers([5, 7, 3, 2, 9])) # Output: [2, 3, 5, 7, 9]"
"Given the following array of numbers, write a Python code snippet to sort it in descending order.","[9, 2, 4, 7, 6]","numbers = [9, 2, 4, 7, 6]
numbers.sort(reverse=True)
print(numbers)",Data Structure,2744,"numbers = [9, 2, 4, 7, 6]
numbers.sort(reverse=True)
print(numbers)","numbers = [9, 2, 4, 7, 6]
    ___
print(numbers)"
Generate a Python script to sort the given list of words.,"['bubble', 'selection', 'quicksort', 'insertion']","# function to sort the given list of words
def sort_words(words):
    # sort the list of words in alphabetical order
    words.sort()

    # print the sorted list of words
    print(words)

# driver code
words = ['bubble', 'selection', 'quicksort', 'insertion']
sort_words(words)

# output
['bubble', 'insertion', 'quicksort', 'selection']",Data Structure,2756,"# function to sort the given list of words
def sort_words(words):
    # sort the list of words in alphabetical order
    words.sort()

    # print the sorted list of words
    print(words)

# driver code
words = ['bubble', 'selection', 'quicksort', 'insertion']
sort_words(words)

# output
['bubble', 'insertion', 'quicksort', 'selection']","    ___
def sort_words(words):
    ___
    ___

    # print the sorted list of words
    print(words)

# driver code
words = ['bubble', 'selection', 'quicksort', 'insertion']
sort_words(words)

# output
['bubble', 'insertion', 'quicksort', 'selection']"
Create a Python script to sort a list of tuples by the second element in the tuple in ascending order.,"myList = [('Tom',7),('Harry',5),('Bob',8)]","def sortList(myList): 
 # sort list by second element  
 myList.sort(key = lambda x: x[1]) 
  
 # printing the sorted list  
 print (""The sorted list in ascending order is : "") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)",Data Structure,2786,"def sortList(myList): 
 # sort list by second element  
 myList.sort(key = lambda x: x[1]) 
  
 # printing the sorted list  
 print (""The sorted list in ascending order is : "") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)","def sortList(myList): 
    ___
    ___
  
 # printing the sorted list  
 print (""The sorted list in ascending order is : "") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)"
Write a Python script to implement an iterator that iterates over a given array.,"[2, 5, 6, 8, 9]","def iterator(array):
  index = 0
  while (index < len(array)):
    yield array[index]
    index += 1

given_array = [2, 5, 6, 8, 9]
iterating = iterator(given_array)

for value in iterating:
  print(value)",Data Structure,2798,"def iterator(array):
  index = 0
  while (index < len(array)):
    yield array[index]
    index += 1

given_array = [2, 5, 6, 8, 9]
iterating = iterator(given_array)

for value in iterating:
  print(value)","    ___
    ___
    ___
    ___
    ___

given_array = [2, 5, 6, 8, 9]
iterating = iterator(given_array)

for value in iterating:
  print(value)"
Create a function in Python to initialize an array with two parameters.,"params: (4, 5)","def initialize_array(rows, cols): 
    array = [[0 for i in range(cols)] for j in range(rows)]
    return array",Data Structure,2805,"def initialize_array(rows, cols): 
    array = [[0 for i in range(cols)] for j in range(rows)]
    return array","def initialize_array(rows, cols): 
    ___
    ___"
Create a Python code snippet to calculate the average of the following array.,"items = [1, 5, 6, 4, 8, 9]","def get_average(array):
    array_length = len(array)
    total_sum = 0
    for i in array:
        total_sum += i
    average = total_sum / array_length
    return average

print(get_average(items))",Data Structure,2810,"def get_average(array):
    array_length = len(array)
    total_sum = 0
    for i in array:
        total_sum += i
    average = total_sum / array_length
    return average

print(get_average(items))","    ___
    ___
    total_sum = 0
    ___
        total_sum += i
    average = total_sum / array_length
    return average

print(get_average(items))"
Create a Python function to remove duplicate elements from a given array.,"array = [1, 2, 5, 2, 1, 9]","def remove_duplicates(array): 
    result = set() 
    for element in array: 
        result.add(element) 
  
    return list(result) 
  
result = remove_duplicates(array) 
print(result)",Data Structure,2815,"def remove_duplicates(array): 
    result = set() 
    for element in array: 
        result.add(element) 
  
    return list(result) 
  
result = remove_duplicates(array) 
print(result)","    ___
    result = set() 
    ___
        result.add(element) 
  
    return list(result) 
  
    ___
print(result)"
Create a Python script that orders a list of strings alphabetically from a to z.,"[""Banana"", ""Apple"", ""Orange"", ""Pear""]","def sort_list(list):
    list.sort()
    return list

sorted_list = sort_list([""Banana"", ""Apple"", ""Orange"", ""Pear""])
print(sorted_list)",Data Structure,2871,"def sort_list(list):
    list.sort()
    return list

sorted_list = sort_list([""Banana"", ""Apple"", ""Orange"", ""Pear""])
print(sorted_list)","def sort_list(list):
    ___
    return list

sorted_list = sort_list([""Banana"", ""Apple"", ""Orange"", ""Pear""])
print(sorted_list)"
Use Python to sort the list of words in descending alphabetical order.,"correct, tango, apple, banana","words = [""correct"", ""tango"", ""apple"", ""banana""] 

# Sort words in reverse alphabetical order 
words.sort(reverse=True) 

# Print list in descending order 
print(words)",Data Structure,2879,"words = [""correct"", ""tango"", ""apple"", ""banana""] 

# Sort words in reverse alphabetical order 
words.sort(reverse=True) 

# Print list in descending order 
print(words)","words = [""correct"", ""tango"", ""apple"", ""banana""] 

# Sort words in reverse alphabetical order 
    ___

# Print list in descending order 
print(words)"
Write a python program to sort a given list of tuples based on its first element in increasing order.,"[(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')]","def sortTuplesByFirstElement(lst):
    lst.sort(key = lambda x: x[0])
    return lst

sortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])
print(sortedList)",Data Structure,2918,"def sortTuplesByFirstElement(lst):
    lst.sort(key = lambda x: x[0])
    return lst

sortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])
print(sortedList)","def sortTuplesByFirstElement(lst):
    ___
    return lst

sortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])
print(sortedList)"
Can you write a Python program that finds the second largest element in the given array by sorting it?,"arr = [6, 1, 35, 65, 4]","arr.sort()
second_largest = arr[-2] # 35",Data Structure,2926,"arr.sort()
second_largest = arr[-2] # 35","    ___
second_largest = arr[-2] # 35"
Create a Python function to sort an array of numbers based on their size.,"[5, 1, 2, 6, 4, 3]","def sort_array(arr):
    arr.sort()
    return arr",Data Structure,2953,"def sort_array(arr):
    arr.sort()
    return arr","def sort_array(arr):
    ___
    return arr"
Write a Python program to detect the most frequently occurring element in a given array.,"array = [1, 3, 1, 4, 5, 3, 4, 3]","from collections import Counter

def most_frequent_element(array):
  return Counter(array).most_common(1)[0][0]
  
# Driver code 
print(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))",Data Structure,2954,"from collections import Counter

def most_frequent_element(array):
  return Counter(array).most_common(1)[0][0]
  
# Driver code 
print(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))","from collections import Counter

    ___
    ___
  
# Driver code 
print(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))"
Write a Python function that takes an array of integers as input and computes the average of the elements.,"array = [1, 2, 3, 4]","def compute_average(arr):
 sum = 0
 for i in arr:
 sum += i
 return sum / len(arr)
 
 arr = [1, 2, 3, 4]
 avg = compute_average(arr)
 print(""Average of array elements is:"", avg)",Data Structure,2961,"def compute_average(arr):
 sum = 0
 for i in arr:
 sum += i
 return sum / len(arr)
 
 arr = [1, 2, 3, 4]
 avg = compute_average(arr)
 print(""Average of array elements is:"", avg)","def compute_average(arr):
 sum = 0
 for i in arr:
 sum += i
 return sum / len(arr)
 
 arr = [1, 2, 3, 4]
 avg = compute_average(arr)
    ___"
Generate a Python program that adds a given number to an array.,Number: 5,"def add_to_array(num, array):
  for i in range(len(array)):
    array[i] += num

  return array",Data Structure,2966,"def add_to_array(num, array):
  for i in range(len(array)):
    array[i] += num

  return array","    ___
    ___
    ___

    ___"
Write a function in Python to return the kth smallest element in the given array.,"arr = [7, 10, 4, 3, 20, 15]
k=3","def find_kth_smallest(arr, k):
    """"""
    This function finds the kth smallest element in an array. 
    :param arr: array of integers
    :param k: integer
    :return: kth smallest element
    """"""
    sorted_arr = sorted(arr)
    return sorted_arr[k-1]",Data Structure,2969,"def find_kth_smallest(arr, k):
    """"""
    This function finds the kth smallest element in an array. 
    :param arr: array of integers
    :param k: integer
    :return: kth smallest element
    """"""
    sorted_arr = sorted(arr)
    return sorted_arr[k-1]","def find_kth_smallest(arr, k):
    """"""
    ___
    ___
    :param k: integer
    :return: kth smallest element
    """"""
    sorted_arr = sorted(arr)
    return sorted_arr[k-1]"
Create a Python program that computes the median of an array of numbers.,"[5, 4, 3, 2, 1]","def median(array):
    sorted_array = sorted(array)
    length = len(sorted_array)
    if (length % 2 == 0):
        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2
    else:
        median = sorted_array[length//2]

    return median

array = [5, 4, 3, 2, 1]
print(median(array))  # Output: 3",Data Structure,2974,"def median(array):
    sorted_array = sorted(array)
    length = len(sorted_array)
    if (length % 2 == 0):
        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2
    else:
        median = sorted_array[length//2]

    return median

array = [5, 4, 3, 2, 1]
print(median(array))  # Output: 3","    ___
    ___
    length = len(sorted_array)
    if (length % 2 == 0):
        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2
    else:
        median = sorted_array[length//2]

    return median

    ___
    ___"
Design an algorithm in Python that sorts an unordered array of numbers from low to high.,"[2, 5, 1, 8, 7, 4]","def sort(arr): 
  for i in range(len(arr)): 
    minIdx = i 
    for j in range(i+1, len(arr)): 
      if arr[minIdx] > arr[j]: 
        minIdx = j       
    arr[i], arr[minIdx] = arr[minIdx], arr[i]
  return arr",Data Structure,2975,"def sort(arr): 
  for i in range(len(arr)): 
    minIdx = i 
    for j in range(i+1, len(arr)): 
      if arr[minIdx] > arr[j]: 
        minIdx = j       
    arr[i], arr[minIdx] = arr[minIdx], arr[i]
  return arr","    ___
  for i in range(len(arr)): 
    minIdx = i 
    for j in range(i+1, len(arr)): 
      if arr[minIdx] > arr[j]: 
        minIdx = j       
    arr[i], arr[minIdx] = arr[minIdx], arr[i]
  return arr"
Generate an efficient python code which finds the most frequent element in an array.,"arr = [3, 2, 1, 3, 4, 2]","# Find the most frequent element in the array
most_freq = 0
count = 0

for x in arr:
    freq = arr.count(x)
    if freq > count:
        most_freq = x
        count = freq

# Print the most frequent element
print(""Most frequent element:"",most_freq)",Data Structure,2977,"# Find the most frequent element in the array
most_freq = 0
count = 0

for x in arr:
    freq = arr.count(x)
    if freq > count:
        most_freq = x
        count = freq

# Print the most frequent element
print(""Most frequent element:"",most_freq)","    ___
most_freq = 0
count = 0

for x in arr:
    freq = arr.count(x)
    if freq > count:
        most_freq = x
        count = freq

# Print the most frequent element
print(""Most frequent element:"",most_freq)"
Develop a Python program to calculate the largest sum of a consecutive sequence of n numbers given in an array.,"array = [1, 2, -5, 4, 5, 7, -8]","def max_consecutive_sum(array):
    max_val = 0
    cur_man = 0
    for x in array:
        cur_man = max(cur_man + x, 0)
        max_val = max(cur_man, max_val)
    return max_val",Data Structure,2989,"def max_consecutive_sum(array):
    max_val = 0
    cur_man = 0
    for x in array:
        cur_man = max(cur_man + x, 0)
        max_val = max(cur_man, max_val)
    return max_val","    ___
    max_val = 0
    cur_man = 0
    ___
        cur_man = max(cur_man + x, 0)
        max_val = max(cur_man, max_val)
    return max_val"
Create a Python program that takes in an array of arrays of numbers as an argument and returns a new array with each of the inner arrays multiplied by its index in the outer array.,"[[1, 2, 3], [4, 5, 6]]","def arrayMultiplied(arr):
 resultArr = []
 for index, innerArr in enumerate(arr):
  resultArr.append([x * index for x in innerArr])
 return resultArr

print(arrayMultiplied([[1, 2, 3], [4, 5, 6]]))
# Output: [[0, 2, 6], [0, 5, 12]]",Data Structure,3028,"def arrayMultiplied(arr):
 resultArr = []
 for index, innerArr in enumerate(arr):
  resultArr.append([x * index for x in innerArr])
 return resultArr

print(arrayMultiplied([[1, 2, 3], [4, 5, 6]]))
# Output: [[0, 2, 6], [0, 5, 12]]","def arrayMultiplied(arr):
 resultArr = []
    ___
    ___
 return resultArr

print(arrayMultiplied([[1, 2, 3], [4, 5, 6]]))
# Output: [[0, 2, 6], [0, 5, 12]]"
Write a Python function to find the index of the smallest integer in a list.,"[1, 4, 7, 8, 10]","def find_smallest_int(lst):
  min_index = 0
  for index, num in enumerate(lst):
    if num < lst[min_index]:
      min_index = index
  return min_index

lst = [1, 4, 7, 8, 10]
smallest_int_index = find_smallest_int(lst)
print(""Index of the smallest integer:"", smallest_int_index)",Data Structure,3039,"def find_smallest_int(lst):
  min_index = 0
  for index, num in enumerate(lst):
    if num < lst[min_index]:
      min_index = index
  return min_index

lst = [1, 4, 7, 8, 10]
smallest_int_index = find_smallest_int(lst)
print(""Index of the smallest integer:"", smallest_int_index)","def find_smallest_int(lst):
  min_index = 0
    ___
    if num < lst[min_index]:
    ___
  return min_index

lst = [1, 4, 7, 8, 10]
smallest_int_index = find_smallest_int(lst)
print(""Index of the smallest integer:"", smallest_int_index)"
Create a function in Python to move a list of items from one list to another.,"list1 = [2, 4, 6, 8, 10]
list2 = [1, 3, 5, 7, 9]","def move_items(list1, list2): 
    for item in list1: 
        list2.append(item) 
    for i in range(len(list1)): 
        list1.pop() 

list1 = [2, 4, 6, 8, 10]
list2 = [1, 3, 5, 7, 9] 

move_items(list1, list2) 

print(""List 1 = "", list1) 
print(""List 2 = "", list2)",Data Structure,3040,"def move_items(list1, list2): 
    for item in list1: 
        list2.append(item) 
    for i in range(len(list1)): 
        list1.pop() 

list1 = [2, 4, 6, 8, 10]
list2 = [1, 3, 5, 7, 9] 

move_items(list1, list2) 

print(""List 1 = "", list1) 
print(""List 2 = "", list2)","def move_items(list1, list2): 
    for item in list1: 
        list2.append(item) 
    for i in range(len(list1)): 
    ___

list1 = [2, 4, 6, 8, 10]
list2 = [1, 3, 5, 7, 9] 

move_items(list1, list2) 

print(""List 1 = "", list1) 
print(""List 2 = "", list2)"
Construct a python program which takes in input the size of a jagged array and prints it(no values).,<noInpit>,"def print_jagged_array(array_size):    
    # Initialize a jagged array with the given size
    array = [None] * array_size
    
    # Populate the array with empty arrays
    for i in range(array_size):
        array[i] = []
    
    # Print the output array
    print(array)

if __name__ == ""__main__"":
    array_size = 4
    print_jagged_array(array_size)",Data Structure,3067,"def print_jagged_array(array_size):    
    # Initialize a jagged array with the given size
    array = [None] * array_size
    
    # Populate the array with empty arrays
    for i in range(array_size):
        array[i] = []
    
    # Print the output array
    print(array)

if __name__ == ""__main__"":
    array_size = 4
    print_jagged_array(array_size)","def print_jagged_array(array_size):    
    ___
    ___
    
    ___
    for i in range(array_size):
    ___
    
    ___
    ___

if __name__ == ""__main__"":
    array_size = 4
    print_jagged_array(array_size)"
"Craft a program in Python to take in a list of integers, and return the sum of the even numbers in the list.","[1, 2, 3, 4, 5]","def sum_even(arr):
    '''
    Function to calculate the sum of even numbers in an array
    
    Parameters
    arr: list of integers
    
    Returns
    sum of even numbers in the array
    '''
    total = 0
    for num in arr:
        if num % 2 == 0:
            total += num
    return total",Data Structure,3096,"def sum_even(arr):
    '''
    Function to calculate the sum of even numbers in an array
    
    Parameters
    arr: list of integers
    
    Returns
    sum of even numbers in the array
    '''
    total = 0
    for num in arr:
        if num % 2 == 0:
            total += num
    return total","def sum_even(arr):
    '''
    ___
    
    Parameters
    arr: list of integers
    
    Returns
    ___
    '''
    total = 0
    for num in arr:
        if num % 2 == 0:
            total += num
    return total"
"Create a function in Python that takes two parameters, an array and an integer, and returns a new array with all of the elements of the array multiplied by the integer.","array = [1, 2, 3]
int = 4","def multiply_by_int(array, int):
    new_array = []
    for elem in array:
        new_array.append(elem * int)
    return new_array",Data Structure,3132,"def multiply_by_int(array, int):
    new_array = []
    for elem in array:
        new_array.append(elem * int)
    return new_array","    ___
    new_array = []
    ___
        new_array.append(elem * int)
    return new_array"
Design a Python program to find the sum of the two largest numbers in a list.,"[1, 3, 5, 7, 9]","def find_sum_of_largest(lst):
  lst.sort()
  return lst[-1] + lst[-2]

print(find_sum_of_largest([1, 3, 5, 7, 9]))",Data Structure,3158,"def find_sum_of_largest(lst):
  lst.sort()
  return lst[-1] + lst[-2]

print(find_sum_of_largest([1, 3, 5, 7, 9]))","def find_sum_of_largest(lst):
    ___
  return lst[-1] + lst[-2]

print(find_sum_of_largest([1, 3, 5, 7, 9]))"
Generate a code to create an array in python of size n.,n = 5,array = [None] * n,Data Structure,3159,array = [None] * n,    ___
Develop a Python code which can search for a name in a list and return the position of the name in the list.,"[""John"", ""Richard"", ""Paul"", ""Ringo""]","def search(name_list, name): 
    for i in range(len(name_list)): 
        if name_list[i] == name: 
            return i 
    return -1",Data Structure,3162,"def search(name_list, name): 
    for i in range(len(name_list)): 
        if name_list[i] == name: 
            return i 
    return -1","    ___
    for i in range(len(name_list)): 
        if name_list[i] == name: 
            return i 
    return -1"
Create a Python script to search a list of words for a given word and return its index.,"words = ['GPT', 'model', 'natural', 'language', 'processing'], search = 'language'","def search(words, search):
    for i, word in enumerate(words):
        if word == search:
            return i
    return -1

index = search(words, 'language')
print(index)",Data Structure,3191,"def search(words, search):
    for i, word in enumerate(words):
        if word == search:
            return i
    return -1

index = search(words, 'language')
print(index)","    ___
    for i, word in enumerate(words):
    ___
            return i
    return -1

    ___
    ___"
Create a class in Python with a method to sort the given array in an ascending order.,"[3, 2, 5, 1, 4]","class Sort: 
    def sort_arr(self, arr):
        arr.sort()
        return arr",Data Structure,3205,"class Sort: 
    def sort_arr(self, arr):
        arr.sort()
        return arr","class Sort: 
    def sort_arr(self, arr):
    ___
        return arr"
Design a linear search algorithm in Python that returns the index of an item in an array.,"arr = [1,2,3,4,5]","def linear_search(arr, target):
    """"""
    Searches through a given input array to find the index of a provided target number.
    Returns -1 if the target number is not found.
    """"""
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1",Data Structure,3213,"def linear_search(arr, target):
    """"""
    Searches through a given input array to find the index of a provided target number.
    Returns -1 if the target number is not found.
    """"""
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1","def linear_search(arr, target):
    """"""
    ___
    Returns -1 if the target number is not found.
    """"""
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1"
Create a script in Python that can sort the following list of items alphabetically.,"list = ['car', 'apple', 'ball', 'Boat']","def sortAlpha(list):
    list.sort()
    return list",Data Structure,3244,"def sortAlpha(list):
    list.sort()
    return list","def sortAlpha(list):
    ___
    return list"
Write an algorithm in Python that identifies and removes duplicates from a given array.,"Array = [2, 3, 4, 3, 2]","def removeDuplicates(array):
 result = []

 for number in array:
 if number not in result:
 result.append(number)

 return result

array = [2, 3, 4, 3, 2]
print(removeDuplicates(array))",Data Structure,3247,"def removeDuplicates(array):
 result = []

 for number in array:
 if number not in result:
 result.append(number)

 return result

array = [2, 3, 4, 3, 2]
print(removeDuplicates(array))","    ___
 result = []

    ___
 if number not in result:
 result.append(number)

 return result

    ___
    ___"
Write a code in Python to display a sorted array of the numbers in an array that are greater than the given value.,"[2, 4, 6, 8, 10, 12]
Given number: 6","def sort_greater_numbers(arr, num):
    result = [x for x in arr if  x > num]
    result.sort()
    return result",Data Structure,3278,"def sort_greater_numbers(arr, num):
    result = [x for x in arr if  x > num]
    result.sort()
    return result","def sort_greater_numbers(arr, num):
    result = [x for x in arr if  x > num]
    ___
    return result"
Write a Python script that sorts a list of tuples in descending order based on the second element of each tuple.,"[('a', 3), ('b', 1), ('c', 4)]","def sortTupleListInDescendingOrder(tuple_list):
    tuple_list.sort(key=lambda tup: tup[1], reverse=True)
    return tuple_list

sorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)])

print(sorted_list)",Data Structure,3302,"def sortTupleListInDescendingOrder(tuple_list):
    tuple_list.sort(key=lambda tup: tup[1], reverse=True)
    return tuple_list

sorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)])

print(sorted_list)","def sortTupleListInDescendingOrder(tuple_list):
    ___
    return tuple_list

sorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)])

print(sorted_list)"
Create a Python program that reads in an unsorted array of integers and prints the array in sorted order.,"[3, 2, 5, 1, 7, 4]","def sort_array(arr):
   arr.sort()
   return arr

arr = [3, 2, 5, 1, 7, 4]

sorted_arr = sort_array(arr)
print(sorted_arr) # [1, 2, 3, 4, 5, 7]",Data Structure,3334,"def sort_array(arr):
   arr.sort()
   return arr

arr = [3, 2, 5, 1, 7, 4]

sorted_arr = sort_array(arr)
print(sorted_arr) # [1, 2, 3, 4, 5, 7]","def sort_array(arr):
    ___
   return arr

arr = [3, 2, 5, 1, 7, 4]

sorted_arr = sort_array(arr)
print(sorted_arr) # [1, 2, 3, 4, 5, 7]"
Write a Python program to sort the input list according to its length.,"list = [""Hello"", ""World"", ""This is a test""]","list = [""Hello"", ""World"", ""This is a test""]

def sort_list_length(list):
    '''
    Function to sort the list according to its length
    '''
    return sorted(list, key=len)

if __name__ == ""__main__"":
    list = [""Hello"", ""World"", ""This is a test""]
    sorted_list = sort_list_length(list)
    print(sorted_list)",Data Structure,3358,"list = [""Hello"", ""World"", ""This is a test""]

def sort_list_length(list):
    '''
    Function to sort the list according to its length
    '''
    return sorted(list, key=len)

if __name__ == ""__main__"":
    list = [""Hello"", ""World"", ""This is a test""]
    sorted_list = sort_list_length(list)
    print(sorted_list)","list = [""Hello"", ""World"", ""This is a test""]

def sort_list_length(list):
    '''
    ___
    '''
    return sorted(list, key=len)

if __name__ == ""__main__"":
    list = [""Hello"", ""World"", ""This is a test""]
    sorted_list = sort_list_length(list)
    print(sorted_list)"
Write a Python program to filter a list and sort it in descending order by length.,"a = [""apple"", ""ball"", ""cat"", ""dog"", ""elephant"", ""frog"", ""giraffe""]","a.sort(key=len, reverse=True)
# Output: ['elephant', 'giraffe', 'ball', 'apple', 'dog', 'cat', 'frog']",Data Structure,3367,"a.sort(key=len, reverse=True)
# Output: ['elephant', 'giraffe', 'ball', 'apple', 'dog', 'cat', 'frog']","    ___
# Output: ['elephant', 'giraffe', 'ball', 'apple', 'dog', 'cat', 'frog']"
Generate a Python program to search an element in an array.,"[2, 4, 6, 8], 8","def searchElement(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i
    return -1
    
arr = [2, 4, 6, 8]
x = 8

result = searchElement(arr, x) 

if(result == -1): 
  print(""Element is not present in array"") 
else: 
  print(""Element is present at index"", result)",Data Structure,3401,"def searchElement(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i
    return -1
    
arr = [2, 4, 6, 8]
x = 8

result = searchElement(arr, x) 

if(result == -1): 
  print(""Element is not present in array"") 
else: 
  print(""Element is present at index"", result)","def searchElement(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i
    return -1
    
arr = [2, 4, 6, 8]
x = 8

result = searchElement(arr, x) 

if(result == -1): 
    ___
else: 
    ___"
Design a Python program to sort the given list using insertion sort.,"[3,8,15,2,6,10]","def insertionSort(arr): 
    for i in range(1, len(arr)): 
  
        j = i-1
        key = arr[i] 
  
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  
arr = [3,8,15,2,6,10]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])",Data Structure,3404,"def insertionSort(arr): 
    for i in range(1, len(arr)): 
  
        j = i-1
        key = arr[i] 
  
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  
arr = [3,8,15,2,6,10]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])","def insertionSort(arr): 
    for i in range(1, len(arr)): 
  
        j = i-1
        key = arr[i] 
  
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  
arr = [3,8,15,2,6,10]
insertionSort(arr) 
    ___
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Create a Python program to take a list of names and sort them alphabetically.,"['Adam', 'David', 'Mark', 'John', 'Sam']","def sort_names_alphabetically(names):
    names.sort()
    print(names)

names = ['Adam', 'David', 'Mark', 'John', 'Sam']
sort_names_alphabetically(names)

# Output: 
# ['Adam', 'David', 'John', 'Mark', 'Sam']",Data Structure,3435,"def sort_names_alphabetically(names):
    names.sort()
    print(names)

names = ['Adam', 'David', 'Mark', 'John', 'Sam']
sort_names_alphabetically(names)

# Output: 
# ['Adam', 'David', 'John', 'Mark', 'Sam']","def sort_names_alphabetically(names):
    ___
    print(names)

names = ['Adam', 'David', 'Mark', 'John', 'Sam']
sort_names_alphabetically(names)

# Output: 
# ['Adam', 'David', 'John', 'Mark', 'Sam']"
Develop a Python program to insert a given element into a specific position in a list,"2, [1, 3, 4]","# Create a function
def insert_element(el, lst):
    # Insert the element into the specific position
    lst.insert(2, el)
    return lst

# Test the function
print(insert_element(2, [1,3,4]))

# Output
[1, 3, 2, 4]",Data Structure,3440,"# Create a function
def insert_element(el, lst):
    # Insert the element into the specific position
    lst.insert(2, el)
    return lst

# Test the function
print(insert_element(2, [1,3,4]))

# Output
[1, 3, 2, 4]","# Create a function
def insert_element(el, lst):
    # Insert the element into the specific position
    ___
    return lst

# Test the function
print(insert_element(2, [1,3,4]))

# Output
[1, 3, 2, 4]"
Generate a function in Python to find the maximum element from a given array.,"[10, 15, 20, 11, 99]","def findMaxElement(array):
    maxElement = 0
    for element in array:
        if element > maxElement:
            maxElement = element
    return maxElement

array = [10, 15, 20, 11, 99] 
maxElement = findMaxElement(array)
print(""The maximum element in the array is"", maxElement)",Data Structure,3442,"def findMaxElement(array):
    maxElement = 0
    for element in array:
        if element > maxElement:
            maxElement = element
    return maxElement

array = [10, 15, 20, 11, 99] 
maxElement = findMaxElement(array)
print(""The maximum element in the array is"", maxElement)","    ___
    maxElement = 0
    ___
        if element > maxElement:
            maxElement = element
    return maxElement

    ___
    ___
    ___"
Create a script in Python to sort a list of names by alphabetical order.,"names = [""John"", ""Sara"", ""Joseph"", ""James""]","names.sort()
print(names)",Data Structure,3455,"names.sort()
print(names)","    ___
print(names)"
Design a program in Python which takes an array of words as input and return an alphabetically ordered array of the words.,"[""apple"",""banana"",""grapes""]","def sortAlphabetically(arr):
    arr.sort()
    return arr

print(sortAlphabetically([""apple"",""banana"",""grapes""]))",Data Structure,3466,"def sortAlphabetically(arr):
    arr.sort()
    return arr

print(sortAlphabetically([""apple"",""banana"",""grapes""]))","def sortAlphabetically(arr):
    ___
    return arr

print(sortAlphabetically([""apple"",""banana"",""grapes""]))"
Construct a Python program to sort an array in descending order.,"arr = [4, 5, 2, 6, 1, 3]","def descending_sort(arr): 
    for i in range(len(arr)): 
        for j in range(0, len(arr)-i-1): 
            if arr[j] < arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
  
arr = [4, 5, 2, 6, 1, 3]
  
descending_sort(arr)

print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])",Data Structure,3508,"def descending_sort(arr): 
    for i in range(len(arr)): 
        for j in range(0, len(arr)-i-1): 
            if arr[j] < arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
  
arr = [4, 5, 2, 6, 1, 3]
  
descending_sort(arr)

print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])","def descending_sort(arr): 
    for i in range(len(arr)): 
        for j in range(0, len(arr)-i-1): 
            if arr[j] < arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
  
arr = [4, 5, 2, 6, 1, 3]
  
descending_sort(arr)

    ___
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Create a function in Python to search a list for a given item.,"list = [1, 2, 3, 4, 5, 6]
item = 4","def search_list(lst, item): 
    for i in range(len(lst)): 
        if lst[i] == item: 
            return i 
    return -1

idx = search_list(list, item) 
if idx == -1: 
    print(""Item not found"")
else:
    print(""Item found at index"", idx)",Data Structure,3515,"def search_list(lst, item): 
    for i in range(len(lst)): 
        if lst[i] == item: 
            return i 
    return -1

idx = search_list(list, item) 
if idx == -1: 
    print(""Item not found"")
else:
    print(""Item found at index"", idx)","def search_list(lst, item): 
    for i in range(len(lst)): 
        if lst[i] == item: 
            return i 
    return -1

idx = search_list(list, item) 
if idx == -1: 
    print(""Item not found"")
else:
    ___"
Write a python code to sort the given array of numbers in ascending order.,"[3, 5, 1, 6, 9, 4]","""""""
Sort array of numbers in ascending order
""""""

def sort_in_ascending(arr):
    arr.sort()
    return arr

if __name__==""__main__"":
    arr = [3, 5, 1, 6, 9, 4]
    sorted_arr = sort_in_ascending(arr)
    print(""Sorted array in ascending order is ""+str(sorted_arr))",Data Structure,3517,"""""""
Sort array of numbers in ascending order
""""""

def sort_in_ascending(arr):
    arr.sort()
    return arr

if __name__==""__main__"":
    arr = [3, 5, 1, 6, 9, 4]
    sorted_arr = sort_in_ascending(arr)
    print(""Sorted array in ascending order is ""+str(sorted_arr))","""""""
    ___
""""""

def sort_in_ascending(arr):
    ___
    return arr

if __name__==""__main__"":
    arr = [3, 5, 1, 6, 9, 4]
    sorted_arr = sort_in_ascending(arr)
    ___"
Create a python program to insert a new element into a given list in the correct order,"Input List: [1, 2, 3, 4]
Element: 0","def insert_element(array, element):
    if element >= array[len(array)-1]:
        array.append(element)
    else:
        for i in range(len(array)):
            if element < array[i]:
                array.insert(i, element)
                break
    return array",Data Structure,3540,"def insert_element(array, element):
    if element >= array[len(array)-1]:
        array.append(element)
    else:
        for i in range(len(array)):
            if element < array[i]:
                array.insert(i, element)
                break
    return array","    ___
    ___
    ___
    else:
    ___
    ___
    ___
                break
    ___"
Write a script in Python to sort a list of words alphabetically.,"[python, java, c, sql, ruby]","def sort_words(words):
    '''
    Function to sort a list of words alphabetically
    
    Parameters
    words: list of strings
    
    Returns
    sorted list of strings
    '''
    sorted_list = sorted(words)
    return sorted_list",Data Structure,3543,"def sort_words(words):
    '''
    Function to sort a list of words alphabetically
    
    Parameters
    words: list of strings
    
    Returns
    sorted list of strings
    '''
    sorted_list = sorted(words)
    return sorted_list","def sort_words(words):
    '''
    ___
    
    Parameters
    words: list of strings
    
    Returns
    sorted list of strings
    '''
    sorted_list = sorted(words)
    return sorted_list"
Write a python script to sort the given array,"[10, 15, 7, 8, 12]","arr = [10, 15, 7, 8, 12]
arr.sort()
print(arr)",Data Structure,3544,"arr = [10, 15, 7, 8, 12]
arr.sort()
print(arr)","arr = [10, 15, 7, 8, 12]
    ___
print(arr)"
Generate a valid Python script which calculates the median of a given  list of numbers.,"my_list = [1, 8, 4, 9, 5]","def median(my_list):
  my_list.sort()
  if len(my_list) % 2 == 0:
    return (my_list[(len(my_list) // 2) - 1] + my_list[(len(my_list)) // 2]) / 2
  return my_list[len(my_list) // 2]",Data Structure,3546,"def median(my_list):
  my_list.sort()
  if len(my_list) % 2 == 0:
    return (my_list[(len(my_list) // 2) - 1] + my_list[(len(my_list)) // 2]) / 2
  return my_list[len(my_list) // 2]","def median(my_list):
    ___
  if len(my_list) % 2 == 0:
    return (my_list[(len(my_list) // 2) - 1] + my_list[(len(my_list)) // 2]) / 2
  return my_list[len(my_list) // 2]"
Sort a given list of integers in Python in ascending order.,"list_of_integers = [5, 8, 1, 4, 0, 2, 7]",list_of_integers.sort(),Data Structure,3549,list_of_integers.sort(),    ___
"Create a function in Python that takes a list as input and searches for a number ""x"" and returns the index of it.","[10, 8 , 5, 15], x = 15","def search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

arr = [10, 8 , 5, 15]
x = 15
print(search(arr, x))",Data Structure,3557,"def search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

arr = [10, 8 , 5, 15]
x = 15
print(search(arr, x))","    ___
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

arr = [10, 8 , 5, 15]
x = 15
    ___"
Write a Python program to search for a specific value in a large array of integers and return the index of the value if found.,"arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 8","def search(arr, target):
 for i in range(len(arr)):
  if arr[i] == target:
   return i
 return -1
  
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 8
index = search(arr, target)
if index != -1:
 print(""Found at index: "" + str(index))
else:
 print(""Not Found"")",Data Structure,3559,"def search(arr, target):
 for i in range(len(arr)):
  if arr[i] == target:
   return i
 return -1
  
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 8
index = search(arr, target)
if index != -1:
 print(""Found at index: "" + str(index))
else:
 print(""Not Found"")","    ___
 for i in range(len(arr)):
  if arr[i] == target:
   return i
 return -1
  
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 8
    ___
    ___
    ___
else:
 print(""Not Found"")"
Write a Python program for searching for a particular item in a list.,"[1, 5, 4, 6, 9, 10], item = 6","def search(input_list, item):
  for i in range(len(input_list)):
    if item == input_list[i]:
      return i
  
  return -1

if __name__ == '__main__':
  input_list = [1, 5, 4, 6, 9, 10]
  item = 6
  result = search(input_list, item)
  print(result)",Data Structure,3590,"def search(input_list, item):
  for i in range(len(input_list)):
    if item == input_list[i]:
      return i
  
  return -1

if __name__ == '__main__':
  input_list = [1, 5, 4, 6, 9, 10]
  item = 6
  result = search(input_list, item)
  print(result)","    ___
  for i in range(len(input_list)):
    if item == input_list[i]:
      return i
  
  return -1

if __name__ == '__main__':
  input_list = [1, 5, 4, 6, 9, 10]
  item = 6
    ___
  print(result)"
Write a Python program to sort a given list of numbers and return the sorted list,"list_of_numbers = [2, 3, 5, 8, 1, 4]","list_of_numbers = [2, 3, 5, 8, 1, 4]

def sort_list(list_of_numbers): 
    list_of_numbers.sort() 
    return list_of_numbers

sorted_list = sort_list(list_of_numbers) 
print(sorted_list)",Data Structure,3613,"list_of_numbers = [2, 3, 5, 8, 1, 4]

def sort_list(list_of_numbers): 
    list_of_numbers.sort() 
    return list_of_numbers

sorted_list = sort_list(list_of_numbers) 
print(sorted_list)","list_of_numbers = [2, 3, 5, 8, 1, 4]

def sort_list(list_of_numbers): 
    ___
    return list_of_numbers

sorted_list = sort_list(list_of_numbers) 
print(sorted_list)"
Opitmize a Python program to search a list of numbers for a given target number.,"list = [10,20,30,40,50]
target = 40","def search(list, target):
  
 for i in range(len(list)):
  if list[i] == target:
   return i
 return -1

list = [10,20,30,40,50]
target = 40

# linear search in list

index = search(list, target)

if index != -1:
 print(""Element found at index :"", index)
else:
 print(""Element not found"")",Data Structure,3621,"def search(list, target):
  
 for i in range(len(list)):
  if list[i] == target:
   return i
 return -1

list = [10,20,30,40,50]
target = 40

# linear search in list

index = search(list, target)

if index != -1:
 print(""Element found at index :"", index)
else:
 print(""Element not found"")","    ___
  
 for i in range(len(list)):
  if list[i] == target:
   return i
 return -1

list = [10,20,30,40,50]
target = 40

    ___

    ___

    ___
    ___
else:
 print(""Element not found"")"
Generate a function in Python that returns the index of the first occurrence of a given number in an array.,"[1, 4, 6, 9], 5","def first_occurrence(arr, num):
    '''Returns index of the first occurrence of num in an array.'''
    for i in range(len(arr)):
        if(arr[i] == num):
            return i
    return -1

arr = [1, 4, 6, 9]
num = 5

first_occurrence(arr, num) # -1",Data Structure,3624,"def first_occurrence(arr, num):
    '''Returns index of the first occurrence of num in an array.'''
    for i in range(len(arr)):
        if(arr[i] == num):
            return i
    return -1

arr = [1, 4, 6, 9]
num = 5

first_occurrence(arr, num) # -1","def first_occurrence(arr, num):
    ___
    for i in range(len(arr)):
        if(arr[i] == num):
            return i
    return -1

arr = [1, 4, 6, 9]
num = 5

first_occurrence(arr, num) # -1"
Create a function to sort the below list of numbers in ascending order in Python.,"[3,7,1,9,2]","def sorting_ascending(lst): 
    lst.sort() 
    return lst",Data Structure,3638,"def sorting_ascending(lst): 
    lst.sort() 
    return lst","def sorting_ascending(lst): 
    ___
    return lst"
Generate a Python script that sorts a given array of integers.,"Array: <10, 8, 1, 4, 6, 5>","def array_sort(array):
  # Iterate over the array
  for i in range(len(array)):
    # Find the minimum element
    min_position = i
    for j in range(i + 1, len(array)):
      if array[min_position] > array[j]:
        min_position = j

    # Swap minimum element to current position
    array[i], array[min_position] = array[min_position], array[i]
  
  return array",Data Structure,3639,"def array_sort(array):
  # Iterate over the array
  for i in range(len(array)):
    # Find the minimum element
    min_position = i
    for j in range(i + 1, len(array)):
      if array[min_position] > array[j]:
        min_position = j

    # Swap minimum element to current position
    array[i], array[min_position] = array[min_position], array[i]
  
  return array","    ___
    ___
    ___
    # Find the minimum element
    min_position = i
    ___
    ___
        min_position = j

    # Swap minimum element to current position
    ___
  
    ___"
Write a Python program to iterate through a list and return the index of the maximum of all the even numbers in the list.,"[1, 5, 8, 10, 3, 13, 21, 24]","def find_max_even_index(lst):
  max_even = None
  index = -1
  
  for i, num in enumerate(lst):
    if num % 2 == 0 and (max_even is None or num > max_even):
      max_even = num
      index = i
  
  return index",Data Structure,3647,"def find_max_even_index(lst):
  max_even = None
  index = -1
  
  for i, num in enumerate(lst):
    if num % 2 == 0 and (max_even is None or num > max_even):
      max_even = num
      index = i
  
  return index","def find_max_even_index(lst):
  max_even = None
    ___
  
  for i, num in enumerate(lst):
    if num % 2 == 0 and (max_even is None or num > max_even):
      max_even = num
    ___
  
    ___"
Generate a python program to sort a list of numbers,"array = [4, 2, 6, 7, 1]","def sort_list(array): 
    n = len(array) 
  
    for i in range(n): 
  
        min_idx = i 
        for j in range(i+1, n): 
            if array[min_idx] > array[j]: 
                min_idx = j 
        array[i], array[min_idx] = array[min_idx], array[i]

if __name__ == ""__main__"":
    array = [4, 2, 6, 7, 1]
    sort_list(array)
    print(array)",Data Structure,3650,"def sort_list(array): 
    n = len(array) 
  
    for i in range(n): 
  
        min_idx = i 
        for j in range(i+1, n): 
            if array[min_idx] > array[j]: 
                min_idx = j 
        array[i], array[min_idx] = array[min_idx], array[i]

if __name__ == ""__main__"":
    array = [4, 2, 6, 7, 1]
    sort_list(array)
    print(array)","    ___
    ___
  
    for i in range(n): 
  
        min_idx = i 
        for j in range(i+1, n): 
    ___
                min_idx = j 
    ___

if __name__ == ""__main__"":
    ___
    ___
    ___"
Create a Python program which sorts elements of an array in ascending order.,"[5, 2, 1, 3, 6, 4]","def sort_ascending(array):
    for i in range(len(array)-1):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]

    return array

sort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]",Data Structure,3669,"def sort_ascending(array):
    for i in range(len(array)-1):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]

    return array

sort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]","    ___
    ___
    ___
    ___
    ___

    ___

sort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]"
Write a script in Python that takes an array of numbers as parameter and returns the minimum and maximum values.,"array=[4, 6, 3, 2, 8, 10]","def min_max(array):
    min = array[0]
    max = array[0]

    for value in array:
        if value < min:
            min = value
        elif value > max:
            max = value
    
    return min, max

array=[4, 6, 3, 2, 8, 10]

min, max = min_max(array)

print(""Minimum: "", min)
print(""Maximum: "", max)",Data Structure,3684,"def min_max(array):
    min = array[0]
    max = array[0]

    for value in array:
        if value < min:
            min = value
        elif value > max:
            max = value
    
    return min, max

array=[4, 6, 3, 2, 8, 10]

min, max = min_max(array)

print(""Minimum: "", min)
print(""Maximum: "", max)","    ___
    ___
    ___

    ___
        if value < min:
            min = value
        elif value > max:
            max = value
    
    return min, max

    ___

    ___

print(""Minimum: "", min)
print(""Maximum: "", max)"
"Using the given input, sort a list containing both numerical and strings data types in Python.","[1, 'c', 3, 'a', 2, 'b']","# define list 
lst = [1, 'c', 3, 'a', 2, 'b']

# sort list
sorted_lst = sorted(lst, key=lambda x:str(x))

# print sorted list
print(sorted_lst)",Data Structure,3699,"# define list 
lst = [1, 'c', 3, 'a', 2, 'b']

# sort list
sorted_lst = sorted(lst, key=lambda x:str(x))

# print sorted list
print(sorted_lst)","# define list 
lst = [1, 'c', 3, 'a', 2, 'b']

    ___
sorted_lst = sorted(lst, key=lambda x:str(x))

# print sorted list
print(sorted_lst)"
Write a python function to search a list of numbers for a given number and output the position if found.,"numbers=[1,2,3,4,5], search=3","def search_list(numbers, search):
    for index, num in enumerate(numbers):
        if num == search:
            return index
    return -1",Data Structure,3730,"def search_list(numbers, search):
    for index, num in enumerate(numbers):
        if num == search:
            return index
    return -1","    ___
    ___
    ___
    ___
    return -1"
Design a Python solution to find the position of a given element in a list.,"List: ['a', 'b', 'c', 'd']
Element: 'd'","def find_index(arr, element):
    for index, value in enumerate(arr): 
        if value == element: 
            return index
    return -1
  
arr = ['a', 'b', 'c', 'd']
element = 'd'
print(find_index(arr, element)) # Output: 3",Data Structure,3775,"def find_index(arr, element):
    for index, value in enumerate(arr): 
        if value == element: 
            return index
    return -1
  
arr = ['a', 'b', 'c', 'd']
element = 'd'
print(find_index(arr, element)) # Output: 3","def find_index(arr, element):
    ___
        if value == element: 
    ___
    return -1
  
arr = ['a', 'b', 'c', 'd']
element = 'd'
print(find_index(arr, element)) # Output: 3"
"Given an array of integers, write a function in Python to search for a given number in the array.","array = [1, 5, 8, 9], number = 5","def search_in_array(array, number):
    for element in array:
        if element == number:
            return True
    return False

array = [1, 5, 8, 9]
number = 5
result = search_in_array(array, number)
if result:
    print(""Number found"")
else:
    print(""Number not found"")",Data Structure,3776,"def search_in_array(array, number):
    for element in array:
        if element == number:
            return True
    return False

array = [1, 5, 8, 9]
number = 5
result = search_in_array(array, number)
if result:
    print(""Number found"")
else:
    print(""Number not found"")","    ___
    ___
        if element == number:
            return True
    return False

    ___
number = 5
    ___
if result:
    print(""Number found"")
else:
    print(""Number not found"")"
Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array.,"array = [6, -3, -10, 0, 2]","def maxProduct(arr): 
    n = len(arr) 
    max_prod = 0
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if arr[i] > 0 and arr[j] > 0: 
                max_prod = max(max_prod, arr[i] * arr[j]) 
  
    return max_prod 

# Input
array = [6, -3, -10, 0, 2]

# Output
result = maxProduct(array)
print(result)",Data Structure,3782,"def maxProduct(arr): 
    n = len(arr) 
    max_prod = 0
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if arr[i] > 0 and arr[j] > 0: 
                max_prod = max(max_prod, arr[i] * arr[j]) 
  
    return max_prod 

# Input
array = [6, -3, -10, 0, 2]

# Output
result = maxProduct(array)
print(result)","def maxProduct(arr): 
    n = len(arr) 
    max_prod = 0
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if arr[i] > 0 and arr[j] > 0: 
                max_prod = max(max_prod, arr[i] * arr[j]) 
  
    return max_prod 

# Input
    ___

# Output
    ___
print(result)"
Modify this Python program to sort a given list of numbers.,"numbers = [2, 3, 4, 5, 1]","numbers.sort()
print(numbers) # prints [1, 2, 3, 4, 5]",Data Structure,3786,"numbers.sort()
print(numbers) # prints [1, 2, 3, 4, 5]","    ___
print(numbers) # prints [1, 2, 3, 4, 5]"
"Using the input, create a Python program which generates a random array of length n filled with binary values.",n = 10,"import random

def random_binary_array(n):
    """"""Return a random array of length n with binary values.""""""
    array = []
    for i in range(n):
        array.append(random.choice([0, 1]))
    return array",Data Structure,3792,"import random

def random_binary_array(n):
    """"""Return a random array of length n with binary values.""""""
    array = []
    for i in range(n):
        array.append(random.choice([0, 1]))
    return array","import random

def random_binary_array(n):
    ___
    ___
    for i in range(n):
    ___
    ___"
Fill in the blanks to create a Python program to calculate the total number of words in a list.,"words = [""Hello"", ""World"", ""!""]","words = [""Hello"", ""World"", ""!""]

total_words = 0
for word in words:
____ total_words = total_words + ____

print(total_words)

# Output: 3

total_words = 0
for word in words:
    length = len(word)
    total_words = total_words + length

print(total_words)

# Output: 3",Data Structure,3846,"words = [""Hello"", ""World"", ""!""]

total_words = 0
for word in words:
____ total_words = total_words + ____

print(total_words)

# Output: 3

total_words = 0
for word in words:
    length = len(word)
    total_words = total_words + length

print(total_words)

# Output: 3","words = [""Hello"", ""World"", ""!""]

total_words = 0
for word in words:
____ total_words = total_words + ____

print(total_words)

# Output: 3

total_words = 0
for word in words:
    length = len(word)
    total_words = total_words + length

print(total_words)

# Output: 3"
Create a searching algorithm in Python to find a target element in a list of integers.,"target = 7
elements = [1, 2, 3, 4, 5, 6, 7, 8]","def search(target, elements):
  start = 0 
  end = len(elements) - 1

  while start <= end:
    mid = (start + end) // 2 
      
    if target == elements[mid]: 
      return True 
  
    elif target < elements[mid]: 
      end = mid - 1

    else: 
      start = mid + 1
    
  return False",Data Structure,3849,"def search(target, elements):
  start = 0 
  end = len(elements) - 1

  while start <= end:
    mid = (start + end) // 2 
      
    if target == elements[mid]: 
      return True 
  
    elif target < elements[mid]: 
      end = mid - 1

    else: 
      start = mid + 1
    
  return False","    ___
  start = 0 
  end = len(elements) - 1

  while start <= end:
    mid = (start + end) // 2 
      
    if target == elements[mid]: 
      return True 
  
    elif target < elements[mid]: 
      end = mid - 1

    else: 
      start = mid + 1
    
  return False"
Create a Python class that takes a list as input and returns a sorted list as output.,"[5, 2, 7, 3]","class SortList:
    def __init__(self, lst):
        self.lst = lst
        
    def sort_list(self):
        self.lst.sort()
        return self.lst",Data Structure,3857,"class SortList:
    def __init__(self, lst):
        self.lst = lst
        
    def sort_list(self):
        self.lst.sort()
        return self.lst","class SortList:
    def __init__(self, lst):
        self.lst = lst
        
    def sort_list(self):
    ___
        return self.lst"
Write a function in Python to sort the given list of strings based on the length of the words in ascending order.,"[""apple"", ""mango"", ""banana"", ""cherry""]","def sort_by_word_length(word_list):
	""""""
	Function to sort a given list of strings 
	based on the length of the words in ascending order.
	@param word_list: list
	@return: list
	""""""
    return sorted(word_list, key=lambda x: len(x))",Data Structure,3863,"def sort_by_word_length(word_list):
	""""""
	Function to sort a given list of strings 
	based on the length of the words in ascending order.
	@param word_list: list
	@return: list
	""""""
    return sorted(word_list, key=lambda x: len(x))","def sort_by_word_length(word_list):
	""""""
    ___
	based on the length of the words in ascending order.
	@param word_list: list
	@return: list
	""""""
    return sorted(word_list, key=lambda x: len(x))"
Optimize a Python function that returns the value at the index of an array (list) of size n.,"[20, 30, 50, 70, 90]","def getValueAtIndex(arr, index):
    return arr[index] if index >= 0 and index < len(arr) else 0

print(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70",Data Structure,3876,"def getValueAtIndex(arr, index):
    return arr[index] if index >= 0 and index < len(arr) else 0

print(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70","    ___
    ___

print(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70"
Create a Python code snippet to return the index of a given item from a list.,"list_of_numbers = [3, 6, 8, 4, 9, 2]
item = 6","item_index = list_of_numbers.index(item)
print(item_index) # Prints 1",Data Structure,3881,"item_index = list_of_numbers.index(item)
print(item_index) # Prints 1","    ___
print(item_index) # Prints 1"
Generate a Python program that implements Linear Search with a list of integers as input.,"sampleList = [5, 2, 3, 8, 0]","def linearSearch(sampleList, x):
 for i in range(len(sampleList)):
 if sampleList[i] == x:
 return i 

return -1

# Driver code
x = 5
result = linearSearch(sampleList, x)

if result == -1:
 print(""Element not found"")
else:
 print(""Element found at index"", result)",Data Structure,3883,"def linearSearch(sampleList, x):
 for i in range(len(sampleList)):
 if sampleList[i] == x:
 return i 

return -1

# Driver code
x = 5
result = linearSearch(sampleList, x)

if result == -1:
 print(""Element not found"")
else:
 print(""Element found at index"", result)","def linearSearch(sampleList, x):
 for i in range(len(sampleList)):
 if sampleList[i] == x:
 return i 

return -1

# Driver code
x = 5
result = linearSearch(sampleList, x)

if result == -1:
 print(""Element not found"")
else:
    ___"
Generate a program in python that searches for an element in the given list and returns its index.,"mylist = [1, 4, 5, 8, 9]
element = 5","def search_list(mylist, element):
  
  for i in range(len(mylist)):
    if mylist[i] == element:
      return i
  
  return -1

mylist = [1, 4, 5, 8, 9]
element = 5

index = search_list(mylist, element)

if index == -1:
  print(""Element not found."")
else:
  print(""Element found at index:"", index)",Data Structure,3890,"def search_list(mylist, element):
  
  for i in range(len(mylist)):
    if mylist[i] == element:
      return i
  
  return -1

mylist = [1, 4, 5, 8, 9]
element = 5

index = search_list(mylist, element)

if index == -1:
  print(""Element not found."")
else:
  print(""Element found at index:"", index)","def search_list(mylist, element):
  
  for i in range(len(mylist)):
    if mylist[i] == element:
      return i
  
  return -1

mylist = [1, 4, 5, 8, 9]
element = 5

    ___

    ___
  print(""Element not found."")
else:
    ___"
Create a program in Python which can calculate the median of an array of integers.,"[3, 5, 7, 4, 8, 1, 9]","def median(arr):
    arr.sort()

    if len(arr) % 2 != 0:
        return arr[len(arr)//2]
    else: 
        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2

arr = [3, 5, 7, 4, 8, 1, 9]

med = median(arr)
print('Median of the given array is:', med)",Data Structure,3897,"def median(arr):
    arr.sort()

    if len(arr) % 2 != 0:
        return arr[len(arr)//2]
    else: 
        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2

arr = [3, 5, 7, 4, 8, 1, 9]

med = median(arr)
print('Median of the given array is:', med)","def median(arr):
    ___

    if len(arr) % 2 != 0:
        return arr[len(arr)//2]
    else: 
        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2

arr = [3, 5, 7, 4, 8, 1, 9]

med = median(arr)
    ___"
Create an algorithm in Python that takes an array of strings and sorts them in alphabetical order.,"['Jan', 'June', 'Raju', 'April']","def alphabeticalSort(arr):
    arr.sort()
    return arr

result = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])
print(result)",Data Structure,3904,"def alphabeticalSort(arr):
    arr.sort()
    return arr

result = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])
print(result)","def alphabeticalSort(arr):
    ___
    return arr

result = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])
print(result)"
Write a Python program to sort a list of integers in ascending order.,"list=[4,2,3,5,1]","list = [4, 2, 3, 5, 1]
list.sort()
print(list)",Data Structure,3908,"list = [4, 2, 3, 5, 1]
list.sort()
print(list)","list = [4, 2, 3, 5, 1]
    ___
print(list)"
Write a function in Python that takes two lists of integers and returns a single merged list with unique elements sorted in ascending order.,"list1 = [1, 2, 3, 4] 
list2 = [2, 4, 5, 6]","def merge_unique_sorted_lists(list1, list2):
	merged_list = list1+list2
	unique_list = list(set(merged_list))
	unique_list.sort()
	return unique_list",Data Structure,3918,"def merge_unique_sorted_lists(list1, list2):
	merged_list = list1+list2
	unique_list = list(set(merged_list))
	unique_list.sort()
	return unique_list","def merge_unique_sorted_lists(list1, list2):
	merged_list = list1+list2
	unique_list = list(set(merged_list))
    ___
	return unique_list"
Write a Python program to sort a list of lists of integers by the first element of the sublists. The list should be sorted in ascending order.,"[[2, 4, 6], [1, 9, 8], [3, 7, 5]]","def sortList(lst): 
    lst.sort(key = lambda x: x[0]) 
    return lst 
  
result = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) 
print(result)",Data Structure,3936,"def sortList(lst): 
    lst.sort(key = lambda x: x[0]) 
    return lst 
  
result = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) 
print(result)","def sortList(lst): 
    ___
    return lst 
  
result = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) 
print(result)"
Create a React component for displaying a list of strings.,"[ ""javascript"",""java"",""python""]","const List = ({ items }) => { 
  return ( 
    <ul> 
      {items.map(item => ( 
        <li> 
          {item} 
        </li> 
      ))} 
    </ul> 
  ) 
};

ReactDOM.render( 
  <List items={[ ""javascript"",""java"",""python""]} />, 
  document.getElementById('root') 
);",Data Structure,3948,"const List = ({ items }) => { 
  return ( 
    <ul> 
      {items.map(item => ( 
        <li> 
          {item} 
        </li> 
      ))} 
    </ul> 
  ) 
};

ReactDOM.render( 
  <List items={[ ""javascript"",""java"",""python""]} />, 
  document.getElementById('root') 
);","const List = ({ items }) => { 
  return ( 
    <ul> 
      {items.map(item => ( 
        <li> 
          {item} 
        </li> 
      ))} 
    </ul> 
  ) 
};

ReactDOM.render( 
  <List items={[ ""javascript"",""java"",""python""]} />, 
    ___
);"
Create a search algorithm in Python to find a target element in a given array.,"[1, 4, 6, 8, 10], target = 8","def search(arr, target): 
  for idx, num in enumerate(arr): 
    if num == target:
      return idx
  return -1

idx = search([1, 4, 6, 8, 10], 8)
print(idx)",Data Structure,3950,"def search(arr, target): 
  for idx, num in enumerate(arr): 
    if num == target:
      return idx
  return -1

idx = search([1, 4, 6, 8, 10], 8)
print(idx)","    ___
  for idx, num in enumerate(arr): 
    if num == target:
      return idx
  return -1

    ___
print(idx)"
Write a Python program to optimize a given array of integers such that each element is greater than or equal to the previous element in the array.,"[7, 2, 5, 8, 4, 0]","def optimize_array(array):
    optimized_array = []
    prev = -float(""inf"")
    for n in array:
        if(n>=prev):
            optimized_array.append(n)
            prev = n
    return optimized_array

array = [7, 2, 5, 8, 4, 0]
print(optimize_array(array))
# Output: [7, 5, 8, 4]",Data Structure,3961,"def optimize_array(array):
    optimized_array = []
    prev = -float(""inf"")
    for n in array:
        if(n>=prev):
            optimized_array.append(n)
            prev = n
    return optimized_array

array = [7, 2, 5, 8, 4, 0]
print(optimize_array(array))
# Output: [7, 5, 8, 4]","    ___
    optimized_array = []
    prev = -float(""inf"")
    ___
        if(n>=prev):
            optimized_array.append(n)
            prev = n
    return optimized_array

    ___
    ___
# Output: [7, 5, 8, 4]"
Develop a Python program to show the product of all odd number components in an array.,"[3,4,5,6,7]","""""""
Python program to show the product of all odd numbers in an array
""""""

def product_of_odds(arr):
    product = 1
    for num in arr:
        if num % 2 != 0:
            product *= num
    return product

if __name__ == '__main__':
    arr = [3, 4, 5, 6, 7]
    print(product_of_odds(arr)) # 105",Data Structure,3969,"""""""
Python program to show the product of all odd numbers in an array
""""""

def product_of_odds(arr):
    product = 1
    for num in arr:
        if num % 2 != 0:
            product *= num
    return product

if __name__ == '__main__':
    arr = [3, 4, 5, 6, 7]
    print(product_of_odds(arr)) # 105","""""""
    ___
""""""

def product_of_odds(arr):
    product = 1
    for num in arr:
        if num % 2 != 0:
            product *= num
    return product

if __name__ == '__main__':
    arr = [3, 4, 5, 6, 7]
    print(product_of_odds(arr)) # 105"
Write a code snippet in Python for sorting a given array of numbers in ascending order.,"[3, 7, 1, 5]","def sort_array(arr): 
    arr.sort() 
    return arr 

sort = sort_array([3, 7, 1, 5])

print(sort)",Data Structure,4000,"def sort_array(arr): 
    arr.sort() 
    return arr 

sort = sort_array([3, 7, 1, 5])

print(sort)","def sort_array(arr): 
    ___
    return arr 

    ___

    ___"
Create a machine learning algorithm in Python that takes a set of data points and classifies them into two distinct classes.,"Examples [[1,2], [-2,3], [-1,-4], [0,0]]","import numpy as np
from sklearn.svm import LinearSVC

X = np.array([[1, 2], [-2, 3], [-1, -4], [0, 0]])
# y = [1, -1, -1, 0]
y = np.array([1, -1, -1, 0])

clf = LinearSVC()
clf.fit(X, y)

# Predict the class of the points [[3, -1], [-2, 0]]
predictions = clf.predict([[3, -1], [-2, 0]])
# Output -> [1, -1]",Data Structure,4011,"import numpy as np
from sklearn.svm import LinearSVC

X = np.array([[1, 2], [-2, 3], [-1, -4], [0, 0]])
# y = [1, -1, -1, 0]
y = np.array([1, -1, -1, 0])

clf = LinearSVC()
clf.fit(X, y)

# Predict the class of the points [[3, -1], [-2, 0]]
predictions = clf.predict([[3, -1], [-2, 0]])
# Output -> [1, -1]","import numpy as np
from sklearn.svm import LinearSVC

    ___
# y = [1, -1, -1, 0]
    ___

clf = LinearSVC()
clf.fit(X, y)

# Predict the class of the points [[3, -1], [-2, 0]]
predictions = clf.predict([[3, -1], [-2, 0]])
# Output -> [1, -1]"
Write a Python program to arrange the following list in descending order,"[4,7,1,10,3]","arr = [4,7,1,10,3]

arr.sort(reverse=True)

print(arr)
# Output: [10, 7, 4, 3, 1]",Data Structure,4019,"arr = [4,7,1,10,3]

arr.sort(reverse=True)

print(arr)
# Output: [10, 7, 4, 3, 1]","arr = [4,7,1,10,3]

    ___

print(arr)
# Output: [10, 7, 4, 3, 1]"
Create a function in Python that takes a list of strings as an argument and sorts the strings in alphabetical order.,"[""Hello"", ""World"", ""Foo"", ""Bar""]","def sort_strings(strings):
    strings.sort()
    return strings",Data Structure,4021,"def sort_strings(strings):
    strings.sort()
    return strings","def sort_strings(strings):
    ___
    return strings"
Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.,"Input List: [('a', 3), ('b', 2), ('c', 1)]","def sort_list_tuples(tuples):
  # sort by the second element in each tuple
  return sorted(tuples, key=lambda x: x[1])

# test code
tuples = [('a', 3), ('b', 2), ('c', 1)] 
print(sort_list_tuples(tuples))",Data Structure,4047,"def sort_list_tuples(tuples):
  # sort by the second element in each tuple
  return sorted(tuples, key=lambda x: x[1])

# test code
tuples = [('a', 3), ('b', 2), ('c', 1)] 
print(sort_list_tuples(tuples))","def sort_list_tuples(tuples):
    ___
  return sorted(tuples, key=lambda x: x[1])

# test code
tuples = [('a', 3), ('b', 2), ('c', 1)] 
print(sort_list_tuples(tuples))"
Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?,"[""Hello"",""World!"",""Good"",""Morning""]","words = [""Hello"",""World!"",""Good"",""Morning""]

words.sort(key=len)

print(words)",Data Structure,4095,"words = [""Hello"",""World!"",""Good"",""Morning""]

words.sort(key=len)

print(words)","words = [""Hello"",""World!"",""Good"",""Morning""]

    ___

print(words)"
Construct a function in Python that will take a list as an argument and prompt the user to delete elements from that list.,"my_list = [1, 2, 3, 4, 5]","def delete_element(list): 
    print(""Original list: "" + str(list)) 
    element = int(input(""Please enter the element which you want to delete: ""))
    list.remove(element) 
    print(""List after deletion of element: "" + str(list))",Data Structure,4096,"def delete_element(list): 
    print(""Original list: "" + str(list)) 
    element = int(input(""Please enter the element which you want to delete: ""))
    list.remove(element) 
    print(""List after deletion of element: "" + str(list))","def delete_element(list): 
    print(""Original list: "" + str(list)) 
    ___
    list.remove(element) 
    print(""List after deletion of element: "" + str(list))"
Write an algorithm in Python to find the maximum element of a given array.,"[2, 7, 1, 6, 5]","def find_max_element(arr):
  
  max = arr[0]
  
  for i in range(1, len(arr)):
    # compare current max with the next array element
    if arr[i] > max:
      max = arr[i]
  
  return max

arr = [2, 7, 1, 6, 5]
max_element = find_max_element(arr)
print(""Max element in the array:"", max_element)",Data Structure,4100,"def find_max_element(arr):
  
  max = arr[0]
  
  for i in range(1, len(arr)):
    # compare current max with the next array element
    if arr[i] > max:
      max = arr[i]
  
  return max

arr = [2, 7, 1, 6, 5]
max_element = find_max_element(arr)
print(""Max element in the array:"", max_element)","def find_max_element(arr):
  
  max = arr[0]
  
  for i in range(1, len(arr)):
    ___
    if arr[i] > max:
      max = arr[i]
  
  return max

arr = [2, 7, 1, 6, 5]
max_element = find_max_element(arr)
    ___"
Write a Python code to sort the given array.,"array : [ 2, 4, 1, 3, 7, 5]","# Bubble sort algorithm
def sort_array(array):
    for i in range(len(array)):
        for j in range(len(array)-i-1):
            if array[j] > array[j+1]:
               array[j], array[j+1] = array[j+1], array[j]
    return array

# Sample array
array = [2, 4, 1, 3, 7, 5]

# Function call
sorted_array = sort_array(array)

# Print sorted output
print(sorted_array)",Data Structure,4108,"# Bubble sort algorithm
def sort_array(array):
    for i in range(len(array)):
        for j in range(len(array)-i-1):
            if array[j] > array[j+1]:
               array[j], array[j+1] = array[j+1], array[j]
    return array

# Sample array
array = [2, 4, 1, 3, 7, 5]

# Function call
sorted_array = sort_array(array)

# Print sorted output
print(sorted_array)","    ___
    ___
    ___
    ___
    ___
    ___
    ___

    ___
    ___

# Function call
    ___

# Print sorted output
print(sorted_array)"
Provide a Python program that sorts a list of strings based on the length of the strings.,"[""banana"", ""apple"", ""watermelon""]","my_list = [""banana"", ""apple"", ""watermelon""]
my_list.sort(key=len)

# my_list is now [""apple"", ""banana"", ""watermelon""]",Data Structure,4124,"my_list = [""banana"", ""apple"", ""watermelon""]
my_list.sort(key=len)

# my_list is now [""apple"", ""banana"", ""watermelon""]","my_list = [""banana"", ""apple"", ""watermelon""]
    ___

# my_list is now [""apple"", ""banana"", ""watermelon""]"
Produce a Python code section to calculate the average value for all elements of a given array.,"[2, 7, 5, 4]","array = [2, 7, 5, 4]

total = 0
for num in array:
 total += num
average = total/len(array)

print(""The average of the array is:"", average)",Data Structure,4132,"array = [2, 7, 5, 4]

total = 0
for num in array:
 total += num
average = total/len(array)

print(""The average of the array is:"", average)","    ___

total = 0
    ___
 total += num
    ___

    ___"
Design a Python program for finding the median of a given list of numbers.,"[7, 4, 5, 2, 10]","def find_median(lst):
    lst.sort()
    if len(lst)%2 == 0:
        median1 = lst[len(lst)//2]
        median2 = lst[len(lst)//2 - 1]
        median = float(median1 + median2) / 2
    else:
        median = lst[len(lst)//2]
    return median

result = find_median([7, 4, 5, 2, 10])
print(result)",Data Structure,4134,"def find_median(lst):
    lst.sort()
    if len(lst)%2 == 0:
        median1 = lst[len(lst)//2]
        median2 = lst[len(lst)//2 - 1]
        median = float(median1 + median2) / 2
    else:
        median = lst[len(lst)//2]
    return median

result = find_median([7, 4, 5, 2, 10])
print(result)","def find_median(lst):
    ___
    if len(lst)%2 == 0:
        median1 = lst[len(lst)//2]
        median2 = lst[len(lst)//2 - 1]
        median = float(median1 + median2) / 2
    else:
        median = lst[len(lst)//2]
    return median

result = find_median([7, 4, 5, 2, 10])
print(result)"
Write a Python program to classify a given array of numbers into even number and odd number arrays.,"my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]","# Create empty lists to store odd and even elements
odd_elements = []
even_elements = []

# Iterate through the array
for element in my_array:
    # Check if the element is even or odd
    if element % 2 == 0:
        even_elements.append(element)
    else:
        odd_elements.append(element)

print(odd_elements)
print(even_elements)",Data Structure,4174,"# Create empty lists to store odd and even elements
odd_elements = []
even_elements = []

# Iterate through the array
for element in my_array:
    # Check if the element is even or odd
    if element % 2 == 0:
        even_elements.append(element)
    else:
        odd_elements.append(element)

print(odd_elements)
print(even_elements)","# Create empty lists to store odd and even elements
odd_elements = []
even_elements = []

    ___
for element in my_array:
    # Check if the element is even or odd
    if element % 2 == 0:
        even_elements.append(element)
    else:
        odd_elements.append(element)

print(odd_elements)
print(even_elements)"
Implement a linear search algorithm in Python to search for an element in an array.,"arr = [2, 3, 4, 10, 40]
x = 10","def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
arr = [2, 3, 4, 10, 40] 
x = 10

result = linear_search(arr, x) 
if result == -1: 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)",Data Structure,4180,"def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
arr = [2, 3, 4, 10, 40] 
x = 10

result = linear_search(arr, x) 
if result == -1: 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)","def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
arr = [2, 3, 4, 10, 40] 
x = 10

result = linear_search(arr, x) 
if result == -1: 
    ___
else: 
    ___"
"Given a list of strings, write a Python snippet to sort the strings in ascending order according to word length.","[ ""Code"", ""Python"", ""JavaScript"", ""Java""]","strings = [""Code"", ""Python"", ""JavaScript"", ""Java""]

# sort the list by word length
strings.sort(key = lambda x: len(x))

print(strings)
# Output: [""Code"", ""Java"", ""Python"", ""JavaScript""]",Data Structure,4212,"strings = [""Code"", ""Python"", ""JavaScript"", ""Java""]

# sort the list by word length
strings.sort(key = lambda x: len(x))

print(strings)
# Output: [""Code"", ""Java"", ""Python"", ""JavaScript""]","strings = [""Code"", ""Python"", ""JavaScript"", ""Java""]

    ___
    ___

print(strings)
# Output: [""Code"", ""Java"", ""Python"", ""JavaScript""]"
Generate a Python code to sort a list of numbers.,"[100, 50, 30, 10, 7]","list = [100, 50, 30, 10, 7]
list.sort()
print(list) # Output: [7, 10, 30, 50, 100]",Data Structure,4219,"list = [100, 50, 30, 10, 7]
list.sort()
print(list) # Output: [7, 10, 30, 50, 100]","list = [100, 50, 30, 10, 7]
    ___
print(list) # Output: [7, 10, 30, 50, 100]"
Write a function in Python to return the indices of all occurrences of a given item in a list.,"list = [1,2,3,4,5,1,2,3,4,5]
item = 3","def find_all_occurrence_indices(list, item):
result = []
for index, number in enumerate(list):
if number == item:
result.append(index)
return result",Data Structure,4339,"def find_all_occurrence_indices(list, item):
result = []
for index, number in enumerate(list):
if number == item:
result.append(index)
return result","def find_all_occurrence_indices(list, item):
result = []
    ___
if number == item:
    ___
return result"
Develop a Python program to delete the third element of a given list.,"list = [""A"", ""B"", ""C"", ""D"", ""E""]","# Input list
list = [""A"", ""B"", ""C"", ""D"", ""E""]

# Deleting the third element
list.pop(2)

# Printing the list after deletion
print(list)
# Output: ['A', 'B', 'D', 'E']",Data Structure,4357,"# Input list
list = [""A"", ""B"", ""C"", ""D"", ""E""]

# Deleting the third element
list.pop(2)

# Printing the list after deletion
print(list)
# Output: ['A', 'B', 'D', 'E']","# Input list
list = [""A"", ""B"", ""C"", ""D"", ""E""]

# Deleting the third element
    ___

# Printing the list after deletion
print(list)
# Output: ['A', 'B', 'D', 'E']"
Generate a python program to alphabetically sort the following list.,"[""Paul"", ""John"", ""George"", ""Ringo""]","my_list = [""Paul"", ""John"", ""George"", ""Ringo""]
my_list.sort() 
print(my_list)",Data Structure,4447,"my_list = [""Paul"", ""John"", ""George"", ""Ringo""]
my_list.sort() 
print(my_list)","my_list = [""Paul"", ""John"", ""George"", ""Ringo""]
    ___
print(my_list)"
Implement a Python function to search for an item in an array.,"arr = [15, 20, 25, 30, 35]
item = 25","def search(arr, item):
    for i in range(len(arr)):
        if item == arr[i]:
            return i
    return -1

arr = [15, 20, 25, 30, 35]
item = 25
index = search(arr, item)
if index == -1:
    print(""Element not found"")
else:
    print(""Element found at index"", index)

# Output:
# Element found at index 2",Data Structure,4467,"def search(arr, item):
    for i in range(len(arr)):
        if item == arr[i]:
            return i
    return -1

arr = [15, 20, 25, 30, 35]
item = 25
index = search(arr, item)
if index == -1:
    print(""Element not found"")
else:
    print(""Element found at index"", index)

# Output:
# Element found at index 2","    ___
    for i in range(len(arr)):
        if item == arr[i]:
            return i
    return -1

arr = [15, 20, 25, 30, 35]
item = 25
    ___
    ___
    print(""Element not found"")
else:
    ___

# Output:
    ___"
Write an algorithm in Python that takes as input an array of numbers and returns the maximum element.,"[15, 25, 7, 1]","def maxElement(arr): 
    maxElement = arr[0]; 
  
    for i in range(1, len(arr)): 
        if maxElement < arr[i]: 
            maxElement = arr[i]; 
  
    return maxElement; 
  
arr = [15, 25, 7, 1];
maxElement = maxElement(arr); 
print (""Maximum element in the array is:"", maxElement);",Data Structure,4474,"def maxElement(arr): 
    maxElement = arr[0]; 
  
    for i in range(1, len(arr)): 
        if maxElement < arr[i]: 
            maxElement = arr[i]; 
  
    return maxElement; 
  
arr = [15, 25, 7, 1];
maxElement = maxElement(arr); 
print (""Maximum element in the array is:"", maxElement);","def maxElement(arr): 
    maxElement = arr[0]; 
  
    for i in range(1, len(arr)): 
        if maxElement < arr[i]: 
            maxElement = arr[i]; 
  
    return maxElement; 
  
arr = [15, 25, 7, 1];
maxElement = maxElement(arr); 
    ___"
Build a Python program that sorts a list of numbers from highest to lowest.,"[28, 5, 17, 10, 43]","def sort_numbers(numbers):
    numbers.sort(reverse=True)
    return numbers

numbers = [28, 5, 17, 10, 43]

sorted_numbers = sort_numbers(numbers)
print(sorted_numbers)",Data Structure,4503,"def sort_numbers(numbers):
    numbers.sort(reverse=True)
    return numbers

numbers = [28, 5, 17, 10, 43]

sorted_numbers = sort_numbers(numbers)
print(sorted_numbers)","def sort_numbers(numbers):
    ___
    return numbers

numbers = [28, 5, 17, 10, 43]

sorted_numbers = sort_numbers(numbers)
print(sorted_numbers)"
Create an algorithm in Python to sort a given list of integers from smallest to largest.,"[10, 7, 3, 5, 8]","def sort_list(numbers):
    numbers.sort()
    return numbers",Data Structure,4504,"def sort_list(numbers):
    numbers.sort()
    return numbers","def sort_list(numbers):
    ___
    return numbers"
Generate an algorithm in Python that returns the kth smallest number in a given array.,"Input Array: [3, 2, 4, 1, 5]
Input k: 3","def kthSmallest(arr, k):
 # sort the array
 arr.sort()
 
 # return the kth element
 return arr[k-1]
 
# Driver Code
arr = [3,2,4,1,5]
k = 3

print(kthSmallest(arr, k)) # 3",Data Structure,4545,"def kthSmallest(arr, k):
 # sort the array
 arr.sort()
 
 # return the kth element
 return arr[k-1]
 
# Driver Code
arr = [3,2,4,1,5]
k = 3

print(kthSmallest(arr, k)) # 3","def kthSmallest(arr, k):
    ___
    ___
 
 # return the kth element
 return arr[k-1]
 
# Driver Code
arr = [3,2,4,1,5]
k = 3

print(kthSmallest(arr, k)) # 3"
Create a Python function to sort a list of strings alphabetically.,"my_list = [""apple"", ""orange"", ""banana""]","def sort_list(list):
    list.sort()
    return list
    
sort_list(my_list)",Data Structure,4570,"def sort_list(list):
    list.sort()
    return list
    
sort_list(my_list)","def sort_list(list):
    ___
    return list
    
sort_list(my_list)"
Write a Python program to sort a list of words in ascending order based on their length.,"words = [""I"", ""am"", ""all"", ""ears""]","words = [""I"", ""am"", ""all"", ""ears""]

#sort the words by length
words.sort(key = len)

#print the sorted words
for word in words:
 print(word)

# Output
I
am
all
ears",Data Structure,4598,"words = [""I"", ""am"", ""all"", ""ears""]

#sort the words by length
words.sort(key = len)

#print the sorted words
for word in words:
 print(word)

# Output
I
am
all
ears","words = [""I"", ""am"", ""all"", ""ears""]

    ___
    ___

#print the sorted words
for word in words:
 print(word)

# Output
I
am
all
ears"
Create a python program that finds the number of elements between two given indices in a given list.,"list = [0, 4, 5, 8, 9]
start = 2
end = 4","def count_elements(list, start, end):
    elements_count = 0
    start_index = list.index(start)
    end_index = list.index(end)
    for i in range(start_index + 1, end_index):
        elements_count += 1
    return elements_count",Data Structure,4599,"def count_elements(list, start, end):
    elements_count = 0
    start_index = list.index(start)
    end_index = list.index(end)
    for i in range(start_index + 1, end_index):
        elements_count += 1
    return elements_count","def count_elements(list, start, end):
    elements_count = 0
    ___
    ___
    for i in range(start_index + 1, end_index):
        elements_count += 1
    return elements_count"
Can you create a python program that returns the index of an item in a given array of numbers?,"arr = [1,2,3,4,5,6]
item = 5","def getIndex(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            return i
    return -1

arr = [1,2,3,4,5,6]
item = 5
index = getIndex(arr, item)
print('Index of', item, 'is', index) # index is 4",Data Structure,4635,"def getIndex(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            return i
    return -1

arr = [1,2,3,4,5,6]
item = 5
index = getIndex(arr, item)
print('Index of', item, 'is', index) # index is 4","def getIndex(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            return i
    return -1

arr = [1,2,3,4,5,6]
item = 5
    ___
    ___"
Generate a valid Python program to create an alphabetically sorted list of all the words in a sentence.,"""This is a great day""","def sortSentence(sentence):
    words = sentence.split("" "")
    words.sort()
    return words

result = sortSentence(""This is a great day"")
print(result)",Data Structure,4639,"def sortSentence(sentence):
    words = sentence.split("" "")
    words.sort()
    return words

result = sortSentence(""This is a great day"")
print(result)","def sortSentence(sentence):
    words = sentence.split("" "")
    ___
    return words

result = sortSentence(""This is a great day"")
print(result)"
Write a Python program to sort a given array in ascending order.,"array = [3, 1, 5, 4, 2]","def sort_ascending(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array

array = [3, 1, 5, 4, 2]
print(sort_ascending(array))",Data Structure,4663,"def sort_ascending(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array

array = [3, 1, 5, 4, 2]
print(sort_ascending(array))","    ___
    ___
    for i in range(n):
        for j in range(0, n-i-1):
    ___
    ___
    ___

    ___
    ___"
Write a python script to generate an array of random numbers between two specified values.,"min = 0
max = 50","import random

# Generate an array of random numbers between two specified values
def generate_array(min, max):
 array = []
 
 for i in range(min, max):
  array.append(random.randint(min, max))
 
 return array
 
min = 0
max = 50
print(generate_array(min, max))",Data Structure,4666,"import random

# Generate an array of random numbers between two specified values
def generate_array(min, max):
 array = []
 
 for i in range(min, max):
  array.append(random.randint(min, max))
 
 return array
 
min = 0
max = 50
print(generate_array(min, max))","import random

    ___
def generate_array(min, max):
    ___
 
 for i in range(min, max):
    ___
 
    ___
 
min = 0
max = 50
print(generate_array(min, max))"
Create a python program that checks if a given array is sorted in ascending order,"array = [1, 5, 3, 9, 4]","def check_sorted(array):
    return all(array[i] <= array[i+1] for i in range(len(array)-1))",Data Structure,4680,"def check_sorted(array):
    return all(array[i] <= array[i+1] for i in range(len(array)-1))","    ___
    ___"
Write a python program that takes a list of strings and returns a sorted copy of the list.,"l1 = ['cat', 'dog', 'bird', 'elephant'","def sort_list(l):
    l.sort()
    return l

sorted_list = sort_list(['cat', 'dog', 'bird', 'elephant'])

print(sorted_list) # Output: ['bird', 'cat', 'dog', 'elephant']",Data Structure,4683,"def sort_list(l):
    l.sort()
    return l

sorted_list = sort_list(['cat', 'dog', 'bird', 'elephant'])

print(sorted_list) # Output: ['bird', 'cat', 'dog', 'elephant']","def sort_list(l):
    ___
    return l

sorted_list = sort_list(['cat', 'dog', 'bird', 'elephant'])

print(sorted_list) # Output: ['bird', 'cat', 'dog', 'elephant']"
Generate an algorithm in Python that finds the smallest positive number not present in an array.,"[1, 10, 5, 3, 8]","def findSmallestMissingPositiveInteger(arr): 
	positiveIntegers = set(i for i in range(1, len(arr) + 2)) 
	arrSet = set(arr) 
	res = positiveIntegers - arrSet 
	return res.pop() 
  
arr = [1, 10, 5, 3, 8] 
print(findSmallestMissingPositiveInteger(arr))",Data Structure,4692,"def findSmallestMissingPositiveInteger(arr): 
	positiveIntegers = set(i for i in range(1, len(arr) + 2)) 
	arrSet = set(arr) 
	res = positiveIntegers - arrSet 
	return res.pop() 
  
arr = [1, 10, 5, 3, 8] 
print(findSmallestMissingPositiveInteger(arr))","def findSmallestMissingPositiveInteger(arr): 
	positiveIntegers = set(i for i in range(1, len(arr) + 2)) 
	arrSet = set(arr) 
	res = positiveIntegers - arrSet 
    ___
  
arr = [1, 10, 5, 3, 8] 
print(findSmallestMissingPositiveInteger(arr))"
Write a Python program to randomly split a list into two parts.,"[1, 2, 3, 4, 5, 6, 7, 8]","import random

def split_list(input_list):
    index = random.randint(0, len(input_list)-1)
    part1 = input_list[:index]
    part2 = input_list[index:]
    return part1, part2

input_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""Original list :"", input_list)
result1, result2 = split_list(input_list)
print(""\nPart 1 :"", result1)
print(""Part 2 :"", result2)",Data Structure,4694,"import random

def split_list(input_list):
    index = random.randint(0, len(input_list)-1)
    part1 = input_list[:index]
    part2 = input_list[index:]
    return part1, part2

input_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""Original list :"", input_list)
result1, result2 = split_list(input_list)
print(""\nPart 1 :"", result1)
print(""Part 2 :"", result2)","import random

def split_list(input_list):
    ___
    ___
    ___
    return part1, part2

input_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""Original list :"", input_list)
result1, result2 = split_list(input_list)
print(""\nPart 1 :"", result1)
print(""Part 2 :"", result2)"
Develop a function in python to find the index of an element in a list.,"a = [2, 3, 4, 5, 2]
x = 2","def find_index(a, x):
    indices = []
    if x not in a:
        return -1
    else:
        for i in range(len(a)):
            if a[i] == x:
                indices.append(i)
    return indices

indices = find_index(a, x)
print(""The index of element 2 in the list is"", indices)",Data Structure,4696,"def find_index(a, x):
    indices = []
    if x not in a:
        return -1
    else:
        for i in range(len(a)):
            if a[i] == x:
                indices.append(i)
    return indices

indices = find_index(a, x)
print(""The index of element 2 in the list is"", indices)","def find_index(a, x):
    indices = []
    if x not in a:
        return -1
    else:
        for i in range(len(a)):
            if a[i] == x:
                indices.append(i)
    return indices

indices = find_index(a, x)
    ___"
Create a Python program to sort a list of strings according to the length of the strings in ascending order.,"['Python', 'JS', 'C++', 'Java', 'PHP']","# Function to sort the list according to string length
def sort_string_list(string_list):
    return sorted(string_list, key=len)

if __name__ == '__main__':
    string_list = ['Python', 'JS', 'C++', 'Java', 'PHP']
    sorted_string_list = sort_string_list(string_list)
    print(sorted_string_list)",Data Structure,4711,"# Function to sort the list according to string length
def sort_string_list(string_list):
    return sorted(string_list, key=len)

if __name__ == '__main__':
    string_list = ['Python', 'JS', 'C++', 'Java', 'PHP']
    sorted_string_list = sort_string_list(string_list)
    print(sorted_string_list)","    ___
def sort_string_list(string_list):
    return sorted(string_list, key=len)

if __name__ == '__main__':
    string_list = ['Python', 'JS', 'C++', 'Java', 'PHP']
    sorted_string_list = sort_string_list(string_list)
    print(sorted_string_list)"
Create a Python program to sort a list of tuples in ascending order by their second element.,"[(4, 2), (3, 7), (2, 3)]","def sort_tuples(tup): 
  
    # reverse = None (Sorts in Ascending order) 
    # key is set to sort using second element of  
    # sublist lambda has been used 
    tup.sort(key = lambda x: x[1])  
    return tup  
  
# Driver Code 
tuple1 = [(4, 2), (3, 7), (2, 3)]  
print(sort_tuples(tuple1))",Data Structure,4724,"def sort_tuples(tup): 
  
    # reverse = None (Sorts in Ascending order) 
    # key is set to sort using second element of  
    # sublist lambda has been used 
    tup.sort(key = lambda x: x[1])  
    return tup  
  
# Driver Code 
tuple1 = [(4, 2), (3, 7), (2, 3)]  
print(sort_tuples(tuple1))","def sort_tuples(tup): 
  
    # reverse = None (Sorts in Ascending order) 
    ___
    # sublist lambda has been used 
    ___
    return tup  
  
# Driver Code 
tuple1 = [(4, 2), (3, 7), (2, 3)]  
print(sort_tuples(tuple1))"
Create a Python program that takes in a 2D array and returns the sum of all the elements.,"[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]","def sum_2D_array(arr):
    """"""Return the sum of all the elements in a 2D array.""""""
    sum_arr = 0
    for row in arr:
        for elem in row:
            sum_arr += elem
    return sum_arr",Data Structure,4727,"def sum_2D_array(arr):
    """"""Return the sum of all the elements in a 2D array.""""""
    sum_arr = 0
    for row in arr:
        for elem in row:
            sum_arr += elem
    return sum_arr","def sum_2D_array(arr):
    ___
    sum_arr = 0
    for row in arr:
        for elem in row:
            sum_arr += elem
    return sum_arr"
Create a Python script that detects a cycle in a linked list.,head -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 3,"def detect_cycle(head):
 # Use two pointers, one slow and one fast, to detect a cycle
 slow = fast = head # Init with head
 while slow and fast and fast.next:
 slow = slow.next  # Move slow one node ahead
 fast = fast.next.next  # Move fast two node ahead
 if slow == fast:  # Detect cycle
 return True
 return False",Data Structure,4744,"def detect_cycle(head):
 # Use two pointers, one slow and one fast, to detect a cycle
 slow = fast = head # Init with head
 while slow and fast and fast.next:
 slow = slow.next  # Move slow one node ahead
 fast = fast.next.next  # Move fast two node ahead
 if slow == fast:  # Detect cycle
 return True
 return False","    ___
 # Use two pointers, one slow and one fast, to detect a cycle
    ___
 while slow and fast and fast.next:
    ___
    ___
 if slow == fast:  # Detect cycle
 return True
 return False"
Design an algorithm using Python to select the kth largest element from a list.,"[5, 10, 15, 20, 25]","def getKthLargest(arr, k): 
    arr.sort() 
  
    # Return the k'th largest element
    return arr[len(arr)-k]",Data Structure,4753,"def getKthLargest(arr, k): 
    arr.sort() 
  
    # Return the k'th largest element
    return arr[len(arr)-k]","def getKthLargest(arr, k): 
    ___
  
    # Return the k'th largest element
    return arr[len(arr)-k]"
Develop an algorithm in Python for deletion of an element from an array.,"[1, 2, 3, 4], 3","def deleteElement(arr, element):
    index = -1
    for i in range(len(arr)):
        if arr[i] == element:
            index = i
            break
    if index != -1:
        arr.pop(index)
        return arr
    else:
        return -1

arr = [1, 2, 3, 4]
element = 3
new_arr = deleteElement(arr, element)
print(new_arr)",Data Structure,4764,"def deleteElement(arr, element):
    index = -1
    for i in range(len(arr)):
        if arr[i] == element:
            index = i
            break
    if index != -1:
        arr.pop(index)
        return arr
    else:
        return -1

arr = [1, 2, 3, 4]
element = 3
new_arr = deleteElement(arr, element)
print(new_arr)","def deleteElement(arr, element):
    ___
    for i in range(len(arr)):
        if arr[i] == element:
    ___
            break
    ___
    ___
        return arr
    else:
        return -1

arr = [1, 2, 3, 4]
element = 3
new_arr = deleteElement(arr, element)
print(new_arr)"
Create a python function that randomly selects three numbers from a given list and sort them in descending order.,"[4, 7, 9, 11, 33, 2]","import random

def sort_numbers(lst):
    nums = random.sample(lst, 3)
    nums.sort(reverse=True)

    return nums

nums = [4, 7, 9, 11, 33, 2]
sorted_nums = sort_numbers(nums)

print(sorted_nums) # [33, 11, 9]",Data Structure,4782,"import random

def sort_numbers(lst):
    nums = random.sample(lst, 3)
    nums.sort(reverse=True)

    return nums

nums = [4, 7, 9, 11, 33, 2]
sorted_nums = sort_numbers(nums)

print(sorted_nums) # [33, 11, 9]","import random

def sort_numbers(lst):
    nums = random.sample(lst, 3)
    ___

    return nums

nums = [4, 7, 9, 11, 33, 2]
sorted_nums = sort_numbers(nums)

print(sorted_nums) # [33, 11, 9]"
What is the best way to sort an array of integers in descending order using Python?,"[99, 65, 43, 87, 21]","def sortDesc(arr):
    arr.sort(reverse=True)
    return arr

arr = [99, 65, 43, 87, 21]
print(sortDesc(arr)) // Output: [99, 87, 65, 43, 21]",Data Structure,4807,"def sortDesc(arr):
    arr.sort(reverse=True)
    return arr

arr = [99, 65, 43, 87, 21]
print(sortDesc(arr)) // Output: [99, 87, 65, 43, 21]","def sortDesc(arr):
    ___
    return arr

arr = [99, 65, 43, 87, 21]
print(sortDesc(arr)) // Output: [99, 87, 65, 43, 21]"
Write a Python function to generate an array of numbers from 1 to n in random order.,7,"import random

def generate_random_array(n):
    array = [i for i in range(1, n + 1)]
    random.shuffle(array)
    return array

result = generate_random_array(7)
print(result)",Data Structure,4853,"import random

def generate_random_array(n):
    array = [i for i in range(1, n + 1)]
    random.shuffle(array)
    return array

result = generate_random_array(7)
print(result)","import random

def generate_random_array(n):
    ___
    ___
    ___

result = generate_random_array(7)
print(result)"
Write a Python program that implements a search algorithm on a given list of numbers.,"numbers = [2, 8, 9, 5, 15, 12, 4]
key = 12","def linearSearch(numbers, key):
    for i in range(len(numbers)):
        if numbers[i] == key: 
            return i
    return -1

numbers = [2, 8, 9, 5, 15, 12, 4]
key = 12
index = linearSearch(numbers, key)
if index == -1:
    print(""Element not found"")
else:
    print(""Element found at index"", index) # output: Element found at index 5",Data Structure,4856,"def linearSearch(numbers, key):
    for i in range(len(numbers)):
        if numbers[i] == key: 
            return i
    return -1

numbers = [2, 8, 9, 5, 15, 12, 4]
key = 12
index = linearSearch(numbers, key)
if index == -1:
    print(""Element not found"")
else:
    print(""Element found at index"", index) # output: Element found at index 5","def linearSearch(numbers, key):
    for i in range(len(numbers)):
        if numbers[i] == key: 
            return i
    return -1

numbers = [2, 8, 9, 5, 15, 12, 4]
key = 12
    ___
    ___
    print(""Element not found"")
else:
    ___"
Write a Python function to find the maximum product of three integers from a given list.,"[-10, 6, 7, 8, 2]","def max_product_three(numbers):
 numbers.sort()
 return max(
  numbers[0] * numbers[1] * numbers[-1], 
  numbers[-1] * numbers[-2] * numbers[-3]
 )",Data Structure,4871,"def max_product_three(numbers):
 numbers.sort()
 return max(
  numbers[0] * numbers[1] * numbers[-1], 
  numbers[-1] * numbers[-2] * numbers[-3]
 )","def max_product_three(numbers):
    ___
 return max(
  numbers[0] * numbers[1] * numbers[-1], 
  numbers[-1] * numbers[-2] * numbers[-3]
 )"
Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.,"myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]","def get_greatest_2(items):
 max1 = max2 = float('-inf')
 for item in items:
 if item > max1:
 max1, max2 = item, max1
 elif item > max2:
 max2 = item
 return max1, max2

myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]
print('The greatest 2 numbers from the array:', get_greatest_2(myList))

Output:
The greatest 2 numbers from the array: (9, 8)",Data Structure,4897,"def get_greatest_2(items):
 max1 = max2 = float('-inf')
 for item in items:
 if item > max1:
 max1, max2 = item, max1
 elif item > max2:
 max2 = item
 return max1, max2

myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]
print('The greatest 2 numbers from the array:', get_greatest_2(myList))

Output:
The greatest 2 numbers from the array: (9, 8)","def get_greatest_2(items):
 max1 = max2 = float('-inf')
 for item in items:
 if item > max1:
 max1, max2 = item, max1
 elif item > max2:
 max2 = item
 return max1, max2

myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]
    ___

Output:
    ___"
Design an algorithm in Python which takes an array as an input and sorts them in ascending order using selection sort.,"[76, 25, 16, 15, 88]","def selection_sort(arr): 
	for i in range(len(arr)):   
		min_idx = i 
		for j in range(i+1, len(arr)): 
			if arr[min_idx] > arr[j]: 
				min_idx = j 
		arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [76, 25, 16, 15, 88]
selection_sort(arr)
print(""Sorted array:"", arr) # [15, 16, 25, 76, 88]",Data Structure,4899,"def selection_sort(arr): 
	for i in range(len(arr)):   
		min_idx = i 
		for j in range(i+1, len(arr)): 
			if arr[min_idx] > arr[j]: 
				min_idx = j 
		arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [76, 25, 16, 15, 88]
selection_sort(arr)
print(""Sorted array:"", arr) # [15, 16, 25, 76, 88]","def selection_sort(arr): 
	for i in range(len(arr)):   
		min_idx = i 
		for j in range(i+1, len(arr)): 
			if arr[min_idx] > arr[j]: 
				min_idx = j 
		arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [76, 25, 16, 15, 88]
selection_sort(arr)
    ___"
Create a function to find the mean of a given array in Python.,"[2, 4, 5, 7]","def mean(arr): 
  return sum(arr)/len(arr)

arr = [2, 4, 5, 7]
mean_val = mean(arr)
print(""Mean of the array is"", mean_val)
# Output: Mean of the array is 4.5",Data Structure,4907,"def mean(arr): 
  return sum(arr)/len(arr)

arr = [2, 4, 5, 7]
mean_val = mean(arr)
print(""Mean of the array is"", mean_val)
# Output: Mean of the array is 4.5","def mean(arr): 
  return sum(arr)/len(arr)

arr = [2, 4, 5, 7]
mean_val = mean(arr)
    ___
    ___"
Create a Python program to search a list for a particular value and return its index.,"list = [2, 3, 5, 9], value = 5","def search_list(list, value): 
    i = 0
    while(i < len(list)): 
        if list[i] == value: 
            return i 
        i = i + 1
  
    return -1
  
list = [2, 3, 5, 9] 
value = 5
result = search_list(list, value) 
  
if result != -1: 
    print(""Element is present at index"", result) 
else: 
    print(""Element is not present in list"")",Data Structure,4912,"def search_list(list, value): 
    i = 0
    while(i < len(list)): 
        if list[i] == value: 
            return i 
        i = i + 1
  
    return -1
  
list = [2, 3, 5, 9] 
value = 5
result = search_list(list, value) 
  
if result != -1: 
    print(""Element is present at index"", result) 
else: 
    print(""Element is not present in list"")","def search_list(list, value): 
    i = 0
    while(i < len(list)): 
        if list[i] == value: 
            return i 
        i = i + 1
  
    return -1
  
list = [2, 3, 5, 9] 
value = 5
result = search_list(list, value) 
  
if result != -1: 
    ___
else: 
    print(""Element is not present in list"")"
Write a Python program to perform linear search on a given array of numbers.,"[2, 3, 4, 6, 1]","def linearSearch(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
  
arr = [2, 3, 4, 6, 1] 
x = 4
  
result = linearSearch(arr, x) 
  
if(result == -1): 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)",Data Structure,4913,"def linearSearch(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
  
arr = [2, 3, 4, 6, 1] 
x = 4
  
result = linearSearch(arr, x) 
  
if(result == -1): 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)","def linearSearch(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
  
arr = [2, 3, 4, 6, 1] 
x = 4
  
result = linearSearch(arr, x) 
  
if(result == -1): 
    ___
else: 
    ___"
Create a program in Python that finds the index of the first occurrence of a target number in a given array.,"arr = [1, 3, 5, 3, 7, 3, 6], target = 3","arr = [1, 3, 5, 3, 7, 3, 6]
target = 3

def findIndex(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
  
    return -1
  
# Driver Code 
index = findIndex(arr, target) 
print(""Index of"", target, ""is"", index) 

// Output: Index of 3 is 1",Data Structure,4915,"arr = [1, 3, 5, 3, 7, 3, 6]
target = 3

def findIndex(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
  
    return -1
  
# Driver Code 
index = findIndex(arr, target) 
print(""Index of"", target, ""is"", index) 

// Output: Index of 3 is 1","arr = [1, 3, 5, 3, 7, 3, 6]
target = 3

def findIndex(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
  
    return -1
  
# Driver Code 
    ___
    ___

// Output: Index of 3 is 1"
Produce a program in Python to search for an element in a list,"[2, 3, 4, 5, 6]","# function to search an element  
# in a list 
def linear_search(list, x): 
    for index, element in enumerate(list): 
        if element == x: 
            return index 
    return -1",Data Structure,4966,"# function to search an element  
# in a list 
def linear_search(list, x): 
    for index, element in enumerate(list): 
        if element == x: 
            return index 
    return -1","    ___
# in a list 
def linear_search(list, x): 
    ___
        if element == x: 
    ___
    return -1"
Code a Python program that takes an array of integers and forms them into subarrays of length k.,"array = [2, 3, 4, 5, 6, 7, 8], k = 3","def form_subarrays(array, k):
    subarrays = []
    start = 0
    end = k
   
    # loop until all of the elements are placed in 
    # subarrays
    while start < len(array):
        subarrays.append(array[start:end])
        start += k
        end += k
    
    return subarrays",Data Structure,4972,"def form_subarrays(array, k):
    subarrays = []
    start = 0
    end = k
   
    # loop until all of the elements are placed in 
    # subarrays
    while start < len(array):
        subarrays.append(array[start:end])
        start += k
        end += k
    
    return subarrays","    ___
    subarrays = []
    start = 0
    end = k
   
    # loop until all of the elements are placed in 
    # subarrays
    ___
    ___
        start += k
        end += k
    
    return subarrays"
Develop a solution in Python for combining two sorted arrays into a third sorted array.,"arr1 = [1, 2, 5]
arr2 = [2, 4, 6]","def combine_sorted_arrays(arr1, arr2):
    arr3 = arr1 + arr2
    arr3.sort()
    return arr3

arr1 = [1, 2, 5]
arr2 = [2, 4, 6]

arr3 = combine_sorted_arrays(arr1, arr2)
print(arr3)",Data Structure,5000,"def combine_sorted_arrays(arr1, arr2):
    arr3 = arr1 + arr2
    arr3.sort()
    return arr3

arr1 = [1, 2, 5]
arr2 = [2, 4, 6]

arr3 = combine_sorted_arrays(arr1, arr2)
print(arr3)","def combine_sorted_arrays(arr1, arr2):
    arr3 = arr1 + arr2
    ___
    return arr3

arr1 = [1, 2, 5]
arr2 = [2, 4, 6]

arr3 = combine_sorted_arrays(arr1, arr2)
print(arr3)"
"Design an algorithm in Python, that takes an array and sort it in ascending order.","[10, 3, 9, 1, 15, 2]","def sort_ascending(array):
  array.sort()
  return array

sort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]",Data Structure,5011,"def sort_ascending(array):
  array.sort()
  return array

sort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]","    ___
    ___
    ___

sort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]"
Create a code snippet in Python to sort the following array in ascending order.,"[5, 8, 2, 6]","def sort_ascending(arr):
    arr.sort()
    return arr

result = sort_ascending([5, 8, 2, 6])
print(result)",Data Structure,5025,"def sort_ascending(arr):
    arr.sort()
    return arr

result = sort_ascending([5, 8, 2, 6])
print(result)","def sort_ascending(arr):
    ___
    return arr

result = sort_ascending([5, 8, 2, 6])
print(result)"
Write a Python function to insert an element in a given list after a given index.,"list = [1, 2, 3, 4, 5]
index = 2
element = 6","def insert_element(list, index, element):
    list.insert(index + 1, element)
    return list",Data Structure,5046,"def insert_element(list, index, element):
    list.insert(index + 1, element)
    return list","    ___
    ___
    return list"
Develop a function in Python that takes in a list and sorts the elements alphabetically.,"my_list = [""word"", ""translate"", ""language"", ""computer""]","def sort_list(my_list):
  my_list.sort()
  return my_list 

print(sort_list(my_list))",Data Structure,5057,"def sort_list(my_list):
  my_list.sort()
  return my_list 

print(sort_list(my_list))","def sort_list(my_list):
    ___
  return my_list 

print(sort_list(my_list))"
Create a Python script that finds the longest word in a given array of words.,"['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']","#  find the longest word
def findLongestWord(arr):
  
 longestWord = """"
 
 for word in arr:
 if(len(word) > len(longestWord)):
 longestWord = word
 
 return longestWord

# Driver code
words = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']
print(""Longest word in the array is ""+ findLongestWord(words))",Data Structure,5096,"#  find the longest word
def findLongestWord(arr):
  
 longestWord = """"
 
 for word in arr:
 if(len(word) > len(longestWord)):
 longestWord = word
 
 return longestWord

# Driver code
words = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']
print(""Longest word in the array is ""+ findLongestWord(words))","#  find the longest word
def findLongestWord(arr):
  
 longestWord = """"
 
 for word in arr:
 if(len(word) > len(longestWord)):
 longestWord = word
 
 return longestWord

# Driver code
words = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']
    ___"
Create a python loop to reduce a list of data points to their averages.,"[1, 2, 3, 4]","def averageList(arr):
    '''This function takes in an array and returns the average of all elements'''
    # initialize sum
    s = 0
    # traverse the array
    for i in arr:
        s += i
    # calculate average
    avg = s / len(arr)
    # return the average
    return avg

# Test
arr = [1, 2, 3, 4]
print(averageList(arr))
# Output 2.5",Data Structure,5100,"def averageList(arr):
    '''This function takes in an array and returns the average of all elements'''
    # initialize sum
    s = 0
    # traverse the array
    for i in arr:
        s += i
    # calculate average
    avg = s / len(arr)
    # return the average
    return avg

# Test
arr = [1, 2, 3, 4]
print(averageList(arr))
# Output 2.5","def averageList(arr):
    ___
    # initialize sum
    s = 0
    ___
    for i in arr:
        s += i
    # calculate average
    avg = s / len(arr)
    # return the average
    return avg

# Test
arr = [1, 2, 3, 4]
print(averageList(arr))
# Output 2.5"
Create a Python script to sort a list of integers from lowest to highest.,"[3, 5, 1, 7, 4, 2]","def sort_list(list):
  # loop through the list
  for i in range(len(list)):
    # find the smallest number in the list
    lowest = min(list[i:])
    # find its index
    lowest_index = list.index(lowest)
    # swap the numbers
    list[i], list[lowest_index] = list[lowest_index], list[i]
  # return the sorted list  
  return list

print(sort_list([3, 5, 1, 7, 4, 2]))",Data Structure,5104,"def sort_list(list):
  # loop through the list
  for i in range(len(list)):
    # find the smallest number in the list
    lowest = min(list[i:])
    # find its index
    lowest_index = list.index(lowest)
    # swap the numbers
    list[i], list[lowest_index] = list[lowest_index], list[i]
  # return the sorted list  
  return list

print(sort_list([3, 5, 1, 7, 4, 2]))","def sort_list(list):
  # loop through the list
  for i in range(len(list)):
    # find the smallest number in the list
    lowest = min(list[i:])
    ___
    ___
    # swap the numbers
    list[i], list[lowest_index] = list[lowest_index], list[i]
  # return the sorted list  
  return list

print(sort_list([3, 5, 1, 7, 4, 2]))"
Generate a python program to delete duplicate elements from the given array.,"Input: [1, 2, 3, 4, 4, 5, 6, 7, 8, 8]","def delete_duplicates(array):
    seen = set()
    non_duplicates = []
    for val in array:
        if val not in seen:
            non_duplicates.append(val)
            seen.add(val)
    return non_duplicates",Data Structure,5118,"def delete_duplicates(array):
    seen = set()
    non_duplicates = []
    for val in array:
        if val not in seen:
            non_duplicates.append(val)
            seen.add(val)
    return non_duplicates","    ___
    seen = set()
    non_duplicates = []
    ___
        if val not in seen:
            non_duplicates.append(val)
            seen.add(val)
    return non_duplicates"
Create a Python program to detect cycles in a given array.,"array = [2, 4, 5, -1, 7, -1, 5]","def is_cycle_detected(array):
    # create a set to store visited indices
    visited = set()
    for i, num in enumerate(array):
        # check if num has been visited
        if i in visited or num not in visited:
            return False
        # mark the index as visited
        visited.add(i)
    return True",Data Structure,5120,"def is_cycle_detected(array):
    # create a set to store visited indices
    visited = set()
    for i, num in enumerate(array):
        # check if num has been visited
        if i in visited or num not in visited:
            return False
        # mark the index as visited
        visited.add(i)
    return True","    ___
    # create a set to store visited indices
    visited = set()
    ___
        # check if num has been visited
        if i in visited or num not in visited:
            return False
    ___
        visited.add(i)
    return True"
Develop a Python script to sort a given list of names alphabetically.,"[John, Harry, Robert]","def sort_names(names):
    names.sort()
    return names

names = [""John"", ""Harry"", ""Robert""]
result = sort_names(names)
print(result)",Data Structure,5127,"def sort_names(names):
    names.sort()
    return names

names = [""John"", ""Harry"", ""Robert""]
result = sort_names(names)
print(result)","def sort_names(names):
    ___
    return names

names = [""John"", ""Harry"", ""Robert""]
result = sort_names(names)
print(result)"
Develop a function in Python to convert a given list to a dictionary.,"list = [1,2,3,4,5,6]","def convert_list_to_dict(list):
    final_dict = {}

    for index, value in enumerate(list):
        final_dict.update({index: value})

    return final_dict

list = [1,2,3,4,5,6]
list_dict = convert_list_to_dict(list)
print(list_dict)",Data Structure,5132,"def convert_list_to_dict(list):
    final_dict = {}

    for index, value in enumerate(list):
        final_dict.update({index: value})

    return final_dict

list = [1,2,3,4,5,6]
list_dict = convert_list_to_dict(list)
print(list_dict)","def convert_list_to_dict(list):
    final_dict = {}

    ___
    ___

    return final_dict

list = [1,2,3,4,5,6]
list_dict = convert_list_to_dict(list)
print(list_dict)"
"Using Python, find the mean of a randomly generated array of integers of size 10.","array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10]","import numpy as np

def get_mean(array):
    '''This function returns the mean of the given array of integers.'''
    array = np.array(array)
    return np.mean(array)

if __name__ == '__main__':
    array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10]
    mean = get_mean(array)
    print(mean) # 63.2",Data Structure,5138,"import numpy as np

def get_mean(array):
    '''This function returns the mean of the given array of integers.'''
    array = np.array(array)
    return np.mean(array)

if __name__ == '__main__':
    array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10]
    mean = get_mean(array)
    print(mean) # 63.2","import numpy as np

    ___
    ___
    ___
    ___

if __name__ == '__main__':
    ___
    ___
    print(mean) # 63.2"
"Using the data structure provided below, create a Python program to sort a list of numbers in descending order.","numbers = [23, 45, 56, 78, 33, 19, 20]","def sort_descending(numbers): 
    numbers.sort(reverse=True) 
    return numbers 

print(sort_descending(numbers))",Data Structure,5139,"def sort_descending(numbers): 
    numbers.sort(reverse=True) 
    return numbers 

print(sort_descending(numbers))","def sort_descending(numbers): 
    ___
    return numbers 

print(sort_descending(numbers))"
Write an efficient Python program to find the second largest element in an array.,"[14, 46, 47, 86, 92, 52, 48, 36, 66, 85]","def secondLargestElement(arr):
  # Sort the array in ascending order 
  arr.sort() 
    
  # Return the second last element 
  return arr[-2] 

# Driver code 
arr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] 

print(secondLargestElement(arr))",Data Structure,5140,"def secondLargestElement(arr):
  # Sort the array in ascending order 
  arr.sort() 
    
  # Return the second last element 
  return arr[-2] 

# Driver code 
arr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] 

print(secondLargestElement(arr))","def secondLargestElement(arr):
    ___
    ___
    
  # Return the second last element 
  return arr[-2] 

# Driver code 
arr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] 

print(secondLargestElement(arr))"
Generate a function in Python to determine the largest element in an array.,"[3, 2, 1, 4, 5]","def find_max(arr):
 max_val = arr[0]
 for num in arr:
 if num > max_val:
 max_val = num
 return max_val

array = [3, 2, 1, 4, 5]
print(find_max(array))",Data Structure,5150,"def find_max(arr):
 max_val = arr[0]
 for num in arr:
 if num > max_val:
 max_val = num
 return max_val

array = [3, 2, 1, 4, 5]
print(find_max(array))","def find_max(arr):
 max_val = arr[0]
 for num in arr:
 if num > max_val:
 max_val = num
 return max_val

    ___
    ___"
Sort a given array of integers in Python.,"arr = [1, 10, 5, 8, 7]","arr.sort() 
# arr is now [1, 5, 7, 8, 10]",Data Structure,5169,"arr.sort() 
# arr is now [1, 5, 7, 8, 10]","    ___
# arr is now [1, 5, 7, 8, 10]"
"Using the input provided, make a program to sort a given array in ascending order in Python.","arr = [9, 4, 7, 2, 3]","def insertionSort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 4, 7, 2, 3]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),",Data Structure,5182,"def insertionSort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 4, 7, 2, 3]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),","def insertionSort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 4, 7, 2, 3]
insertionSort(arr) 
    ___
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Generate a Python script to randomly select k elements from a list.,"An array with 6 values: [11, 22, 7, 12, 3, 8] and k=3","import random

# Initialize the array
array = [11, 22, 7, 12, 3, 8]
k = 3

# Randomly select k elements from array
selected = random.sample(array, k)

# Output the result
print(f'Randomly selected {k} elements: {selected}')",Data Structure,5183,"import random

# Initialize the array
array = [11, 22, 7, 12, 3, 8]
k = 3

# Randomly select k elements from array
selected = random.sample(array, k)

# Output the result
print(f'Randomly selected {k} elements: {selected}')","import random

    ___
    ___
k = 3

    ___
    ___

# Output the result
print(f'Randomly selected {k} elements: {selected}')"
"Given an email list, write a python program to sort the list alphabetically","['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']","def sort_list(list_of_emails):
    list_of_emails.sort()
    return list_of_emails

print(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))",Data Structure,5197,"def sort_list(list_of_emails):
    list_of_emails.sort()
    return list_of_emails

print(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))","def sort_list(list_of_emails):
    ___
    return list_of_emails

print(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))"
Generate a program in Python that takes as input an array of numbers and returns the sum of all numbers in the array.,"[2, 3, 4]","def sum_elements(nums):
    """"""Given an array of number, return the sum of all elements in the array """"""
    result = 0
    for num in nums:
        result += num
    return result

print(sum_elements([2,3,4]))",Data Structure,5228,"def sum_elements(nums):
    """"""Given an array of number, return the sum of all elements in the array """"""
    result = 0
    for num in nums:
        result += num
    return result

print(sum_elements([2,3,4]))","def sum_elements(nums):
    ___
    result = 0
    for num in nums:
        result += num
    return result

print(sum_elements([2,3,4]))"
Develop a Python program to create a frequency table for an array of integer elements.,"arr = [1,1,3,5,3,3,5]","from collections import Counter

def frequency(arr):
    """"""
    Develop a Python program to create a frequency table for an array of integer elements
    """"""
    return Counter(arr)

if __name__ == '__main__':
    arr = [1,1,3,5,3,3,5] 
    print(frequency(arr))",Data Structure,5258,"from collections import Counter

def frequency(arr):
    """"""
    Develop a Python program to create a frequency table for an array of integer elements
    """"""
    return Counter(arr)

if __name__ == '__main__':
    arr = [1,1,3,5,3,3,5] 
    print(frequency(arr))","from collections import Counter

def frequency(arr):
    """"""
    ___
    """"""
    return Counter(arr)

if __name__ == '__main__':
    arr = [1,1,3,5,3,3,5] 
    print(frequency(arr))"
Write a Python script to implement the quick sort algorithm on a list.,"[5, 4, 2, 1, 3]","def quick_sort(array):
    if len(array) < 2:
        return array
    pivot = array[0]
    less = [i for i in array[1:] if i <= pivot]
    greater = [i for i in array[1:] if i > pivot]
    return quick_sort(less) + [pivot] + quick_sort(greater)",Data Structure,5275,"def quick_sort(array):
    if len(array) < 2:
        return array
    pivot = array[0]
    less = [i for i in array[1:] if i <= pivot]
    greater = [i for i in array[1:] if i > pivot]
    return quick_sort(less) + [pivot] + quick_sort(greater)","    ___
    ___
    ___
    ___
    ___
    ___
    return quick_sort(less) + [pivot] + quick_sort(greater)"
Write a python script to compute the average value in an array.,"values = [2,4,6,8,10]","# Funciton to compute the average value in an array
def computeAverage(values):
 # Initialize sum
 sum = 0
 
 # Iterate through values
 for value in values:
 sum+=value
 
 # Compute average
 average = sum / len(values)
 
 # Return average
 return average
 
# Call function
computeAverage(values); // Returns 6.0",Data Structure,5285,"# Funciton to compute the average value in an array
def computeAverage(values):
 # Initialize sum
 sum = 0
 
 # Iterate through values
 for value in values:
 sum+=value
 
 # Compute average
 average = sum / len(values)
 
 # Return average
 return average
 
# Call function
computeAverage(values); // Returns 6.0","    ___
def computeAverage(values):
 # Initialize sum
 sum = 0
 
 # Iterate through values
 for value in values:
 sum+=value
 
 # Compute average
 average = sum / len(values)
 
 # Return average
 return average
 
# Call function
computeAverage(values); // Returns 6.0"
Compose a Python program to insert an element at a given position in an array.,"[1, 4, 5, 7], 2, 6","def insert_element(arr, position, element):
    arr.insert(position, element)

print(insert_element([1, 4, 5, 7], 2, 6)) # Output: [1, 4, 6, 5, 7]",Data Structure,5301,"def insert_element(arr, position, element):
    arr.insert(position, element)

print(insert_element([1, 4, 5, 7], 2, 6)) # Output: [1, 4, 6, 5, 7]","def insert_element(arr, position, element):
    ___

print(insert_element([1, 4, 5, 7], 2, 6)) # Output: [1, 4, 6, 5, 7]"
Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.,"List of Strings: [""hello"", ""world"", ""good"", ""morning"", ""programming""]","def sortAlphabetically(strings): 
    strings.sort() 
    return strings 

#Test 
strings = [""hello"", ""world"", ""good"", ""morning"", ""programming""]
sorted_strings = sortAlphabetically(strings) 
print(*sorted_strings)",Data Structure,5317,"def sortAlphabetically(strings): 
    strings.sort() 
    return strings 

#Test 
strings = [""hello"", ""world"", ""good"", ""morning"", ""programming""]
sorted_strings = sortAlphabetically(strings) 
print(*sorted_strings)","def sortAlphabetically(strings): 
    ___
    return strings 

#Test 
strings = [""hello"", ""world"", ""good"", ""morning"", ""programming""]
sorted_strings = sortAlphabetically(strings) 
print(*sorted_strings)"
Modify a python program so that it can sort the list of numbers in ascending order.,"numbers = [3, 5, 9, 1, 2]","numbers = [3, 5, 9, 1, 2] 

numbers.sort() 

print(numbers)",Data Structure,5371,"numbers = [3, 5, 9, 1, 2] 

numbers.sort() 

print(numbers)","numbers = [3, 5, 9, 1, 2] 

    ___

print(numbers)"
Create an algorithm in Python to group the numbers of an array in such a way that the total sum of each group is equal.,"[1, 2, 3, 4, 5, 6, 7, 8]","def group_equal_sum(arr):
    result = []
    arr.sort()

    while len(arr) > 0:
        group = [arr[0]]
        arr.remove(arr[0])

        sum_ = group[0]
        while sum_ in arr:
            group.append(sum_)
            arr.remove(sum_)
            sum_ += 1

        result.append(group)
    return result",Data Structure,5375,"def group_equal_sum(arr):
    result = []
    arr.sort()

    while len(arr) > 0:
        group = [arr[0]]
        arr.remove(arr[0])

        sum_ = group[0]
        while sum_ in arr:
            group.append(sum_)
            arr.remove(sum_)
            sum_ += 1

        result.append(group)
    return result","def group_equal_sum(arr):
    result = []
    ___

    while len(arr) > 0:
        group = [arr[0]]
        arr.remove(arr[0])

        sum_ = group[0]
        while sum_ in arr:
            group.append(sum_)
            arr.remove(sum_)
            sum_ += 1

        result.append(group)
    return result"
Write a Python program to sort a list of tuples by the second item in each tuple.,"[(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)]","# sort a list of tuples by the second item in each tuple
def sort_tuple(tuples):
    # sort in ascending order
    tuples.sort(key=lambda x: x[1])
    # return the list
    return tuples",Data Structure,5378,"# sort a list of tuples by the second item in each tuple
def sort_tuple(tuples):
    # sort in ascending order
    tuples.sort(key=lambda x: x[1])
    # return the list
    return tuples","    ___
def sort_tuple(tuples):
    ___
    ___
    # return the list
    return tuples"
Implement a function in Python that takes an array of strings and returns a list of all strings that have length greater than 6,"[""testing"", ""this"",""array""]","def getStringsWithLength(array):
    output = []
    for x in array:
        if len(x) > 6:
            output.append(x)
    return output

print(getStringsWithLength([""testing"", ""this"",""array""]))",Data Structure,5380,"def getStringsWithLength(array):
    output = []
    for x in array:
        if len(x) > 6:
            output.append(x)
    return output

print(getStringsWithLength([""testing"", ""this"",""array""]))","    ___
    output = []
    ___
        if len(x) > 6:
            output.append(x)
    return output

    ___"
Write a Python program to get the index of the largest item in a given list.,"[4, 3, 5, 7, 6]","# get the index of the largest item in a list
def get_max_index(arr):
    max_index = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[max_index]:
            max_index = i
    return max_index

result = get_max_index([4, 3, 5, 7, 6])
print(result) # 3",Data Structure,5396,"# get the index of the largest item in a list
def get_max_index(arr):
    max_index = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[max_index]:
            max_index = i
    return max_index

result = get_max_index([4, 3, 5, 7, 6])
print(result) # 3","    ___
def get_max_index(arr):
    max_index = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[max_index]:
            max_index = i
    return max_index

result = get_max_index([4, 3, 5, 7, 6])
print(result) # 3"
Write a Python code snippet to search for a given number in the given array.,"arr = [5, 8, 2, 10, 48, 41], number = 8","def search(arr, number): 
    for i in range(len(arr)): 
        if arr[i] == number: 
            return True
    return False
  
arr = [5, 8, 2, 10, 48, 41] 
number = 8
if search(arr, number): 
    print(""Number found"") 
else: 
    print(""Number not found"")",Data Structure,5401,"def search(arr, number): 
    for i in range(len(arr)): 
        if arr[i] == number: 
            return True
    return False
  
arr = [5, 8, 2, 10, 48, 41] 
number = 8
if search(arr, number): 
    print(""Number found"") 
else: 
    print(""Number not found"")","    ___
    for i in range(len(arr)): 
        if arr[i] == number: 
            return True
    return False
  
arr = [5, 8, 2, 10, 48, 41] 
number = 8
    ___
    print(""Number found"") 
else: 
    print(""Number not found"")"
Write a python program to sort a list of tuples based on their second element.,"list = [('dog', 6), ('cat', 4), ('rabbit', 2)]","list = [('dog', 6), ('cat', 4), ('rabbit', 2)]

list.sort(key=lambda x: x[1])

print(list)",Data Structure,5427,"list = [('dog', 6), ('cat', 4), ('rabbit', 2)]

list.sort(key=lambda x: x[1])

print(list)","list = [('dog', 6), ('cat', 4), ('rabbit', 2)]

    ___

print(list)"
Create a Python function that takes a list of strings as an argument and returns a new sorted list with no duplicates.,"['cat', 'dog', 'cat', 'mouse', 'lion', 'dog']","def remove_duplicates(strings):
  new_list = []
  for s in strings:
    if s not in new_list:
      new_list.append(s)
  new_list.sort()
  return new_list

strings = [""cat"", ""dog"", ""cat"", ""mouse"", ""lion"", ""dog""]
unique_list = remove_duplicates(strings)

print(unique_list)",Data Structure,5444,"def remove_duplicates(strings):
  new_list = []
  for s in strings:
    if s not in new_list:
      new_list.append(s)
  new_list.sort()
  return new_list

strings = [""cat"", ""dog"", ""cat"", ""mouse"", ""lion"", ""dog""]
unique_list = remove_duplicates(strings)

print(unique_list)","def remove_duplicates(strings):
  new_list = []
  for s in strings:
    if s not in new_list:
      new_list.append(s)
    ___
  return new_list

strings = [""cat"", ""dog"", ""cat"", ""mouse"", ""lion"", ""dog""]
unique_list = remove_duplicates(strings)

print(unique_list)"
Develop an algorithm in Python to find the median of a list of numbers.,"[1, 4, 6, 12, 24, 36]","def get_median(nums): 
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int(len(nums)/2-1)])/2
    else:
        return nums[int((len(nums)-1)/2)]
    
result = get_median([1, 4, 6, 12, 24, 36])
print(result)",Data Structure,5478,"def get_median(nums): 
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int(len(nums)/2-1)])/2
    else:
        return nums[int((len(nums)-1)/2)]
    
result = get_median([1, 4, 6, 12, 24, 36])
print(result)","def get_median(nums): 
    ___
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int(len(nums)/2-1)])/2
    else:
        return nums[int((len(nums)-1)/2)]
    
result = get_median([1, 4, 6, 12, 24, 36])
print(result)"
Write a Python program to optimize an existing array using Bubble sort.,"arr = [2,3,1,4,5]","def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

if __name__ == '__main__':
    arr = [2,3,1,4,5]
    print(""Optimized array:"", bubble_sort(arr))",Data Structure,5543,"def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

if __name__ == '__main__':
    arr = [2,3,1,4,5]
    print(""Optimized array:"", bubble_sort(arr))","def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

if __name__ == '__main__':
    arr = [2,3,1,4,5]
    ___"
Implement a search algorithm in Python that finds a given element in an array.,"[2, 4, 6, 3, 1], target 4","def search(array, target):
  for i in range(len(array)):
    if array[i] == target:
      return i
   
  return -1

array = [2, 4, 6, 3, 1]
target = 4

result = search(array, target)

if result != -1:
  print(""Element found at index "" + str(result))
else:
  print(""Element not found"")",Data Structure,5563,"def search(array, target):
  for i in range(len(array)):
    if array[i] == target:
      return i
   
  return -1

array = [2, 4, 6, 3, 1]
target = 4

result = search(array, target)

if result != -1:
  print(""Element found at index "" + str(result))
else:
  print(""Element not found"")","    ___
    ___
    ___
      return i
   
  return -1

    ___
target = 4

    ___

if result != -1:
    ___
else:
  print(""Element not found"")"
Propose and implement a method to sort a list of varied size nested lists in Python.,"Sample input: [[2,6],[1],[3,4,5]]","def sortList(lists):
 sortedList = [sorted(lst) for lst in lists]
 sortedList.sort(key = len)
 return sortedList

lists = [[2,6],[1],[3,4,5]]
print(sortList(lists)) // prints [[1],[2,6],[3,4,5]]",Data Structure,5574,"def sortList(lists):
 sortedList = [sorted(lst) for lst in lists]
 sortedList.sort(key = len)
 return sortedList

lists = [[2,6],[1],[3,4,5]]
print(sortList(lists)) // prints [[1],[2,6],[3,4,5]]","def sortList(lists):
 sortedList = [sorted(lst) for lst in lists]
    ___
 return sortedList

lists = [[2,6],[1],[3,4,5]]
print(sortList(lists)) // prints [[1],[2,6],[3,4,5]]"
Generate Python code to find the pair of numbers from an array whose sum is closest to a given number.,"array: [10, 2, 3, 4, 5], target: 8","def closest_sum(array, target):
  diff = float('inf')
  for i in range(len(array) - 1):
    for j in range(i + 1, len(array)):
      pair_sum = array[i] + array[j]
      if abs(target - pair_sum) < diff:
        diff = abs(target - pair_sum)
        result = [array[i], array[j]]
  return result",Data Structure,5617,"def closest_sum(array, target):
  diff = float('inf')
  for i in range(len(array) - 1):
    for j in range(i + 1, len(array)):
      pair_sum = array[i] + array[j]
      if abs(target - pair_sum) < diff:
        diff = abs(target - pair_sum)
        result = [array[i], array[j]]
  return result","    ___
  diff = float('inf')
    ___
    ___
    ___
      if abs(target - pair_sum) < diff:
        diff = abs(target - pair_sum)
    ___
  return result"
Create a sorting algorithm in Python that takes a list of numbers as an input and prints the sorted output.,"[10, 5, 1, 8, 9, 6]","def sort(numbers):
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers",Data Structure,5639,"def sort(numbers):
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers","    ___
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers"
Write a function in Python to convert a dictionary into a list and then sort the list alphabetically.,"Example Dictionary: {'a':1, 'b':2, 'c':3}","def dict_to_sorted_list(d):
 # Convert Dictionary to List
 lst = list(d.items())
 
 # Sort List Alphabetically
 lst.sort(key=lambda x: x[0])
 
 return lst
 
example_dict = {'a':1, 'b':2, 'c':3}
sorted_list = dict_to_sorted_list(example_dict)
print(sorted_list)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]",Data Structure,5648,"def dict_to_sorted_list(d):
 # Convert Dictionary to List
 lst = list(d.items())
 
 # Sort List Alphabetically
 lst.sort(key=lambda x: x[0])
 
 return lst
 
example_dict = {'a':1, 'b':2, 'c':3}
sorted_list = dict_to_sorted_list(example_dict)
print(sorted_list)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]","def dict_to_sorted_list(d):
 # Convert Dictionary to List
 lst = list(d.items())
 
 # Sort List Alphabetically
    ___
 
 return lst
 
example_dict = {'a':1, 'b':2, 'c':3}
sorted_list = dict_to_sorted_list(example_dict)
print(sorted_list)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]"
Create a script to list the content of a given directory in Linux.,Path: /usr,"#!/usr/bin/env python

import os

path = ""/usr""

for root, dirs, files in os.walk(path):
 for file in files:
 print(os.path.join(root, file))",Data Structure,5665,"#!/usr/bin/env python

import os

path = ""/usr""

for root, dirs, files in os.walk(path):
 for file in files:
 print(os.path.join(root, file))","#!/usr/bin/env python

import os

path = ""/usr""

    ___
 for file in files:
    ___"
Write a Python program to find the index of an element in an array.,"array = [3, 7, 9, 10] 
 element = 7","def findIndex(array, element): 
  for i in range(len(array)): 
    if(array[i] == element): 
      return i 
  return -1
  
# Driver code 
print(findIndex([3, 7, 9, 10], 7))",Data Structure,5669,"def findIndex(array, element): 
  for i in range(len(array)): 
    if(array[i] == element): 
      return i 
  return -1
  
# Driver code 
print(findIndex([3, 7, 9, 10], 7))","    ___
    ___
    ___
      return i 
  return -1
  
# Driver code 
print(findIndex([3, 7, 9, 10], 7))"
Create a Python program to sort a list of tuples based on the second elements of the tuples.,"l = [(1, 3), (2, 5), (4, 1), (6, 4)]","def sortTuples(l): 
    l.sort(key = lambda x: x[1]) 
    return l
 
# Sample Output 
# [(4, 1), (1, 3), (6, 4), (2, 5)] 
print(sortTuples(l))",Data Structure,5678,"def sortTuples(l): 
    l.sort(key = lambda x: x[1]) 
    return l
 
# Sample Output 
# [(4, 1), (1, 3), (6, 4), (2, 5)] 
print(sortTuples(l))","def sortTuples(l): 
    ___
    return l
 
# Sample Output 
# [(4, 1), (1, 3), (6, 4), (2, 5)] 
print(sortTuples(l))"
Optimize the following Python program to find the given number in a list.,"A list = [2, 4, 9, 8, 10]
Number = 8","def find_number(lst, num):
  for i, v in enumerate(lst):
    if v == num:
      return i
  
  return -1

list_of_numbers = [2, 4, 9, 8, 10]
number_to_find = 8

# Find the given number in the list
index = find_number(list_of_numbers, number_to_find)
if index != -1:
  print(f'Number {number_to_find} found at index {index}.')
else:
  print('Number not found.')",Data Structure,5681,"def find_number(lst, num):
  for i, v in enumerate(lst):
    if v == num:
      return i
  
  return -1

list_of_numbers = [2, 4, 9, 8, 10]
number_to_find = 8

# Find the given number in the list
index = find_number(list_of_numbers, number_to_find)
if index != -1:
  print(f'Number {number_to_find} found at index {index}.')
else:
  print('Number not found.')","def find_number(lst, num):
  for i, v in enumerate(lst):
    if v == num:
      return i
  
  return -1

list_of_numbers = [2, 4, 9, 8, 10]
number_to_find = 8

# Find the given number in the list
    ___
    ___
    ___
else:
  print('Number not found.')"
Write a function in Python to find the maximum two numbers in a list.,"List: [2, 4, 5, 9, 10, 11]","def max_two(list):
    #sort the list in ascending order
    list.sort()
    #return the last two elements
    return list[-2:]

#example
number_list = [2, 4, 5, 9, 10, 11]
result = max_two(number_list)

print(result)
# Output: [10, 11]",Data Structure,5682,"def max_two(list):
    #sort the list in ascending order
    list.sort()
    #return the last two elements
    return list[-2:]

#example
number_list = [2, 4, 5, 9, 10, 11]
result = max_two(number_list)

print(result)
# Output: [10, 11]","def max_two(list):
    ___
    ___
    #return the last two elements
    return list[-2:]

#example
number_list = [2, 4, 5, 9, 10, 11]
result = max_two(number_list)

print(result)
# Output: [10, 11]"
Sort this list of numbers in ascending order using Python.,"[3, 1, 6, 9, 10, 5]","list = [3, 1, 6, 9, 10, 5]
list.sort()
print(list)  # prints [1, 3, 5, 6, 9, 10]",Data Structure,5691,"list = [3, 1, 6, 9, 10, 5]
list.sort()
print(list)  # prints [1, 3, 5, 6, 9, 10]","list = [3, 1, 6, 9, 10, 5]
    ___
print(list)  # prints [1, 3, 5, 6, 9, 10]"
Create a Python script to apply a log transformation to every element of a NumPy array.,"[0.1, 0.4, 0.9, 2.2]","import numpy as np

arr = np.array([0.1, 0.4, 0.9, 2.2])
# Applying log transformation
arr = np.log(arr)

print('After applying log transformation to every element of the array:')
print(arr)",Data Structure,5696,"import numpy as np

arr = np.array([0.1, 0.4, 0.9, 2.2])
# Applying log transformation
arr = np.log(arr)

print('After applying log transformation to every element of the array:')
print(arr)","import numpy as np

    ___
# Applying log transformation
arr = np.log(arr)

    ___
print(arr)"
"Generate a Python program to solve the following problem: given an array of integers, find the number of pairs of integers whose sum is equal to zero.","[-5, -4, -2, 0, 2, 5]","def pairs_sum_to_zero(array):
  pairs = []
  for i in range(len(array)):
    for j in range(i+1, len(array)):
      if array[i] + array[j] == 0:
        pairs.append([array[i], array[j]])
  return len(pairs)",Data Structure,5703,"def pairs_sum_to_zero(array):
  pairs = []
  for i in range(len(array)):
    for j in range(i+1, len(array)):
      if array[i] + array[j] == 0:
        pairs.append([array[i], array[j]])
  return len(pairs)","    ___
  pairs = []
    ___
    ___
    ___
    ___
  return len(pairs)"
Develop a Python program to calculate the sum of all the elements in a given 2D array.,"[[1, 2],
 [3, 4],
 [5, 6]]","def sum_2d_array(array):
  # Initialize sum
  _sum = 0
  # Iterate over array and add each element
  for row in array:
    for element in row:
      _sum += element
  # Return sum
  return _sum

arr = [[1, 2], [3, 4], [5, 6]]
print(sum_2d_array(arr))",Data Structure,5707,"def sum_2d_array(array):
  # Initialize sum
  _sum = 0
  # Iterate over array and add each element
  for row in array:
    for element in row:
      _sum += element
  # Return sum
  return _sum

arr = [[1, 2], [3, 4], [5, 6]]
print(sum_2d_array(arr))","    ___
  # Initialize sum
  _sum = 0
    ___
    ___
    for element in row:
      _sum += element
  # Return sum
  return _sum

arr = [[1, 2], [3, 4], [5, 6]]
print(sum_2d_array(arr))"
Generate a Python script to sort a list of strings in ascending alphabetical order.,"['cat', 'apple', 'elephant', 'dog']","list = ['cat', 'apple', 'elephant', 'dog']

list.sort()

print(list) # Output: ['apple', 'cat', 'dog', 'elephant']",Data Structure,5710,"list = ['cat', 'apple', 'elephant', 'dog']

list.sort()

print(list) # Output: ['apple', 'cat', 'dog', 'elephant']","list = ['cat', 'apple', 'elephant', 'dog']

    ___

print(list) # Output: ['apple', 'cat', 'dog', 'elephant']"
Generate a function in Python that takes a list and returns an ordered list,"mylist = [5, 9, 1, 4]","def order_list(mylist):
    mylist.sort()
    return mylist

print(""Ordered list: "", order_list(mylist))",Data Structure,5731,"def order_list(mylist):
    mylist.sort()
    return mylist

print(""Ordered list: "", order_list(mylist))","def order_list(mylist):
    ___
    return mylist

print(""Ordered list: "", order_list(mylist))"
Create a class in Python that implements the count() method to count the number of elements in a given array.,"[1, 2, 3, 4]","class ArrayCounter:
 def __init__(self, array):
 self.array = array
 
 def count(self):
 return len(self.array)

arr_counter = ArrayCounter([1, 2, 3, 4])
print(arr_counter.count())",Data Structure,5743,"class ArrayCounter:
 def __init__(self, array):
 self.array = array
 
 def count(self):
 return len(self.array)

arr_counter = ArrayCounter([1, 2, 3, 4])
print(arr_counter.count())","class ArrayCounter:
    ___
    ___
 
 def count(self):
    ___

arr_counter = ArrayCounter([1, 2, 3, 4])
print(arr_counter.count())"
Generate an optimized code in Python to search an array and find the most frequent number.,"array = [3, 4, 6, 3, 2, 8, 6, 7, 3]","from collections import Counter

def find_most_frequent(array):
  c = Counter(array)
  return c.most_common(1)[0][0]

array = [3, 4, 6, 3, 2, 8, 6, 7, 3]

print(find_most_frequent(array)) # 3",Data Structure,5772,"from collections import Counter

def find_most_frequent(array):
  c = Counter(array)
  return c.most_common(1)[0][0]

array = [3, 4, 6, 3, 2, 8, 6, 7, 3]

print(find_most_frequent(array)) # 3","from collections import Counter

    ___
    ___
  return c.most_common(1)[0][0]

    ___

    ___"
Generate a Python script for sorting a list of items alphabetically.,"items = [""Apple"", ""Banana"", ""Cherry"", ""Avocado""]","def sort_items(items):
  items.sort()
  return items

print(sort_items(items))

# Output
['Apple', 'Avocado', 'Banana', 'Cherry']",Data Structure,5792,"def sort_items(items):
  items.sort()
  return items

print(sort_items(items))

# Output
['Apple', 'Avocado', 'Banana', 'Cherry']","def sort_items(items):
    ___
  return items

print(sort_items(items))

# Output
['Apple', 'Avocado', 'Banana', 'Cherry']"
Create a script in any language to pass two arrays of different lengths and return a new array that is a combination of the two.,"array1 = [1, 2, 3, 4], array2 = [5, 6]","# Python
def combine_arrays(arr1, arr2):
  combined_arr = [x for x in arr1]
  for i in arr2:
    combined_arr.append(i)
  return combined_arr

# JavaScript 
function combineArrays(arr1, arr2) {
  let combinedArr = [...arr1];
  for (let i of arr2) {
    combinedArr.push(i);
  }
  return combinedArr;
}",Data Structure,5803,"# Python
def combine_arrays(arr1, arr2):
  combined_arr = [x for x in arr1]
  for i in arr2:
    combined_arr.append(i)
  return combined_arr

# JavaScript 
function combineArrays(arr1, arr2) {
  let combinedArr = [...arr1];
  for (let i of arr2) {
    combinedArr.push(i);
  }
  return combinedArr;
}","# Python
def combine_arrays(arr1, arr2):
  combined_arr = [x for x in arr1]
  for i in arr2:
    combined_arr.append(i)
  return combined_arr

# JavaScript 
function combineArrays(arr1, arr2) {
  let combinedArr = [...arr1];
  for (let i of arr2) {
    ___
  }
  return combinedArr;
}"
Create a Python program that will take an array of integers as input and output a reversed version of the array.,"[1,2,3,4,5]","def reverseArray(arr): 
    return arr[::-1] 
  
arr = [1,2,3,4,5] 
reverseArr = reverseArray(arr) 
  
print(""Reversed array is"", reverseArr)",Data Structure,5817,"def reverseArray(arr): 
    return arr[::-1] 
  
arr = [1,2,3,4,5] 
reverseArr = reverseArray(arr) 
  
print(""Reversed array is"", reverseArr)","def reverseArray(arr): 
    return arr[::-1] 
  
arr = [1,2,3,4,5] 
reverseArr = reverseArray(arr) 
  
    ___"
Write a function in Python that uses an exponential function to calculate the number of steps needed for a particular sorting algorithm for a given array,"A=[1,2,3,4], sorting algorithm is Merge Sort","def merge_complexity(arr, sort):
    n = len(arr)

    # base case
    if (n <= 1): 
        return 0

    # Merge sort complexity calculation
    if (sort == ""Merge Sort""): 
        return (n * log(n, 2))

# Driver code 
A = [1, 2, 3, 4]
print(merge_complexity(A, 'Merge Sort'))",Data Structure,5825,"def merge_complexity(arr, sort):
    n = len(arr)

    # base case
    if (n <= 1): 
        return 0

    # Merge sort complexity calculation
    if (sort == ""Merge Sort""): 
        return (n * log(n, 2))

# Driver code 
A = [1, 2, 3, 4]
print(merge_complexity(A, 'Merge Sort'))","    ___
    n = len(arr)

    # base case
    if (n <= 1): 
        return 0

    ___
    ___
        return (n * log(n, 2))

# Driver code 
A = [1, 2, 3, 4]
print(merge_complexity(A, 'Merge Sort'))"
Create a Python program to generate a 2D array of a defined size and fill it with random numbers.,Size of the array: 10x10,"import random

# define the size of the array
x, y = 10, 10

# create an empty array of the given size
arr = [[0 for j in range(x)] for i in range(y)]

# fill the array with random numbers
for i in range(x):
 for j in range(y):
 arr[i][j] = random.randint(0, 9)

# print the array
for i in range(x):
 print(arr[i])",Data Structure,5870,"import random

# define the size of the array
x, y = 10, 10

# create an empty array of the given size
arr = [[0 for j in range(x)] for i in range(y)]

# fill the array with random numbers
for i in range(x):
 for j in range(y):
 arr[i][j] = random.randint(0, 9)

# print the array
for i in range(x):
 print(arr[i])","import random

    ___
x, y = 10, 10

    ___
arr = [[0 for j in range(x)] for i in range(y)]

    ___
for i in range(x):
 for j in range(y):
 arr[i][j] = random.randint(0, 9)

    ___
for i in range(x):
 print(arr[i])"
"Given a list of numbers, write a python program that finds an index of an array element and its corresponding value.","my_list = [2,4,6,8,10]","def find_index_and_value(my_list):
    for i, num in enumerate(my_list):
        print(""Element with index %d has value %d"" % (i, num))

my_list = [2,4,6,8,10]
find_index_and_value(my_list)",Data Structure,5900,"def find_index_and_value(my_list):
    for i, num in enumerate(my_list):
        print(""Element with index %d has value %d"" % (i, num))

my_list = [2,4,6,8,10]
find_index_and_value(my_list)","def find_index_and_value(my_list):
    for i, num in enumerate(my_list):
    ___

my_list = [2,4,6,8,10]
find_index_and_value(my_list)"
Write an algorithm in Python to find the average value in an array of integers.,"[4, 10, 6, 8]","def avg(arr): 
  
    # calculating length of array 
    n = len(arr) 
    total_sum = 0

    for i in range(0, n): 
        total_sum += arr[i] 
  
    return total_sum / n 

# Driver code 
arr = [4, 10, 6, 8] 
assert avg(arr) == 7.0",Data Structure,5901,"def avg(arr): 
  
    # calculating length of array 
    n = len(arr) 
    total_sum = 0

    for i in range(0, n): 
        total_sum += arr[i] 
  
    return total_sum / n 

# Driver code 
arr = [4, 10, 6, 8] 
assert avg(arr) == 7.0","def avg(arr): 
  
    ___
    n = len(arr) 
    total_sum = 0

    for i in range(0, n): 
        total_sum += arr[i] 
  
    return total_sum / n 

# Driver code 
arr = [4, 10, 6, 8] 
assert avg(arr) == 7.0"
Create a program in Python that removes duplicates from a given array.,"[1,1,2,3,4,5,5,5]","def remove_duplicates(array):
    new_array = []
    for element in array:
        if element not in new_array:
            new_array.append(element)
    return new_array",Data Structure,5930,"def remove_duplicates(array):
    new_array = []
    for element in array:
        if element not in new_array:
            new_array.append(element)
    return new_array","    ___
    new_array = []
    ___
        if element not in new_array:
            new_array.append(element)
    return new_array"
Enhance the following python function to rank elements of the given list in descending order.,"def my_sort(items):
    items.sort()","def my_sort(items):
    items.sort(reverse=True)",Data Structure,5935,"def my_sort(items):
    items.sort(reverse=True)","def my_sort(items):
    ___"
Create a sorting algorithm in Python that sorts a random list of integers in ascending order.,"[45, 33, 38, 10, 49]","def sort(lst): 
    for i in range(len(lst)): 
        min_index = i 
        for j in range(i+1, len(lst)): 
            if lst[min_index] > lst[j]: 
                min_index = j 
  
        lst[i], lst[min_index] = lst[min_index], lst[i] 
  
list = [45, 33, 38, 10, 49] 

sort(list) 

print(list)",Data Structure,5937,"def sort(lst): 
    for i in range(len(lst)): 
        min_index = i 
        for j in range(i+1, len(lst)): 
            if lst[min_index] > lst[j]: 
                min_index = j 
  
        lst[i], lst[min_index] = lst[min_index], lst[i] 
  
list = [45, 33, 38, 10, 49] 

sort(list) 

print(list)","    ___
    for i in range(len(lst)): 
        min_index = i 
        for j in range(i+1, len(lst)): 
            if lst[min_index] > lst[j]: 
                min_index = j 
  
        lst[i], lst[min_index] = lst[min_index], lst[i] 
  
list = [45, 33, 38, 10, 49] 

    ___

print(list)"
Create a Python program to sort an array of strings alphabetically.,"arr_of_strings = [""cat"", ""elephant"", ""dog"", ""bird""]","def alphabetical_sort(arr):
 arr.sort()
 return arr

arrOfStrings = [""cat"", ""elephant"", ""dog"", ""bird""]
sorted_arr = alphabetical_sort(arrOfStrings)
print(sorted_arr)  # Output: [""bird"", ""cat"", ""dog"", ""elephant""]",Data Structure,5973,"def alphabetical_sort(arr):
 arr.sort()
 return arr

arrOfStrings = [""cat"", ""elephant"", ""dog"", ""bird""]
sorted_arr = alphabetical_sort(arrOfStrings)
print(sorted_arr)  # Output: [""bird"", ""cat"", ""dog"", ""elephant""]","def alphabetical_sort(arr):
    ___
 return arr

arrOfStrings = [""cat"", ""elephant"", ""dog"", ""bird""]
sorted_arr = alphabetical_sort(arrOfStrings)
print(sorted_arr)  # Output: [""bird"", ""cat"", ""dog"", ""elephant""]"
Design a Python program to return the largest and smallest elements from a given list.,"[7, 9, 5, 4, 8, 1]","def largest_smallest(array):
    smallest = array[0]
    largest = array[0]

    for element in array:
        if element > largest:
            largest = element
        elif element < smallest: 
            smallest = element

    return (smallest, largest)

largest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)",Data Structure,6006,"def largest_smallest(array):
    smallest = array[0]
    largest = array[0]

    for element in array:
        if element > largest:
            largest = element
        elif element < smallest: 
            smallest = element

    return (smallest, largest)

largest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)","    ___
    ___
    ___

    ___
        if element > largest:
            largest = element
        elif element < smallest: 
            smallest = element

    return (smallest, largest)

largest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)"
"Create a function in Python that takes an array of integers as input, checks if the array is sorted,  and, if not, sorts it.","[3, 1, 4, 2, 5]","def is_sorted(arr):
  sorted_arr = sorted(arr)
  if arr == sorted_arr:
    return True
  else:
    arr.sort()
    return arr",Data Structure,6013,"def is_sorted(arr):
  sorted_arr = sorted(arr)
  if arr == sorted_arr:
    return True
  else:
    arr.sort()
    return arr","def is_sorted(arr):
  sorted_arr = sorted(arr)
  if arr == sorted_arr:
    return True
  else:
    ___
    return arr"
Write a Python program to access an item of a list.,"list1 = [1, 2, 3, 4, 5]
item_index = 3","list1 = [1, 2, 3, 4, 5]
item_index = 3

def access_list_item(my_list, index):
    return my_list[index]

result = access_list_item(list1, item_index)
print(result)",Data Structure,6020,"list1 = [1, 2, 3, 4, 5]
item_index = 3

def access_list_item(my_list, index):
    return my_list[index]

result = access_list_item(list1, item_index)
print(result)","list1 = [1, 2, 3, 4, 5]
item_index = 3

    ___
    ___

result = access_list_item(list1, item_index)
print(result)"
Write a Python program to calculate the mean and standard deviation of an array of numbers.,"[2,3,4,5,7]","mean = 4.4
std = 1.6

import numpy as np

arr = np.array([2, 3, 4, 5, 7])

mean = np.mean(arr)
std = np.std(arr)

print('mean =', mean)
print('std =', std)",Data Structure,6025,"mean = 4.4
std = 1.6

import numpy as np

arr = np.array([2, 3, 4, 5, 7])

mean = np.mean(arr)
std = np.std(arr)

print('mean =', mean)
print('std =', std)","mean = 4.4
std = 1.6

import numpy as np

    ___

mean = np.mean(arr)
std = np.std(arr)

print('mean =', mean)
print('std =', std)"
Edit the following Python program to accept a list of numbers as input and find the second largest number from the list.,"[12, 23, 45, 22, 50]","# Find the second largest number from a given list

numbers = [12, 23, 45, 22, 50]

# Sort the list in ascending order
numbers.sort()

# Get the second largest number
second_largest_num = numbers[-2]

print('The second largest number in the list is:', second_largest_num)",Data Structure,6034,"# Find the second largest number from a given list

numbers = [12, 23, 45, 22, 50]

# Sort the list in ascending order
numbers.sort()

# Get the second largest number
second_largest_num = numbers[-2]

print('The second largest number in the list is:', second_largest_num)","# Find the second largest number from a given list

numbers = [12, 23, 45, 22, 50]

# Sort the list in ascending order
    ___

# Get the second largest number
second_largest_num = numbers[-2]

print('The second largest number in the list is:', second_largest_num)"
"Given the following array of numbers, write a Python program to find the maximum element.","numbers = [1, 43, 78, 3, 92, 42]","#import max from the built-in library
from max import max

#initialize array of numbers
numbers = [1, 43, 78, 3, 92, 42]

#find maximum element
print(max(numbers))

#output
92",Data Structure,6087,"#import max from the built-in library
from max import max

#initialize array of numbers
numbers = [1, 43, 78, 3, 92, 42]

#find maximum element
print(max(numbers))

#output
92","#import max from the built-in library
from max import max

    ___
numbers = [1, 43, 78, 3, 92, 42]

#find maximum element
print(max(numbers))

#output
92"
Create a Python program that takes a list of strings as input and prints them in alphabetical order.,"['apple', 'mango', 'banana']","def sort_strings(strings):
    strings.sort()
    for string in strings:
        print(string)

sort_strings(['apple', 'mango', 'banana'])",Data Structure,6096,"def sort_strings(strings):
    strings.sort()
    for string in strings:
        print(string)

sort_strings(['apple', 'mango', 'banana'])","def sort_strings(strings):
    ___
    for string in strings:
        print(string)

sort_strings(['apple', 'mango', 'banana'])"
Create a function in Python to find all the indices of a given item in a list.,"list = [1,2,3,4,5,2]
item = 2","def find_all_indices(list, item):
    result = []
    for index, i in enumerate(list):
        if i == item: result.append(index)
    return result

list = [1,2,3,4,5,2]
item = 2

#find all indices of the item
indices = find_all_indices(list, item)

#print the indices
print(indices) # [1, 5]",Data Structure,6098,"def find_all_indices(list, item):
    result = []
    for index, i in enumerate(list):
        if i == item: result.append(index)
    return result

list = [1,2,3,4,5,2]
item = 2

#find all indices of the item
indices = find_all_indices(list, item)

#print the indices
print(indices) # [1, 5]","def find_all_indices(list, item):
    result = []
    ___
    ___
    return result

list = [1,2,3,4,5,2]
item = 2

#find all indices of the item
indices = find_all_indices(list, item)

#print the indices
print(indices) # [1, 5]"
Write a Python program to calculate the Gini coefficient of the following data set.,"data = [14, 17, 20, 21, 32]","def gini(data):
    n = len(data)
    data.sort()
 
    gini_coef = 0
    for k in range(n):
        i = n - k - 1
        gini_coef += (2 * i + 1 - n) * data[i]
    gini_coef = gini_coef / (n * sum(data))
 
    return gini_coef

print(gini(data))
# Output: 0.32",Data Structure,6120,"def gini(data):
    n = len(data)
    data.sort()
 
    gini_coef = 0
    for k in range(n):
        i = n - k - 1
        gini_coef += (2 * i + 1 - n) * data[i]
    gini_coef = gini_coef / (n * sum(data))
 
    return gini_coef

print(gini(data))
# Output: 0.32","def gini(data):
    n = len(data)
    ___
 
    gini_coef = 0
    for k in range(n):
        i = n - k - 1
        gini_coef += (2 * i + 1 - n) * data[i]
    gini_coef = gini_coef / (n * sum(data))
 
    return gini_coef

print(gini(data))
# Output: 0.32"
Generate a Python code snippet to sort a given list.,"list = [5, 4, 9, 2, 1]","list.sort()
print(list)",Data Structure,6136,"list.sort()
print(list)","    ___
print(list)"
Create a program in Python that outputs the kth smallest element in a given list of numbers.,"list = [15, 28, 12, 7, 9]
k = 4","list = [15, 28, 12, 7, 9] # List of numbers
k = 4 # kth smallest element

sorted_list = sorted(list) # sorting the list of numbers

print(""The {}th smallest element is {}"".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)",Data Structure,6181,"list = [15, 28, 12, 7, 9] # List of numbers
k = 4 # kth smallest element

sorted_list = sorted(list) # sorting the list of numbers

print(""The {}th smallest element is {}"".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)","list = [15, 28, 12, 7, 9] # List of numbers
k = 4 # kth smallest element

sorted_list = sorted(list) # sorting the list of numbers

    ___"
"Create a Python script that takes in a list of numbers and calculates the sum, mean, and median.","[1, 2, 3, 4, 5]","my_list = [1, 2, 3, 4, 5]

sum_list = sum(my_list)
mean_list = sum_list / len(my_list)

my_list.sort()
middle_index = int(len(my_list) / 2)

if len(my_list) % 2 == 0:
 median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2
else:
 median_list = my_list[middle_index+1]

print('sum', sum_list)
print('mean', mean_list)
print('median', median_list)",Data Structure,6192,"my_list = [1, 2, 3, 4, 5]

sum_list = sum(my_list)
mean_list = sum_list / len(my_list)

my_list.sort()
middle_index = int(len(my_list) / 2)

if len(my_list) % 2 == 0:
 median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2
else:
 median_list = my_list[middle_index+1]

print('sum', sum_list)
print('mean', mean_list)
print('median', median_list)","my_list = [1, 2, 3, 4, 5]

sum_list = sum(my_list)
mean_list = sum_list / len(my_list)

    ___
middle_index = int(len(my_list) / 2)

if len(my_list) % 2 == 0:
 median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2
else:
 median_list = my_list[middle_index+1]

print('sum', sum_list)
print('mean', mean_list)
print('median', median_list)"
Write a Python program to sort a given list in ascending order of the length of each element.,"numbers = [4, 8, 1, 16, 9, 7]","def sortList(numbers): 
    numbers.sort(key = len) 
    return numbers 

numbers = sortList(numbers) 
print(numbers)

# Output: [4, 8, 1, 7, 9, 16]",Data Structure,6214,"def sortList(numbers): 
    numbers.sort(key = len) 
    return numbers 

numbers = sortList(numbers) 
print(numbers)

# Output: [4, 8, 1, 7, 9, 16]","def sortList(numbers): 
    ___
    return numbers 

numbers = sortList(numbers) 
print(numbers)

# Output: [4, 8, 1, 7, 9, 16]"
Devolop a Python code to remove the duplicates from a given list and sort them in ascending order.,"[2, 8, 5, 2, 6, 3, 4]","my_list = [2, 8, 5, 2, 6, 3, 4]
my_list = list(dict.fromkeys(my_list))
my_list.sort()
print(my_list) # [2, 3, 4, 5, 6, 8]",Data Structure,6227,"my_list = [2, 8, 5, 2, 6, 3, 4]
my_list = list(dict.fromkeys(my_list))
my_list.sort()
print(my_list) # [2, 3, 4, 5, 6, 8]","my_list = [2, 8, 5, 2, 6, 3, 4]
my_list = list(dict.fromkeys(my_list))
    ___
print(my_list) # [2, 3, 4, 5, 6, 8]"
Develop a sorting algorithm in Python that can sort an array of integers in ascending order.,"[2, 3, 1, 7, 5, 4]","def sort(arr):
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      if arr[i] > arr[j]:
        arr[i], arr[j] = arr[j], arr[i]
  return arr

sort([2, 3, 1, 7, 5, 4])
# Output: [1, 2, 3, 4, 5, 7]",Data Structure,6232,"def sort(arr):
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      if arr[i] > arr[j]:
        arr[i], arr[j] = arr[j], arr[i]
  return arr

sort([2, 3, 1, 7, 5, 4])
# Output: [1, 2, 3, 4, 5, 7]","    ___
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      if arr[i] > arr[j]:
        arr[i], arr[j] = arr[j], arr[i]
  return arr

    ___
# Output: [1, 2, 3, 4, 5, 7]"
Develop an optimized function to sort a list of elements using algorithms in Python,"The list contains [3, 9, 1, 4, 5]","def sort_list(arr):
    # Insertion sort algorithm
    for i in range(1, len(arr)):
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
            arr[j+1] = arr[j] 
            j -= 1
        arr[j+1] = key 
    return arr

sorted_arr = sort_list([3, 9, 1, 4, 5])",Data Structure,6237,"def sort_list(arr):
    # Insertion sort algorithm
    for i in range(1, len(arr)):
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
            arr[j+1] = arr[j] 
            j -= 1
        arr[j+1] = key 
    return arr

sorted_arr = sort_list([3, 9, 1, 4, 5])","def sort_list(arr):
    ___
    for i in range(1, len(arr)):
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
            arr[j+1] = arr[j] 
            j -= 1
        arr[j+1] = key 
    return arr

sorted_arr = sort_list([3, 9, 1, 4, 5])"
Python code to find out if a linked list has a loop,"Head of link list
|
v
1 -> 2 -> 3 -> 4
 ^         |
 |_________|","def hasLoop(self): 
    if self.head is None: 
        return False 
  
    slow = fast = self.head 
    while(slow and fast and fast.next): 
        slow = slow.next
        fast = fast.next.next
        if slow == fast: 
            return True  
          
    return False",Data Structure,6265,"def hasLoop(self): 
    if self.head is None: 
        return False 
  
    slow = fast = self.head 
    while(slow and fast and fast.next): 
        slow = slow.next
        fast = fast.next.next
        if slow == fast: 
            return True  
          
    return False","def hasLoop(self): 
    ___
        return False 
  
    ___
    while(slow and fast and fast.next): 
        slow = slow.next
        fast = fast.next.next
        if slow == fast: 
            return True  
          
    return False"
Generate a python program that takes in a list and an integer and prints the element at index in the list,"list = [""a"", ""b"", ""c"", ""d""] and integer = 2","def print_element(lst, index):
    print(lst[index])",Data Structure,6268,"def print_element(lst, index):
    print(lst[index])","    ___
    ___"
Create a python function that takes a list of integers as input and returns the list with the numbers sorted in descending order.,"[5, 4, 3, 2, 1]","def sortList(nums): 
 
    # sort the list in descending order 
    nums.sort(reverse = True) 
   
    # return the sorted list 
    return nums 
   
# driver code 
list = [5, 4, 3, 2, 1] 
print(sortList(list))",Data Structure,6302,"def sortList(nums): 
 
    # sort the list in descending order 
    nums.sort(reverse = True) 
   
    # return the sorted list 
    return nums 
   
# driver code 
list = [5, 4, 3, 2, 1] 
print(sortList(list))","def sortList(nums): 
 
    ___
    ___
   
    # return the sorted list 
    return nums 
   
# driver code 
list = [5, 4, 3, 2, 1] 
print(sortList(list))"
Create a python command line interface to search a given array.,"Six colors: red, orange, yellow, green, blue, purple","def search_colors():
    colors = [""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""purple""]
    query = input(""What color would you like to search for? "")
    if query in colors:
        print(""The color exists in the list."")
    else:
        print(""The color does not exist in the list."")",Data Structure,6348,"def search_colors():
    colors = [""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""purple""]
    query = input(""What color would you like to search for? "")
    if query in colors:
        print(""The color exists in the list."")
    else:
        print(""The color does not exist in the list."")","def search_colors():
    colors = [""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""purple""]
    ___
    if query in colors:
        print(""The color exists in the list."")
    else:
        print(""The color does not exist in the list."")"
Create a command line utility in Python that takes as input a search query and outputs a list of relevant webpages for the query.,"Search query: ""What is code generation?""","import requests

query = input('Search query: ')
url = 'https://www.google.com/search?q=' + query

r = requests.get(url)

if r.status_code == 200: 
    print('Search results:')
    for item in r.json()['items']:
        print(item['title'] + ' - ' + item['url'])
else:
    print('An error occurred!')",Data Structure,6363,"import requests

query = input('Search query: ')
url = 'https://www.google.com/search?q=' + query

r = requests.get(url)

if r.status_code == 200: 
    print('Search results:')
    for item in r.json()['items']:
        print(item['title'] + ' - ' + item['url'])
else:
    print('An error occurred!')","import requests

query = input('Search query: ')
    ___

r = requests.get(url)

if r.status_code == 200: 
    print('Search results:')
    for item in r.json()['items']:
        print(item['title'] + ' - ' + item['url'])
else:
    print('An error occurred!')"
Write a Python program to pad a 3D array along its first two axes.,"arr = [[[1, 2, 3], [4, 5, 6]],
       [[7, 8, 9], [10, 11, 12]]]","import numpy as np

arr = np.array([[[1, 2, 3], [4, 5, 6]],
                [[7, 8, 9], [10, 11, 12]]])

# Pad the array with 0s along its first two axes

arr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0)",Data Structure,6368,"import numpy as np

arr = np.array([[[1, 2, 3], [4, 5, 6]],
                [[7, 8, 9], [10, 11, 12]]])

# Pad the array with 0s along its first two axes

arr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0)","import numpy as np

    ___
                [[7, 8, 9], [10, 11, 12]]])

    ___

arr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0)"
Write a function in Python to find the kth smallest element in an unsorted array.,"input_array = [7, 2, 5, 9, 6], k = 4","def kth_smallest(input_array, k):
    input_array.sort()
    return input_array[k-1]",Data Structure,6371,"def kth_smallest(input_array, k):
    input_array.sort()
    return input_array[k-1]","def kth_smallest(input_array, k):
    ___
    return input_array[k-1]"
Create a class in Python that takes an array as an argument and reverses the elements.,"[1, 2, 3, 4]","class ReverseArray:
 def __init__(self, array):
 self.array = array
 
 def reverse(self):
 self.array.reverse()
 
 # To test with given input
 array = [1, 2, 3, 4]
 rev_array = ReverseArray(array)
 rev_array.reverse()
 print(array) # Output: [4, 3, 2, 1]",Data Structure,6395,"class ReverseArray:
 def __init__(self, array):
 self.array = array
 
 def reverse(self):
 self.array.reverse()
 
 # To test with given input
 array = [1, 2, 3, 4]
 rev_array = ReverseArray(array)
 rev_array.reverse()
 print(array) # Output: [4, 3, 2, 1]","class ReverseArray:
    ___
    ___
 
 def reverse(self):
    ___
 
 # To test with given input
    ___
    ___
 rev_array.reverse()
    ___"
Develop an algorithm in Python for clustering a set of data points.,"Input Data (x, y, z): [(1, 2, 3), (4, 5, 6), (7, 8, 9)]","from sklearn.cluster import KMeans
import numpy as np

# Create array of the data points
data_points = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate clusters
kmeans = KMeans(n_clusters=3).fit(data_points)

# Get labels for each point
labels = kmeans.predict(data_points)

# Print clusters
print(labels) # Output: [0, 1, 2]",Data Structure,6396,"from sklearn.cluster import KMeans
import numpy as np

# Create array of the data points
data_points = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate clusters
kmeans = KMeans(n_clusters=3).fit(data_points)

# Get labels for each point
labels = kmeans.predict(data_points)

# Print clusters
print(labels) # Output: [0, 1, 2]","from sklearn.cluster import KMeans
import numpy as np

    ___
    ___

# Calculate clusters
kmeans = KMeans(n_clusters=3).fit(data_points)

# Get labels for each point
labels = kmeans.predict(data_points)

# Print clusters
print(labels) # Output: [0, 1, 2]"
Develop an algorithm in Python for sorting the following array in ascending order.,"[9, 8, 11, 5]","def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

array = [9, 8, 11, 5]
bubble_sort(array)
print(array)",Data Structure,6421,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

array = [9, 8, 11, 5]
bubble_sort(array)
print(array)","def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

    ___
    ___
    ___"
Generate a Python script to sort a list of integers,"Input: [3, 8, 1, 5, 6]","def sort_list(my_list):
    my_list.sort()
    return my_list

print(sort_list([3,8,1,5,6]))",Data Structure,6462,"def sort_list(my_list):
    my_list.sort()
    return my_list

print(sort_list([3,8,1,5,6]))","def sort_list(my_list):
    ___
    return my_list

print(sort_list([3,8,1,5,6]))"
Write a Python program to sort a list of tuples according to its second parameter in ascending order.,"list = [(""yellow"", 28), (""blue"", 30), (""black"", 25), (""pink"", 45)]","def sort_tuples(list): 
    """"""Function to sort tuples according to their second parameter"""""" 
    list.sort(key = lambda x : x[1]) 
    return list

#Example:
print(sort_tuples(list))",Data Structure,6466,"def sort_tuples(list): 
    """"""Function to sort tuples according to their second parameter"""""" 
    list.sort(key = lambda x : x[1]) 
    return list

#Example:
print(sort_tuples(list))","def sort_tuples(list): 
    ___
    ___
    return list

#Example:
print(sort_tuples(list))"
Develop a program in Python to classify the elements in an array as even or odd.,"An array with 10 elements [1,2,3,4,5,6,7,8,9,10]","evenArray = []
oddArray = []
for i in array:
  if i % 2 == 0:
    evenArray.append(i)
  else:
    oddArray.append(i)",Data Structure,6480,"evenArray = []
oddArray = []
for i in array:
  if i % 2 == 0:
    evenArray.append(i)
  else:
    oddArray.append(i)","evenArray = []
oddArray = []
    ___
  if i % 2 == 0:
    evenArray.append(i)
  else:
    oddArray.append(i)"
Utilize array sorting to sort an array in Python.,"arr = [10, 7, 8, 4, 2, 9]","arr.sort() 
print(arr)",Data Structure,6501,"arr.sort() 
print(arr)","    ___
print(arr)"
Create a Python algorithm that finds the maximum value of an array,"a = [5, 9, 8, 2, 1, 3]","def maxValue(array):
    max = array[0]
    for num in array:
        if num > max:
            max = num
    return max

a = [5, 9 ,8, 2, 1, 3]
print(maxValue(a))",Data Structure,6506,"def maxValue(array):
    max = array[0]
    for num in array:
        if num > max:
            max = num
    return max

a = [5, 9 ,8, 2, 1, 3]
print(maxValue(a))","    ___
    ___
    ___
        if num > max:
            max = num
    return max

a = [5, 9 ,8, 2, 1, 3]
print(maxValue(a))"
Write a function to delete the last item from a list in Python.,"[1,2,3,4,5]","def delete_last_item(lst):
  lst.pop()
  return lst

print(delete_last_item([1,2,3,4,5]))",Data Structure,6509,"def delete_last_item(lst):
  lst.pop()
  return lst

print(delete_last_item([1,2,3,4,5]))","def delete_last_item(lst):
    ___
  return lst

print(delete_last_item([1,2,3,4,5]))"
Create a program that sorts a list of strings in alphabetical order.,"['python', 'javascript', 'java', 'go']","""""""
Create a program that sorts a list of strings in alphabetical order.
""""""

def sort_list(lst):
    """"""
    This function sorts a list of strings in alphabetical order.
    """"""
    lst.sort()
    return lst
 
if __name__ == '__main__':
    lst = ['python', 'javascript', 'java', 'go']
    print(sort_list(lst))",Data Structure,6516,"""""""
Create a program that sorts a list of strings in alphabetical order.
""""""

def sort_list(lst):
    """"""
    This function sorts a list of strings in alphabetical order.
    """"""
    lst.sort()
    return lst
 
if __name__ == '__main__':
    lst = ['python', 'javascript', 'java', 'go']
    print(sort_list(lst))","""""""
Create a program that sorts a list of strings in alphabetical order.
""""""

def sort_list(lst):
    """"""
    This function sorts a list of strings in alphabetical order.
    """"""
    ___
    return lst
 
if __name__ == '__main__':
    lst = ['python', 'javascript', 'java', 'go']
    print(sort_list(lst))"
Create a Python web scraper to scrape a list of business email addresses from a web page.,Website: www.example.com,"import requests 
from bs4 import BeautifulSoup

# make a request to the website
r = requests.get('www.example.com')

# parse the content
soup = BeautifulSoup(r.content, 'html.parser')

# find all elements with the class ""business-email""
emails = soup.find_all(class_=""business-email"")

# extract the email from each element
emails = [e.text for e in emails]",Data Structure,6517,"import requests 
from bs4 import BeautifulSoup

# make a request to the website
r = requests.get('www.example.com')

# parse the content
soup = BeautifulSoup(r.content, 'html.parser')

# find all elements with the class ""business-email""
emails = soup.find_all(class_=""business-email"")

# extract the email from each element
emails = [e.text for e in emails]","import requests 
from bs4 import BeautifulSoup

# make a request to the website
r = requests.get('www.example.com')

# parse the content
soup = BeautifulSoup(r.content, 'html.parser')

# find all elements with the class ""business-email""
emails = soup.find_all(class_=""business-email"")

    ___
emails = [e.text for e in emails]"
Develop an algorithm in Python to find the numbers that are divisible by 3 and 5 from a given array.,"[5, 15, 20, 7, 10]","def divisible_by_3_5(array):
    result = []
    for num in array:
        if (num % 3 == 0) and (num % 5 == 0):
            result.append(num)
    return result

print(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]",Data Structure,6523,"def divisible_by_3_5(array):
    result = []
    for num in array:
        if (num % 3 == 0) and (num % 5 == 0):
            result.append(num)
    return result

print(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]","    ___
    result = []
    ___
        if (num % 3 == 0) and (num % 5 == 0):
            result.append(num)
    return result

print(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]"
Create an algorithm in Python to count all the even numbers in a given list of numbers,"[1, 2, 3, 4, 5, 6]","def count_even(array):
    count = 0
    for num in array:
        if num % 2 == 0:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6]
print(count_even(arr)) # Output: 3",Data Structure,6530,"def count_even(array):
    count = 0
    for num in array:
        if num % 2 == 0:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6]
print(count_even(arr)) # Output: 3","    ___
    count = 0
    ___
        if num % 2 == 0:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6]
print(count_even(arr)) # Output: 3"
Create a function in Python that takes in a list and returns the median value of the list.,"List: [2, 7, 3, 8, 5]","def median(nums):
    nums.sort()
    mid = len(nums) // 2
    
    if len(nums) % 2 == 0:
        return (nums[mid] + nums[mid-1]) / 2
    else:
        return nums[mid]",Data Structure,6535,"def median(nums):
    nums.sort()
    mid = len(nums) // 2
    
    if len(nums) % 2 == 0:
        return (nums[mid] + nums[mid-1]) / 2
    else:
        return nums[mid]","def median(nums):
    ___
    mid = len(nums) // 2
    
    if len(nums) % 2 == 0:
        return (nums[mid] + nums[mid-1]) / 2
    else:
        return nums[mid]"
Generate a Python program to filter a given list of names based on user search input.,"Names: [""Taylor"", ""Hilton"", ""John"", ""Jack"", ""Justin""]
User search input: ""J""","names = [""Taylor"", ""Hilton"", ""John"", ""Jack"", ""Justin""]

search_input = input(""Enter a name to search: "")

filtered_names = []
for name in names:
 if search_input in name:
  filtered_names.append(name)
print(filtered_names)",Data Structure,6542,"names = [""Taylor"", ""Hilton"", ""John"", ""Jack"", ""Justin""]

search_input = input(""Enter a name to search: "")

filtered_names = []
for name in names:
 if search_input in name:
  filtered_names.append(name)
print(filtered_names)","names = [""Taylor"", ""Hilton"", ""John"", ""Jack"", ""Justin""]

    ___

filtered_names = []
for name in names:
 if search_input in name:
  filtered_names.append(name)
print(filtered_names)"
Develop a linear search algorithm in Python to find an element in an array.,"[1, 5, 8, 10], 8","def linearSearch(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
# Driver Code 
arr = [1, 5, 8, 10] 
x = 8
  
# Function call 
result = linearSearch(arr, x) 
  
if(result == -1): 
    print(""Element is not present in the array"") 
else: 
    print(""Element is present at index"", result)",Data Structure,6555,"def linearSearch(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
# Driver Code 
arr = [1, 5, 8, 10] 
x = 8
  
# Function call 
result = linearSearch(arr, x) 
  
if(result == -1): 
    print(""Element is not present in the array"") 
else: 
    print(""Element is present at index"", result)","def linearSearch(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
# Driver Code 
arr = [1, 5, 8, 10] 
x = 8
  
# Function call 
result = linearSearch(arr, x) 
  
if(result == -1): 
    ___
else: 
    ___"
"Given a sorted array of n elements, write a Python program to search for a target element.","n = 7
target = 3
sorted_ary = [1, 2, 3, 5, 8, 9, 11]","def linear_search(sorted_ary, n, target):
	for i in range(0,n):
		if sorted_ary[i] == target:
			return i
	return -1

result = linear_search(sorted_ary, n, target)

if result == -1:
   print(""Element is not present in array"")
else:
   print(""Element is present at index"", result)",Data Structure,6558,"def linear_search(sorted_ary, n, target):
	for i in range(0,n):
		if sorted_ary[i] == target:
			return i
	return -1

result = linear_search(sorted_ary, n, target)

if result == -1:
   print(""Element is not present in array"")
else:
   print(""Element is present at index"", result)","def linear_search(sorted_ary, n, target):
	for i in range(0,n):
		if sorted_ary[i] == target:
			return i
	return -1

result = linear_search(sorted_ary, n, target)

if result == -1:
    ___
else:
    ___"
Write an efficient sorting algorithm in Python that will sort a list of numbers.,"[5, 3, 1, 4, 7, 2, 6]","def sort(nums):
    for i in range(len(nums)):
        min_index = i
        for j in range(i + 1, len(nums)):
            if nums[min_index] > nums[j]:
                min_index = j
        
        nums[i], nums[min_index] = nums[min_index], nums[i]
    
    return nums

print(sort([5, 3, 1, 4, 7, 2, 6]))",Data Structure,6574,"def sort(nums):
    for i in range(len(nums)):
        min_index = i
        for j in range(i + 1, len(nums)):
            if nums[min_index] > nums[j]:
                min_index = j
        
        nums[i], nums[min_index] = nums[min_index], nums[i]
    
    return nums

print(sort([5, 3, 1, 4, 7, 2, 6]))","    ___
    for i in range(len(nums)):
        min_index = i
        for j in range(i + 1, len(nums)):
            if nums[min_index] > nums[j]:
                min_index = j
        
        nums[i], nums[min_index] = nums[min_index], nums[i]
    
    return nums

    ___"
Design a function in Python that takes a list of integers and returns a list of the sum of the two largest integers.,"[10, 5, 15, 20, 7]","def get_largest_sum(nums):
  nums.sort()
  return nums[-1] + nums[-2]",Data Structure,6576,"def get_largest_sum(nums):
  nums.sort()
  return nums[-1] + nums[-2]","def get_largest_sum(nums):
    ___
  return nums[-1] + nums[-2]"
Optimize a code snippet in Python that sorts the given array.,"arr = [5, 4, 3, 2, 1]","# optimized code snippet to sort the given array
arr = [5, 4, 3, 2, 1]
arr.sort()
print(arr)
# arr is now sorted in ascending order as [1, 2, 3, 4, 5]",Data Structure,6579,"# optimized code snippet to sort the given array
arr = [5, 4, 3, 2, 1]
arr.sort()
print(arr)
# arr is now sorted in ascending order as [1, 2, 3, 4, 5]","    ___
arr = [5, 4, 3, 2, 1]
    ___
print(arr)
# arr is now sorted in ascending order as [1, 2, 3, 4, 5]"
Implement a sorting algorithm in Python to sort a given list of numbers in ascending order.,"[3, 7, 1, 4, 9, 5]","def sort(list):
  for i in range(len(list)):
    min_idx = i
    for j in range(i+1, len(list)):
      if list[min_idx] > list[j]:
        min_idx = j
  list[i], list[min_idx] = list[min_idx], list[i]

  return list

list = [3,7,1,4,9,5]
sorted_list = sort(list)

print(sorted_list)",Data Structure,6616,"def sort(list):
  for i in range(len(list)):
    min_idx = i
    for j in range(i+1, len(list)):
      if list[min_idx] > list[j]:
        min_idx = j
  list[i], list[min_idx] = list[min_idx], list[i]

  return list

list = [3,7,1,4,9,5]
sorted_list = sort(list)

print(sorted_list)","    ___
  for i in range(len(list)):
    min_idx = i
    for j in range(i+1, len(list)):
      if list[min_idx] > list[j]:
        min_idx = j
  list[i], list[min_idx] = list[min_idx], list[i]

  return list

list = [3,7,1,4,9,5]
    ___

print(sorted_list)"
Create a Python function that sorts a list of strings in descending order of length.,"['Math', 'English', 'Computer Science', 'Physics']","def sort_by_length_descending(list_of_strings):
    list_of_strings.sort(key=len, reverse=True)
    return list_of_strings

result = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])
print(result)",Data Structure,6623,"def sort_by_length_descending(list_of_strings):
    list_of_strings.sort(key=len, reverse=True)
    return list_of_strings

result = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])
print(result)","def sort_by_length_descending(list_of_strings):
    ___
    return list_of_strings

result = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])
print(result)"
Write a Python class that prints the mean and median of a given list.,"[2, 4, 6, 8, 10]","class MeanMedianCalculator:
    def __init__(self, data):
        self.data = data
    
    def mean(self):
        return sum(self.data) / len(self.data)
    
    def median(self):
        self.data.sort()
        return self.data[(len(self.data)-1) // 2]

calculator = MeanMedianCalculator([2, 4, 6, 8, 10])
print(""Mean is {}, Median is {}"".format(calculator.mean(), calculator.median()))",Data Structure,6634,"class MeanMedianCalculator:
    def __init__(self, data):
        self.data = data
    
    def mean(self):
        return sum(self.data) / len(self.data)
    
    def median(self):
        self.data.sort()
        return self.data[(len(self.data)-1) // 2]

calculator = MeanMedianCalculator([2, 4, 6, 8, 10])
print(""Mean is {}, Median is {}"".format(calculator.mean(), calculator.median()))","class MeanMedianCalculator:
    def __init__(self, data):
        self.data = data
    
    def mean(self):
        return sum(self.data) / len(self.data)
    
    def median(self):
    ___
        return self.data[(len(self.data)-1) // 2]

calculator = MeanMedianCalculator([2, 4, 6, 8, 10])
print(""Mean is {}, Median is {}"".format(calculator.mean(), calculator.median()))"
Create a function in Python that takes a list and sorts its elements in ascending order.,"numbers = [5, 2, 8, 7, 1]","def sortAsc(numbers):
    numbers.sort()
    return numbers",Data Structure,6672,"def sortAsc(numbers):
    numbers.sort()
    return numbers","def sortAsc(numbers):
    ___
    return numbers"
"Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.","nums = [1, 2, 3, 4, 5]","def square_index(nums):
    return [(index, num ** 2) for index, num in enumerate(nums)]

square_index(nums)
# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]",Data Structure,6725,"def square_index(nums):
    return [(index, num ** 2) for index, num in enumerate(nums)]

square_index(nums)
# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]","def square_index(nums):
    ___

square_index(nums)
# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]"
Create a Python program to generate a bar chart of a given data set.,"data_points = [50, 45, 55]","import matplotlib.pyplot as plt

plt.bar(range(len(data_points)), data_points)
plt.title('Bar Chart')
plt.xlabel('index') 
plt.ylabel('value')
plt.show()",Data Structure,6753,"import matplotlib.pyplot as plt

plt.bar(range(len(data_points)), data_points)
plt.title('Bar Chart')
plt.xlabel('index') 
plt.ylabel('value')
plt.show()","import matplotlib.pyplot as plt

plt.bar(range(len(data_points)), data_points)
plt.title('Bar Chart')
    ___
plt.ylabel('value')
plt.show()"
Generate an optimized Python data structure for sorting a large list of numbers.,"[32, 66, 1, 4, 88, 29]","def optimized_sort(numbers):
    # Create a heap
    heap = []

    # Insert each element into the heap
    for num in numbers:
        heapq.heappush(heap, num)

    # Pop elements from the heap and append to result list
    sorted_nums = []
    while heap:
        sorted_nums.append(heapq.heappop(heap))

    return sorted_nums",Data Structure,6770,"def optimized_sort(numbers):
    # Create a heap
    heap = []

    # Insert each element into the heap
    for num in numbers:
        heapq.heappush(heap, num)

    # Pop elements from the heap and append to result list
    sorted_nums = []
    while heap:
        sorted_nums.append(heapq.heappop(heap))

    return sorted_nums","def optimized_sort(numbers):
    ___
    ___

    ___
    for num in numbers:
    ___

    ___
    sorted_nums = []
    ___
    ___

    return sorted_nums"
Write a python program to retrieve the value at a given index of a list.,"Lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
Index = 1","def getValueAtIndex(my_list, index):
    return my_list[index]

result = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) 
print(result)",Data Structure,6812,"def getValueAtIndex(my_list, index):
    return my_list[index]

result = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) 
print(result)","    ___
    ___

result = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) 
print(result)"
Write a Python code to find the number of odd and even numbers in a given array.,"arr = [8, 5, 6, 3, 9]","arr = [8, 5, 6, 3, 9]

odd = 0
even = 0

for num in arr: 
    if num % 2 == 0: 
        even += 1
    else: 
        odd += 1

print(""Number of odd numbers in the array: "", odd)
print(""Number of even numbers in the array: "", even)",Data Structure,6816,"arr = [8, 5, 6, 3, 9]

odd = 0
even = 0

for num in arr: 
    if num % 2 == 0: 
        even += 1
    else: 
        odd += 1

print(""Number of odd numbers in the array: "", odd)
print(""Number of even numbers in the array: "", even)","arr = [8, 5, 6, 3, 9]

odd = 0
even = 0

for num in arr: 
    if num % 2 == 0: 
        even += 1
    else: 
        odd += 1

    ___
    ___"
Update the Python function below so that it sorts the given list of numbers in ascending order.,"[2, 4, 5, 1, 3]","def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([2, 4, 5, 1, 3])
print(result)",Data Structure,6821,"def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([2, 4, 5, 1, 3])
print(result)","def sort_list(numbers):
    ___
    return numbers

result = sort_list([2, 4, 5, 1, 3])
print(result)"
Create a python function which sorts an array of integers into ascending order.,"[3, 7, 8, 1, 5, 4]","def sort_int_asc(arr):
    arr.sort()
    return arr

print(sort_int_asc([3, 7, 8, 1, 5, 4]))",Data Structure,6839,"def sort_int_asc(arr):
    arr.sort()
    return arr

print(sort_int_asc([3, 7, 8, 1, 5, 4]))","def sort_int_asc(arr):
    ___
    return arr

print(sort_int_asc([3, 7, 8, 1, 5, 4]))"
Create a search algorithm using Python to find an item in a list of tuples.,"arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)]
key = 'd'","def search(arr, key): 
    for item in arr: 
        if item[0] == key: 
            return item[1] 
    return ""Not found""
  
# Driver code 
arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] 
key = 'd'
  
print(search(arr, key))",Data Structure,6851,"def search(arr, key): 
    for item in arr: 
        if item[0] == key: 
            return item[1] 
    return ""Not found""
  
# Driver code 
arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] 
key = 'd'
  
print(search(arr, key))","    ___
    for item in arr: 
        if item[0] == key: 
            return item[1] 
    return ""Not found""
  
# Driver code 
arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] 
key = 'd'
  
    ___"
Write a Python program to sort a list of dictionaries by a given key,"[{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'","def sort_dicts(list_dicts, key):
    list_dicts.sort(key=lambda x: x[key])
    return list_dicts

print(sort_dicts([{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'))",Data Structure,6852,"def sort_dicts(list_dicts, key):
    list_dicts.sort(key=lambda x: x[key])
    return list_dicts

print(sort_dicts([{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'))","def sort_dicts(list_dicts, key):
    ___
    return list_dicts

print(sort_dicts([{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'))"
Create a Python Program to sort a list of strings according to the length of their elements.,"list = [""apple"", ""cat"", ""banana"", ""dog""]","def ascending_sort(list):
    list.sort(key=len)
    return list

list = [""apple"", ""cat"", ""banana"", ""dog""]
result = ascending_sort(list)
print(result)",Data Structure,6880,"def ascending_sort(list):
    list.sort(key=len)
    return list

list = [""apple"", ""cat"", ""banana"", ""dog""]
result = ascending_sort(list)
print(result)","def ascending_sort(list):
    ___
    return list

list = [""apple"", ""cat"", ""banana"", ""dog""]
result = ascending_sort(list)
print(result)"
Could you create a function in Python for reaching an element in a given list with a specific index?,"[2, 3, 5, 7, 11], index = 3","def get_element(lst, index):
    return lst[index]",Data Structure,6903,"def get_element(lst, index):
    return lst[index]","    ___
    ___"
Write a Python script to find the second highest number in a list of numbers.,"[12, 2, 6, 8, 19, 15]","list_nums = [12, 2, 6, 8, 19, 15] 
  
# sorting the list in ascending order
list_nums.sort() 
  
# printing the second last element 
print(""Second highest number is:"", list_nums[-2])",Data Structure,6923,"list_nums = [12, 2, 6, 8, 19, 15] 
  
# sorting the list in ascending order
list_nums.sort() 
  
# printing the second last element 
print(""Second highest number is:"", list_nums[-2])","list_nums = [12, 2, 6, 8, 19, 15] 
  
# sorting the list in ascending order
    ___
  
# printing the second last element 
print(""Second highest number is:"", list_nums[-2])"
Write a Python program to find the index of an item in a list.,"my_list = [1,2,3,4]
item = 3","def find_index(lst,item):
  for i in range(len(lst)):
    if item == lst[i]:
      return i

index = find_index(my_list, item)
print(index) # 2",Data Structure,6964,"def find_index(lst,item):
  for i in range(len(lst)):
    if item == lst[i]:
      return i

index = find_index(my_list, item)
print(index) # 2","def find_index(lst,item):
  for i in range(len(lst)):
    if item == lst[i]:
      return i

    ___
    ___"
Develop a Python script which sorts a list of names in alphabetical order,"John, Anna, David, Bob, Alex","names = [""John"", ""Anna"", ""David"", ""Bob"", ""Alex""]
  
# sorting the names 
names.sort() 
  
# printing the first name in the sorted list 
print(""The first name in the sorted list is:"") 
print(names[0])",Data Structure,6975,"names = [""John"", ""Anna"", ""David"", ""Bob"", ""Alex""]
  
# sorting the names 
names.sort() 
  
# printing the first name in the sorted list 
print(""The first name in the sorted list is:"") 
print(names[0])","names = [""John"", ""Anna"", ""David"", ""Bob"", ""Alex""]
  
# sorting the names 
    ___
  
# printing the first name in the sorted list 
print(""The first name in the sorted list is:"") 
print(names[0])"
Write a function in Python to sort a given list according to the second element in the sublist,"list = [['B', 'b'], ['A', 'a'], ['C', 'c']]","def sort_by_second_element(list):
    list.sort(key= lambda x : x[1])
    return list

list = [['B', 'b'], ['A', 'a'], ['C', 'c']]

print(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]",Data Structure,6980,"def sort_by_second_element(list):
    list.sort(key= lambda x : x[1])
    return list

list = [['B', 'b'], ['A', 'a'], ['C', 'c']]

print(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]","def sort_by_second_element(list):
    ___
    return list

list = [['B', 'b'], ['A', 'a'], ['C', 'c']]

print(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]"
Find the maximum number in an array of integers using a Python program.,"[12, 5, 23, 1, 11]","def max_number(array):
    max = array[0]
    for num in array:
        if num > max:
            max = num
    return max

maximum = max_number([12, 5, 23, 1, 11])
print(maximum) # prints: 23",Data Structure,6982,"def max_number(array):
    max = array[0]
    for num in array:
        if num > max:
            max = num
    return max

maximum = max_number([12, 5, 23, 1, 11])
print(maximum) # prints: 23","    ___
    ___
    ___
        if num > max:
            max = num
    return max

maximum = max_number([12, 5, 23, 1, 11])
print(maximum) # prints: 23"
Create a function in Python which takes a list and returns a list of unique elements in ascending order.,"[15, 2, 4, 15, 46, 4, 3, 21]","def unique_list(list): 
  new_list = list(set(list)) 
  new_list.sort() 
  return new_list

print (unique_list([15, 2, 4, 15, 46, 4, 3, 21]))",Data Structure,6983,"def unique_list(list): 
  new_list = list(set(list)) 
  new_list.sort() 
  return new_list

print (unique_list([15, 2, 4, 15, 46, 4, 3, 21]))","def unique_list(list): 
  new_list = list(set(list)) 
    ___
  return new_list

print (unique_list([15, 2, 4, 15, 46, 4, 3, 21]))"
Develop an algorithm in Python to identify the majority element in an unsorted array.,"[3,9,3,3,3,1,3,3]","def find_majority_element(array):
    count = 0
    majority_element = None

    for element in array:
        if count == 0:
            majority_element = element

        count += (1 if element == majority_element else -1)

    return majority_element",Data Structure,7000,"def find_majority_element(array):
    count = 0
    majority_element = None

    for element in array:
        if count == 0:
            majority_element = element

        count += (1 if element == majority_element else -1)

    return majority_element","    ___
    count = 0
    majority_element = None

    ___
        if count == 0:
            majority_element = element

        count += (1 if element == majority_element else -1)

    return majority_element"
Construct a while loop in Python to iterate through a list of items.,"list_items = ['apple', 'banana', 'pear', 'strawberry']","list_items = ['apple', 'banana', 'pear', 'strawberry']

index = 0
while index < len(list_items):
   item = list_items[index]
   print(item)
   index += 1",Data Structure,7019,"list_items = ['apple', 'banana', 'pear', 'strawberry']

index = 0
while index < len(list_items):
   item = list_items[index]
   print(item)
   index += 1","list_items = ['apple', 'banana', 'pear', 'strawberry']

    ___
    ___
    ___
   print(item)
    ___"
Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.,"[4, 9, 16, 25]","def to_dict(lst): 
    # Initialize a new dictionary 
    new_dict = {}
      
    # Iterate over the list and assign the square root of each element as value  
    for item in lst:
        new_dict[item] = item**0.5
      
    # Return the dictionary  
    return new_dict",Data Structure,7028,"def to_dict(lst): 
    # Initialize a new dictionary 
    new_dict = {}
      
    # Iterate over the list and assign the square root of each element as value  
    for item in lst:
        new_dict[item] = item**0.5
      
    # Return the dictionary  
    return new_dict","def to_dict(lst): 
    # Initialize a new dictionary 
    new_dict = {}
      
    ___
    for item in lst:
        new_dict[item] = item**0.5
      
    # Return the dictionary  
    return new_dict"
Create a program in Python to find the second highest number in a list of numbers.,"[8, 5, 11, 6, 9, 15]","# Create an array of numbers
nums = [8, 5, 11, 6, 9, 15]

# Sort the array in descending order
nums.sort(reverse=True)

# Get the second highest number
second_highest = nums[1]

# Output the result
print(""The second highest number is"", second_highest)",Data Structure,7050,"# Create an array of numbers
nums = [8, 5, 11, 6, 9, 15]

# Sort the array in descending order
nums.sort(reverse=True)

# Get the second highest number
second_highest = nums[1]

# Output the result
print(""The second highest number is"", second_highest)","    ___
nums = [8, 5, 11, 6, 9, 15]

    ___
    ___

# Get the second highest number
second_highest = nums[1]

# Output the result
print(""The second highest number is"", second_highest)"
Develop an algorithm in Python that finds the minimum element from a given array.,"[14, 7, 25, 16]","def findMin(arr): 
     
    # Initialize minimum element as first 
    # element of array 
    min = arr[0] 
  
    # Loop through the array and get 
    # the current element 
    for i in range(len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
  
    return min

arr = [14, 7, 25, 16]

print(findMin(arr))",Data Structure,7087,"def findMin(arr): 
     
    # Initialize minimum element as first 
    # element of array 
    min = arr[0] 
  
    # Loop through the array and get 
    # the current element 
    for i in range(len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
  
    return min

arr = [14, 7, 25, 16]

print(findMin(arr))","def findMin(arr): 
     
    # Initialize minimum element as first 
    ___
    min = arr[0] 
  
    ___
    # the current element 
    for i in range(len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
  
    return min

arr = [14, 7, 25, 16]

print(findMin(arr))"
Generate a Python program to find the sum of all even numbers in an array,"[1, 5, 9, 11, 2, 8]","def sumEven(array):
    sum = 0
    for x in array:
        if x % 2 == 0:
            sum += x
    return sum

print(sumEven([1, 5, 9, 11, 2, 8]))",Data Structure,7103,"def sumEven(array):
    sum = 0
    for x in array:
        if x % 2 == 0:
            sum += x
    return sum

print(sumEven([1, 5, 9, 11, 2, 8]))","    ___
    sum = 0
    ___
        if x % 2 == 0:
            sum += x
    return sum

print(sumEven([1, 5, 9, 11, 2, 8]))"
Write a Python function to sort a list of numbers in ascending order.,"[2,4,3,1,5]","def sort_list(list): 
  list.sort() 
  return list
  
print(sort_list([2,4,3,1,5]))",Data Structure,7105,"def sort_list(list): 
  list.sort() 
  return list
  
print(sort_list([2,4,3,1,5]))","def sort_list(list): 
    ___
  return list
  
print(sort_list([2,4,3,1,5]))"
Compare a given set of strings and sort them in descending order using Python.,"['Python', 'Java', 'C++', 'C']","strings = ['Python', 'Java', 'C++', 'C']

strings.sort(reverse=True)

print(strings) # ['Python', 'Java', 'C++', 'C']",Data Structure,7114,"strings = ['Python', 'Java', 'C++', 'C']

strings.sort(reverse=True)

print(strings) # ['Python', 'Java', 'C++', 'C']","strings = ['Python', 'Java', 'C++', 'C']

    ___

print(strings) # ['Python', 'Java', 'C++', 'C']"
Write a Python program to sort a given list of numbers in ascending order.,"[3, 4, 7, 1, 6, 9, 2]","list = [3, 4, 7, 1, 6, 9, 2] 
list.sort() 
print(""Ascending :"",list)",Data Structure,7121,"list = [3, 4, 7, 1, 6, 9, 2] 
list.sort() 
print(""Ascending :"",list)","list = [3, 4, 7, 1, 6, 9, 2] 
    ___
print(""Ascending :"",list)"
Generate code using Python to find the largest and smallest number in a given list.,"[2, 3, 5, 8, 1, 9, 4]","def min_max(array):
    min_val = array[0]
    max_val = array[0]
    for element in array:
        if(element > max_val):
            max_val = element
        if(element < min_val):
            min_val = element
    return (min_val, max_val)",Data Structure,7122,"def min_max(array):
    min_val = array[0]
    max_val = array[0]
    for element in array:
        if(element > max_val):
            max_val = element
        if(element < min_val):
            min_val = element
    return (min_val, max_val)","    ___
    ___
    ___
    ___
        if(element > max_val):
            max_val = element
        if(element < min_val):
            min_val = element
    return (min_val, max_val)"
Sort the following array from smallest to largest without using the built in sort method in Python.,"[5, 4, 2, 1, 3]","def bubbleSort(arr):
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = [5, 4, 2, 1, 3]
bubbleSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])",Data Structure,7163,"def bubbleSort(arr):
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = [5, 4, 2, 1, 3]
bubbleSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])","def bubbleSort(arr):
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = [5, 4, 2, 1, 3]
bubbleSort(arr) 
    ___
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Develop an algorithm in Python to generate a random permutation of a given list.,"[1, 2, 3, 4, 5]","import random

def generate_permutation(nums):
 n = len(nums)
 permutation = []

# Generate a random index and add the element at that index to the list
 for _ in range(n):
 idx = random.randint(0, len(nums) - 1)
 permutation.append(nums[idx])
 nums.pop(idx)

return permutation

# Test the function
print(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]",Data Structure,7189,"import random

def generate_permutation(nums):
 n = len(nums)
 permutation = []

# Generate a random index and add the element at that index to the list
 for _ in range(n):
 idx = random.randint(0, len(nums) - 1)
 permutation.append(nums[idx])
 nums.pop(idx)

return permutation

# Test the function
print(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]","import random

def generate_permutation(nums):
 n = len(nums)
 permutation = []

    ___
 for _ in range(n):
 idx = random.randint(0, len(nums) - 1)
 permutation.append(nums[idx])
    ___

return permutation

# Test the function
print(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]"
Create a python program to output an alphabetically sorted list of strings from an input list of strings.,"[""blue"", ""red"", ""green"", ""yellow""]","def sort_words(words):
    words.sort()
    return words

print(sort_words([""blue"", ""red"", ""green"", ""yellow""]))",Data Structure,7207,"def sort_words(words):
    words.sort()
    return words

print(sort_words([""blue"", ""red"", ""green"", ""yellow""]))","def sort_words(words):
    ___
    return words

print(sort_words([""blue"", ""red"", ""green"", ""yellow""]))"
Design a linear search algorithm for a given list in Python.,"arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]
value = 110","def linearSearch(arr, value):
    
    for i in range(len(arr)):
        if arr[i] == value:
            return i
        
    return -1

arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]
value = 110

idx = linearSearch(arr, value)

if idx != -1:
    print(""Element is present at index"", idx)
else:
    print(""Element is not present in the array"")",Data Structure,7216,"def linearSearch(arr, value):
    
    for i in range(len(arr)):
        if arr[i] == value:
            return i
        
    return -1

arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]
value = 110

idx = linearSearch(arr, value)

if idx != -1:
    print(""Element is present at index"", idx)
else:
    print(""Element is not present in the array"")","def linearSearch(arr, value):
    
    for i in range(len(arr)):
        if arr[i] == value:
            return i
        
    return -1

arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]
value = 110

idx = linearSearch(arr, value)

if idx != -1:
    ___
else:
    ___"
Implement a Python class to sort a given array of integers using Insertion Sort.,"[5, 2, 4, 1, 3]","class InsertionSort:
    def sort(self, arr): 
        for i in range(1, len(arr)): 
            key = arr[i] 
            j = i-1
            while j >=0 and key < arr[j] : 
                    arr[j+1] = arr[j] 
                    j -= 1
            arr[j+1] = key
        return arr

InsertionSort().sort([5, 2, 4, 1, 3])",Data Structure,7217,"class InsertionSort:
    def sort(self, arr): 
        for i in range(1, len(arr)): 
            key = arr[i] 
            j = i-1
            while j >=0 and key < arr[j] : 
                    arr[j+1] = arr[j] 
                    j -= 1
            arr[j+1] = key
        return arr

InsertionSort().sort([5, 2, 4, 1, 3])","class InsertionSort:
    ___
        for i in range(1, len(arr)): 
            key = arr[i] 
            j = i-1
            while j >=0 and key < arr[j] : 
                    arr[j+1] = arr[j] 
                    j -= 1
            arr[j+1] = key
        return arr

    ___"
Find the maximum element in an array of integers and return its index.,"[3,8,15,2,6,10]","// Python
def findMaxElementIndex(arr):
    max_val = max(arr)
    max_index = arr.index(max_val)
    return max_index",Data Structure,7219,"// Python
def findMaxElementIndex(arr):
    max_val = max(arr)
    max_index = arr.index(max_val)
    return max_index","// Python
def findMaxElementIndex(arr):
    max_val = max(arr)
    ___
    return max_index"
Create a Python function to delete the fourth element of a given list.,"[1,2,3,4,5]","def removeFourthElement(lst):
  lst.pop(3)
  return lst

print(removeFourthElement([1,2,3,4,5]))",Data Structure,7252,"def removeFourthElement(lst):
  lst.pop(3)
  return lst

print(removeFourthElement([1,2,3,4,5]))","def removeFourthElement(lst):
    ___
  return lst

print(removeFourthElement([1,2,3,4,5]))"
Design a Python function that rearranges the elements of a given array,"[1, 2, 3, 4, 5]","def rearrange_arr(arr): 
    arr.sort(reverse = True) 
    return arr",Data Structure,7253,"def rearrange_arr(arr): 
    arr.sort(reverse = True) 
    return arr","def rearrange_arr(arr): 
    ___
    return arr"
Can you write a Python program to search a list of numbers and return the index positions of matches?,"list = [1, 5, 7, 8, 10]
number = 8","def search(lst, number):
    for i, n in enumerate(lst):
        if n == number:
            return i
    return -1

result = search(lst, number)
print(result)",Data Structure,7266,"def search(lst, number):
    for i, n in enumerate(lst):
        if n == number:
            return i
    return -1

result = search(lst, number)
print(result)","    ___
    for i, n in enumerate(lst):
        if n == number:
            return i
    return -1

    ___
print(result)"
Develop a function in Python to perform linear search on a given array and return the position of the target element.,"arr = [10, 50, 30, 20, 11], target = 20","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [10, 50, 30, 20, 11]
target = 20

index = linear_search(arr, target)
if index != -1:
    print(""Element found at index"", index)
else:
    print(""Element is not present in the array"")",Data Structure,7288,"def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [10, 50, 30, 20, 11]
target = 20

index = linear_search(arr, target)
if index != -1:
    print(""Element found at index"", index)
else:
    print(""Element is not present in the array"")","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [10, 50, 30, 20, 11]
target = 20

    ___
    ___
    ___
else:
    ___"
Write a function in Python that takes a list of numbers and returns a new list with all the elements sorted in descending order.,"[9,4,3,2,1]","def sort_descending(input):
 input.sort(reverse=True)
 return input",Data Structure,7331,"def sort_descending(input):
 input.sort(reverse=True)
 return input","def sort_descending(input):
    ___
 return input"
Create a function in Python to find the minimum value in a given array.,An array of integers arr[],"def findMin(arr): 
   
    # Initialize minimum element 
    min = arr[0] 
   
    # Traverse array elements starting from 
    # 1st to the last 
    for i in range(1, len(arr)): 
        if arr[i] < min: 
            min = arr[i]
   
    return min

arr = [10, 11, 8, 9, 2] 
print(findMin(arr))",Data Structure,7332,"def findMin(arr): 
   
    # Initialize minimum element 
    min = arr[0] 
   
    # Traverse array elements starting from 
    # 1st to the last 
    for i in range(1, len(arr)): 
        if arr[i] < min: 
            min = arr[i]
   
    return min

arr = [10, 11, 8, 9, 2] 
print(findMin(arr))","def findMin(arr): 
   
    # Initialize minimum element 
    min = arr[0] 
   
    ___
    # 1st to the last 
    for i in range(1, len(arr)): 
        if arr[i] < min: 
            min = arr[i]
   
    return min

arr = [10, 11, 8, 9, 2] 
print(findMin(arr))"
"Create a Python function to sort a list of strings lexicographically, where strings are of varying lengths.","string_list = [""abcd"", ""def"", ""fh"", ""ac"", ""a""]","def lexicographic_sort(string_list):
    # Sort by length
    string_list.sort(key=len)
 
    # Second, sort by alphabetical order
    string_list.sort()
 
    return string_list

string_list = [""abcd"", ""def"", ""fh"", ""ac"", ""a""]
print(lexicographic_sort(string_list)) # [""a"", ""ac"", ""def"", ""fh"", ""abcd""]",Data Structure,7369,"def lexicographic_sort(string_list):
    # Sort by length
    string_list.sort(key=len)
 
    # Second, sort by alphabetical order
    string_list.sort()
 
    return string_list

string_list = [""abcd"", ""def"", ""fh"", ""ac"", ""a""]
print(lexicographic_sort(string_list)) # [""a"", ""ac"", ""def"", ""fh"", ""abcd""]","def lexicographic_sort(string_list):
    # Sort by length
    ___
 
    ___
    ___
 
    return string_list

string_list = [""abcd"", ""def"", ""fh"", ""ac"", ""a""]
print(lexicographic_sort(string_list)) # [""a"", ""ac"", ""def"", ""fh"", ""abcd""]"
Can you design a function in Python to sort a list of tuples based on the second item in the tuple?,"tuples = [(""b"", 0), (""a"", 1), (""c"", -1)]","def sort_tuple(tuples):
    # sort by 2nd item of the tuple
    tuples.sort(key=lambda x: x[1])
    return tuples

# Test
tuples = [(""b"", 0), (""a"", 1), (""c"", -1)]
sorted_tuples = sort_tuple(tuples)
print(sorted_tuples) # [(""c"", -1), (""b"", 0), (""a"", 1)]",Data Structure,7385,"def sort_tuple(tuples):
    # sort by 2nd item of the tuple
    tuples.sort(key=lambda x: x[1])
    return tuples

# Test
tuples = [(""b"", 0), (""a"", 1), (""c"", -1)]
sorted_tuples = sort_tuple(tuples)
print(sorted_tuples) # [(""c"", -1), (""b"", 0), (""a"", 1)]","def sort_tuple(tuples):
    ___
    ___
    return tuples

# Test
tuples = [(""b"", 0), (""a"", 1), (""c"", -1)]
sorted_tuples = sort_tuple(tuples)
print(sorted_tuples) # [(""c"", -1), (""b"", 0), (""a"", 1)]"
Implement a sorting algorithm in Python to sort a list of integers.,"[5, 2, 8, 1, 4]","def sort(list): 

    for i in range(len(list)): 
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j 
                
        list[i], list[min_idx] = list[min_idx], list[i] 
 
list = [5, 2, 8, 1, 4] 
sort(list) 
print(list)",Data Structure,7400,"def sort(list): 

    for i in range(len(list)): 
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j 
                
        list[i], list[min_idx] = list[min_idx], list[i] 
 
list = [5, 2, 8, 1, 4] 
sort(list) 
print(list)","    ___

    for i in range(len(list)): 
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j 
                
        list[i], list[min_idx] = list[min_idx], list[i] 
 
list = [5, 2, 8, 1, 4] 
    ___
print(list)"
Create a function in Python to sort the elements of a list in ascending order.,"[9, 3, 5, 4, 7, 6]","def sort_asc(lst):
    lst.sort()
    return lst",Data Structure,7417,"def sort_asc(lst):
    lst.sort()
    return lst","def sort_asc(lst):
    ___
    return lst"
Suggest an efficient algorithm for sorting an array of integers in Python.,"[1, 5, 3, 8, 4, 2]","def sort_array(array):
    for i in range(len(array)):
        lowest = i
        for j in range(i + 1, len(array)):
            if array[lowest] > array[j]:
                lowest = j
        array[i], array[lowest] = array[lowest], array[i]
    return array

result = sort_array([1, 5, 3, 8, 4, 2])
print(result)",Data Structure,7420,"def sort_array(array):
    for i in range(len(array)):
        lowest = i
        for j in range(i + 1, len(array)):
            if array[lowest] > array[j]:
                lowest = j
        array[i], array[lowest] = array[lowest], array[i]
    return array

result = sort_array([1, 5, 3, 8, 4, 2])
print(result)","    ___
    ___
        lowest = i
    ___
    ___
                lowest = j
    ___
    ___

result = sort_array([1, 5, 3, 8, 4, 2])
print(result)"
"Create a function in Python that takes in an array of integers, and returns a new array with all the elements in the original array multiplied by two.","[1, 2, 3, 4]","def double_array(array):
    return [element*2 for element in array]

double_array([1, 2, 3, 4]) # [2, 4, 6, 8]",Data Structure,7442,"def double_array(array):
    return [element*2 for element in array]

double_array([1, 2, 3, 4]) # [2, 4, 6, 8]","    ___
    ___

double_array([1, 2, 3, 4]) # [2, 4, 6, 8]"
Write a Python program to sort a list of tuples based on the second element of each tuple.,"[(3, 4), (2, 5), (1, 6)]","def sort_list(lst): 
	lst.sort(key = lambda x: x[1]) 
	return lst 

# Driver code 
lst = [(3, 4), (2, 5), (1, 6)] 
print(sort_list(lst)) 

# Output: [(3, 4), (2, 5), (1, 6)]",Data Structure,7457,"def sort_list(lst): 
	lst.sort(key = lambda x: x[1]) 
	return lst 

# Driver code 
lst = [(3, 4), (2, 5), (1, 6)] 
print(sort_list(lst)) 

# Output: [(3, 4), (2, 5), (1, 6)]","def sort_list(lst): 
    ___
	return lst 

# Driver code 
lst = [(3, 4), (2, 5), (1, 6)] 
print(sort_list(lst)) 

# Output: [(3, 4), (2, 5), (1, 6)]"
Generate a Python code snippet to search for a specific value in a 2D list and return its index.,"Value to search for: ""hello""
2D List: [[12, ""goodbye"", 21], [""hello"", 67, 55]]","def search_2d(value, lst):
 for i, row in enumerate(lst):
  if value in row:
   return (i, row.index(value))

print(search_2d(""hello"", [[12, ""goodbye"", 21], [""hello"", 67, 55]]))
# Output: (1, 0)",Data Structure,7512,"def search_2d(value, lst):
 for i, row in enumerate(lst):
  if value in row:
   return (i, row.index(value))

print(search_2d(""hello"", [[12, ""goodbye"", 21], [""hello"", 67, 55]]))
# Output: (1, 0)","def search_2d(value, lst):
 for i, row in enumerate(lst):
  if value in row:
    ___

print(search_2d(""hello"", [[12, ""goodbye"", 21], [""hello"", 67, 55]]))
# Output: (1, 0)"
Write a Python script for sorting an array of numbers.,"[4, 2, 3, 5, 1]","arr = [4, 2, 3, 5, 1]
arr.sort()
print(arr)",Data Structure,7527,"arr = [4, 2, 3, 5, 1]
arr.sort()
print(arr)","arr = [4, 2, 3, 5, 1]
    ___
print(arr)"
