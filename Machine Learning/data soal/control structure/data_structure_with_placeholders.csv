Instruction,Input,Output,materi,question_id,Full Code,Template
Create a Python program to check if an integer is divisible by 5,Integer : 10,"def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)",Control Structure,3,"def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)","def is_divisible_by_5(number):
    if (number % 5 == 0):
    ___
    ___
    ___
    
number = 10
is_divisible_by_5(number)"
Write a python program to check if two sequences are identical.,"[1,2,3], [1,2,3]","def check_seq(seq1, seq2):
    if len (seq1) != len (seq2): 
        return False
    else: 
        for i in range(len (seq1)):
            if seq1[i] != seq2[i]:
                return False
    return True",Control Structure,32,"def check_seq(seq1, seq2):
    if len (seq1) != len (seq2): 
        return False
    else: 
        for i in range(len (seq1)):
            if seq1[i] != seq2[i]:
                return False
    return True","def check_seq(seq1, seq2):
    if len (seq1) != len (seq2): 
    ___
    ___
        for i in range(len (seq1)):
            if seq1[i] != seq2[i]:
    ___
    ___"
Write a Python program to take user input and check if it is a palindrome or not.,racecar,"def isPalindrome(inp):
 inp = inp.lower()
 return inp == inp[::-1]

user_input = input('Enter string: ')
if isPalindrome(user_input):
 print('It\'s a palindrome')
else:
 print('It\'s not a palindrome')",Control Structure,47,"def isPalindrome(inp):
 inp = inp.lower()
 return inp == inp[::-1]

user_input = input('Enter string: ')
if isPalindrome(user_input):
 print('It\'s a palindrome')
else:
 print('It\'s not a palindrome')","def isPalindrome(inp):
 inp = inp.lower()
    ___

user_input = input('Enter string: ')
if isPalindrome(user_input):
 print('It\'s a palindrome')
    ___
 print('It\'s not a palindrome')"
Write a Python script that uses recursion to calculate the Fibonacci sequence for a given number of terms.,6,"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2) 
 
# Driver Program 
n = 6
print(Fibonacci(n))",Control Structure,63,"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2) 
 
# Driver Program 
n = 6
print(Fibonacci(n))","def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
    ___
   elif n==2: 
    ___
    ___
    ___
 
# Driver Program 
n = 6
print(Fibonacci(n))"
Create an API wrapper in Python for the following API,"""https://example.com/api/users/list""","import requests 

# API wrapper for the given API 
def api_wrapper(url): 
    # get the API response 
    response = requests.get(url) 

    # check the response status 
    if(response.status_code == 200): 
        # return json data 
        return response.json()
    else: 
        return None",Control Structure,77,"import requests 

# API wrapper for the given API 
def api_wrapper(url): 
    # get the API response 
    response = requests.get(url) 

    # check the response status 
    if(response.status_code == 200): 
        # return json data 
        return response.json()
    else: 
        return None","import requests 

# API wrapper for the given API 
def api_wrapper(url): 
    # get the API response 
    response = requests.get(url) 

    # check the response status 
    if(response.status_code == 200): 
    ___
    ___
    ___
    ___"
Design a function in Python to determine if a given number is prime.,37,"def is_prime(n):
    if n <= 1: 
        return False
    if n == 2: 
        return True
    if n > 2 and n % 2 == 0: 
        return False

    sqrt_n = int(n**0.5)
    for i in range(3, sqrt_n+1, 2):
        if n % i == 0:
            return False
    return True

if is_prime(37):
    print('37 is a prime number!')",Control Structure,94,"def is_prime(n):
    if n <= 1: 
        return False
    if n == 2: 
        return True
    if n > 2 and n % 2 == 0: 
        return False

    sqrt_n = int(n**0.5)
    for i in range(3, sqrt_n+1, 2):
        if n % i == 0:
            return False
    return True

if is_prime(37):
    print('37 is a prime number!')","def is_prime(n):
    if n <= 1: 
    ___
    if n == 2: 
    ___
    if n > 2 and n % 2 == 0: 
    ___

    sqrt_n = int(n**0.5)
    for i in range(3, sqrt_n+1, 2):
        if n % i == 0:
    ___
    ___

if is_prime(37):
    print('37 is a prime number!')"
Construct a python program to check if two given strings are anagrams.,"String1: army
String2: mary","def isAnagram(str1, str2):  
    n1 = len(str1)
    n2 = len(str2) 
    if n1 != n2: 
        return False
    str1 = ''.join(sorted(str1)) 
    str2 = ''.join(sorted(str2))  
    for i in range(n1):  
        if str1[i] != str2[i]:  
            return False
    return True",Control Structure,134,"def isAnagram(str1, str2):  
    n1 = len(str1)
    n2 = len(str2) 
    if n1 != n2: 
        return False
    str1 = ''.join(sorted(str1)) 
    str2 = ''.join(sorted(str2))  
    for i in range(n1):  
        if str1[i] != str2[i]:  
            return False
    return True","def isAnagram(str1, str2):  
    n1 = len(str1)
    n2 = len(str2) 
    if n1 != n2: 
    ___
    str1 = ''.join(sorted(str1)) 
    str2 = ''.join(sorted(str2))  
    for i in range(n1):  
        if str1[i] != str2[i]:  
    ___
    ___"
"Create a Python program that reads an integer from the console and prints ""true"" if the number is even, and ""false"" if the number is odd.",3,"num = int(input())
if num % 2 == 0:
    print(""true"")
else:
    print(""false"")",Control Structure,141,"num = int(input())
if num % 2 == 0:
    print(""true"")
else:
    print(""false"")","num = int(input())
if num % 2 == 0:
    print(""true"")
    ___
    print(""false"")"
Design a Python program for verifying the two strings are rotations of each other?,"s1 = ""Hello World""
s2 = ""World Hello""","def check_rotation(str1, str2): 
	if len(str1) != len(str2): 
		return False
	temp = str1 + str1
	return (str2 in temp) 

s1 = ""Hello World""
s2 = ""World Hello""
if check_rotation(s1, s2): 
	print('These strings are rotations of each other'); 
else: 
	print('These strings are not rotations of each other')",Control Structure,164,"def check_rotation(str1, str2): 
	if len(str1) != len(str2): 
		return False
	temp = str1 + str1
	return (str2 in temp) 

s1 = ""Hello World""
s2 = ""World Hello""
if check_rotation(s1, s2): 
	print('These strings are rotations of each other'); 
else: 
	print('These strings are not rotations of each other')","def check_rotation(str1, str2): 
	if len(str1) != len(str2): 
    ___
	temp = str1 + str1
    ___

s1 = ""Hello World""
s2 = ""World Hello""
if check_rotation(s1, s2): 
	print('These strings are rotations of each other'); 
    ___
	print('These strings are not rotations of each other')"
Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met.,"error_message = ""The input must be a number!""","def check_input(arg1, arg2):
   if type(arg1) is not int or type(arg2) is not int:
      return ""The input must be a number!""
   else:
      return ""The input is valid!""",Control Structure,182,"def check_input(arg1, arg2):
   if type(arg1) is not int or type(arg2) is not int:
      return ""The input must be a number!""
   else:
      return ""The input is valid!""","def check_input(arg1, arg2):
   if type(arg1) is not int or type(arg2) is not int:
    ___
    ___
    ___"
Create a program in Python to check for duplicate words in a given sentence.,"sentence = ""I am going to the store to buy food""","sentence = ""I am going to the store to buy food""

words = sentence.split(' ')

#Table to keep track of duplicates
table = []

for word in words:
 if word in table:
 print(""Duplicate word found: ""+word)
 else:
 table.append(word)",Control Structure,186,"sentence = ""I am going to the store to buy food""

words = sentence.split(' ')

#Table to keep track of duplicates
table = []

for word in words:
 if word in table:
 print(""Duplicate word found: ""+word)
 else:
 table.append(word)","sentence = ""I am going to the store to buy food""

words = sentence.split(' ')

#Table to keep track of duplicates
table = []

for word in words:
 if word in table:
 print(""Duplicate word found: ""+word)
    ___
 table.append(word)"
Edit the Python program below to add an if condition to determine if an input number is odd or even.,"def odd_or_even(number):
    # your code here","def odd_or_even(number):
    # your code here
    if number % 2 == 0:
        return ""even""
    else:
        return ""odd""",Control Structure,250,"def odd_or_even(number):
    # your code here
    if number % 2 == 0:
        return ""even""
    else:
        return ""odd""","def odd_or_even(number):
    # your code here
    if number % 2 == 0:
    ___
    ___
    ___"
Create a python program that detects if a number is even or odd.,7,"def is_even_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""

result = is_even_odd(7)
print(result)",Control Structure,269,"def is_even_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""

result = is_even_odd(7)
print(result)","def is_even_odd(num):
    if num % 2 == 0:
    ___
    ___
    ___

result = is_even_odd(7)
print(result)"
Write a Python script for combining two dictionaries.,"dict1 = { ""a"" : 1, ""b"" : 2 }
dict2 = { ""c"" : 3, ""d"" : 4 }","def combine_dicts(dict1, dict2): 
    new_dict = dict1.copy() 
    new_dict.update(dict2) 
    return new_dict 
  
dict1 = { ""a"" : 1, ""b"" : 2 }
dict2 = { ""c"" : 3, ""d"" : 4 }
  
print(combine_dicts(dict1, dict2))",Control Structure,287,"def combine_dicts(dict1, dict2): 
    new_dict = dict1.copy() 
    new_dict.update(dict2) 
    return new_dict 
  
dict1 = { ""a"" : 1, ""b"" : 2 }
dict2 = { ""c"" : 3, ""d"" : 4 }
  
print(combine_dicts(dict1, dict2))","def combine_dicts(dict1, dict2): 
    new_dict = dict1.copy() 
    new_dict.update(dict2) 
    ___
  
dict1 = { ""a"" : 1, ""b"" : 2 }
dict2 = { ""c"" : 3, ""d"" : 4 }
  
print(combine_dicts(dict1, dict2))"
Design a program to find the nth term of the Fibonacci sequence for a given number n.,n = 10,"# Python 3 program to find the nth
# Fibonacci number
def Fibonacci(n):
    if n<0:
        print(""Incorrect input"")
    # First Fibonacci number is 0
    elif n==1:
        return 0
    # Second Fibonacci number is 1
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)
 
# Driver Program
print(Fibonacci(10))

# Output
34",Control Structure,310,"# Python 3 program to find the nth
# Fibonacci number
def Fibonacci(n):
    if n<0:
        print(""Incorrect input"")
    # First Fibonacci number is 0
    elif n==1:
        return 0
    # Second Fibonacci number is 1
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)
 
# Driver Program
print(Fibonacci(10))

# Output
34","# Python 3 program to find the nth
# Fibonacci number
def Fibonacci(n):
    if n<0:
        print(""Incorrect input"")
    # First Fibonacci number is 0
    elif n==1:
    ___
    # Second Fibonacci number is 1
    elif n==2:
    ___
    ___
    ___
 
# Driver Program
print(Fibonacci(10))

# Output
34"
Generate a python algorithm to predict the stock price for the given company.,Company: Tesla,"def predict_price(company):
    # Call an appropriate API
    company_data = request_api(company)
    # Use an appropriate ML algorithm
    model = build_model(company_data)
    # Get the prediction
    prediction = model.predict()
    return prediction",Control Structure,341,"def predict_price(company):
    # Call an appropriate API
    company_data = request_api(company)
    # Use an appropriate ML algorithm
    model = build_model(company_data)
    # Get the prediction
    prediction = model.predict()
    return prediction","def predict_price(company):
    # Call an appropriate API
    company_data = request_api(company)
    # Use an appropriate ML algorithm
    model = build_model(company_data)
    # Get the prediction
    prediction = model.predict()
    ___"
"Write a python program that takes in two strings, s1 and s2, and returns a Boolean based on if s1 is a substring of s2.","s1 = 'foo'
s2 = 'foobar'","def is_substring(s1, s2):
    return s1 in s2

substring = is_substring('foo', 'foobar')

print(substring) # Output: True",Control Structure,342,"def is_substring(s1, s2):
    return s1 in s2

substring = is_substring('foo', 'foobar')

print(substring) # Output: True","def is_substring(s1, s2):
    ___

substring = is_substring('foo', 'foobar')

print(substring) # Output: True"
"Create a Python program to grade a multiple choice test with 4 options for each question, and each correct answer is worth 3 points.","Example question:
What color is the sky?
A. Red B. White C. Yellow D. Blue

Correct Answer: D","def grade_test(questions):
    score = 0
    for question in questions:
        if question['answer'] == question['correct_answer']:
            score += 3
    return score",Control Structure,366,"def grade_test(questions):
    score = 0
    for question in questions:
        if question['answer'] == question['correct_answer']:
            score += 3
    return score","def grade_test(questions):
    score = 0
    for question in questions:
        if question['answer'] == question['correct_answer']:
            score += 3
    ___"
Optimize the following python code for a more efficient solution.,"def to_square(nums):
    squares = []
    for num in nums:
        squares.append(num * num)
    return squares","def to_square(nums):
    squares = [num * num for num in nums]
    return squares",Control Structure,382,"def to_square(nums):
    squares = [num * num for num in nums]
    return squares","def to_square(nums):
    squares = [num * num for num in nums]
    ___"
Edit an existing Python code so that it is more efficient and optimized for run time.,"def average(arr):
    sum = 0
    for num in arr:
        sum += num
    avg = float(sum) / len(arr)
    return avg","def average(arr):
    return sum(arr) / len(arr)",Control Structure,415,"def average(arr):
    return sum(arr) / len(arr)","def average(arr):
    ___"
Develop a Python program to detect if an entered number is even or odd.,The entered number is 344,"even_or_odd = int(input(""Please enter a number: ""))
if even_or_odd % 2 == 0:
  print(""The number is Even."")
else:
  print(""The number is Odd."")",Control Structure,429,"even_or_odd = int(input(""Please enter a number: ""))
if even_or_odd % 2 == 0:
  print(""The number is Even."")
else:
  print(""The number is Odd."")","even_or_odd = int(input(""Please enter a number: ""))
if even_or_odd % 2 == 0:
  print(""The number is Even."")
    ___
  print(""The number is Odd."")"
Write a Python script to search a given dictionary for a given word.,"dictionary = {""hello"": ""Str","def search_word(word, dictionary):
    if word in dictionary.keys():
        return dictionary[word]
    else:
        return None

dictionary = {'hello': 'string', 'goodbye': 'bye'}

word = 'hello'

result = search_word(word, dictionary)

if result:
    print('Word found in dictionary: ' + result)

else:
    print('Word not found in dictionary.')",Control Structure,451,"def search_word(word, dictionary):
    if word in dictionary.keys():
        return dictionary[word]
    else:
        return None

dictionary = {'hello': 'string', 'goodbye': 'bye'}

word = 'hello'

result = search_word(word, dictionary)

if result:
    print('Word found in dictionary: ' + result)

else:
    print('Word not found in dictionary.')","def search_word(word, dictionary):
    if word in dictionary.keys():
    ___
    ___
    ___

dictionary = {'hello': 'string', 'goodbye': 'bye'}

word = 'hello'

result = search_word(word, dictionary)

if result:
    print('Word found in dictionary: ' + result)

    ___
    print('Word not found in dictionary.')"
Modify this Python code to add an exception for invalid input.,"def calculate(a, b):
    if b > 0:
        c = a / b
        return c","def calculate(a, b):
    if b == 0:
        raise ZeroDivisionError
    elif b > 0:
        c = a / b
        return c
    else:
        raise ValueError",Control Structure,498,"def calculate(a, b):
    if b == 0:
        raise ZeroDivisionError
    elif b > 0:
        c = a / b
        return c
    else:
        raise ValueError","def calculate(a, b):
    if b == 0:
        raise ZeroDivisionError
    elif b > 0:
        c = a / b
    ___
    ___
        raise ValueError"
Design an algorithm in Python that takes two input arrays and returns true if they have the same elements.,"arr1 = [1, 6, 7, 8]
arr2 = [7, 1, 8, 6]","def is_same_elements(arr1, arr2):
    return set(arr1) == set(arr2)

is_same_elements(arr1, arr2) # return True",Control Structure,534,"def is_same_elements(arr1, arr2):
    return set(arr1) == set(arr2)

is_same_elements(arr1, arr2) # return True","def is_same_elements(arr1, arr2):
    ___

    ___"
Create a function in Python to take two numerical values and return true if one is divisible by the other.,"number1 = 10
number2 = 3","def isDivisible(a, b):
  return a % b == 0

print(isDivisible(number1, number2)) #True",Control Structure,574,"def isDivisible(a, b):
  return a % b == 0

print(isDivisible(number1, number2)) #True","def isDivisible(a, b):
    ___

print(isDivisible(number1, number2)) #True"
Write an algorithm in Python to check if a number is a palindrome.,number = 121,"def is_palindrome(number): 
num = number  
   
# initializing a reverse number  
reverse = 0
  
# Reverse the given number 
while(number > 0): 
   remainder = number % 10
   # Create reverse 
   reverse = (reverse * 10) + remainder 
   number = number // 10 
 
# check if original and reverse numbers are same
if (num == reverse): 
  return True
else: 
  return False",Control Structure,589,"def is_palindrome(number): 
num = number  
   
# initializing a reverse number  
reverse = 0
  
# Reverse the given number 
while(number > 0): 
   remainder = number % 10
   # Create reverse 
   reverse = (reverse * 10) + remainder 
   number = number // 10 
 
# check if original and reverse numbers are same
if (num == reverse): 
  return True
else: 
  return False","def is_palindrome(number): 
num = number  
   
# initializing a reverse number  
reverse = 0
  
# Reverse the given number 
while(number > 0): 
   remainder = number % 10
   # Create reverse 
   reverse = (reverse * 10) + remainder 
   number = number // 10 
 
# check if original and reverse numbers are same
if (num == reverse): 
    ___
    ___
    ___"
Develop Python code to check if a given number is plaindrome.,1454,"def is_plaindrome(num):
    original_num = num
    reversed_num = 0
    while num > 0:
        remainder = num % 10
        reversed_num = (reversed_num * 10) + remainder
        num //= 10
    return reversed_num == original_num

num = 1454
if is_plaindrome(num):
    print(num, ""is a plaindrome"")
else:
    print(num, ""is not a plaindrome"")",Control Structure,591,"def is_plaindrome(num):
    original_num = num
    reversed_num = 0
    while num > 0:
        remainder = num % 10
        reversed_num = (reversed_num * 10) + remainder
        num //= 10
    return reversed_num == original_num

num = 1454
if is_plaindrome(num):
    print(num, ""is a plaindrome"")
else:
    print(num, ""is not a plaindrome"")","def is_plaindrome(num):
    original_num = num
    reversed_num = 0
    while num > 0:
        remainder = num % 10
        reversed_num = (reversed_num * 10) + remainder
        num //= 10
    ___

num = 1454
if is_plaindrome(num):
    print(num, ""is a plaindrome"")
    ___
    print(num, ""is not a plaindrome"")"
Test if a given number is a Prime or not using Python.,number = 32,"if number<=1: 
  print(""Number is not a prime number."") 
for i in range(2,int(number**0.5)+1):
  if(number % i == 0):
    print(""Number is not a prime number."")
    break
else: 
  print(""Number is a prime number."")",Control Structure,596,"if number<=1: 
  print(""Number is not a prime number."") 
for i in range(2,int(number**0.5)+1):
  if(number % i == 0):
    print(""Number is not a prime number."")
    break
else: 
  print(""Number is a prime number."")","if number<=1: 
  print(""Number is not a prime number."") 
for i in range(2,int(number**0.5)+1):
  if(number % i == 0):
    print(""Number is not a prime number."")
    ___
    ___
  print(""Number is a prime number."")"
Create a function in Python to compare two strings and return true if the strings only differ by one character.,"s1 = 'apple'
s2 = 'acple'","def compare_strings(s1, s2):
    mismatch_count = 0

    for i in range(len(s1)):
        if s1[i] != s2[i]:
            if mismatch_count > 0:
                return False

            mismatch_count += 1

    return mismatch_count == 1

compare_strings('apple', 'acple')",Control Structure,604,"def compare_strings(s1, s2):
    mismatch_count = 0

    for i in range(len(s1)):
        if s1[i] != s2[i]:
            if mismatch_count > 0:
                return False

            mismatch_count += 1

    return mismatch_count == 1

compare_strings('apple', 'acple')","def compare_strings(s1, s2):
    mismatch_count = 0

    for i in range(len(s1)):
        if s1[i] != s2[i]:
            if mismatch_count > 0:
    ___

            mismatch_count += 1

    ___

compare_strings('apple', 'acple')"
Write a Python program to calculate the average monthly temperature of a given city for the last 10 years.,"City: Los Angeles, California
10 year average temperature from 2010 to 2020","import csv

def avg_month_temp(city):
 result = 0
 counter = 0
 temperatures = csv.reader(open('weatherdata.csv'))
 for row in temperatures:
 if row[1] == city:
 result += float(row[2])
 counter += 1
 return result/counter",Control Structure,623,"import csv

def avg_month_temp(city):
 result = 0
 counter = 0
 temperatures = csv.reader(open('weatherdata.csv'))
 for row in temperatures:
 if row[1] == city:
 result += float(row[2])
 counter += 1
 return result/counter","import csv

def avg_month_temp(city):
 result = 0
 counter = 0
 temperatures = csv.reader(open('weatherdata.csv'))
 for row in temperatures:
 if row[1] == city:
 result += float(row[2])
 counter += 1
    ___"
Create a Python procedure to determine if two numbers are divisible.,14 and 7,"def divisible(x, y):
    if x % y == 0:
        return True
    else:
        return False",Control Structure,634,"def divisible(x, y):
    if x % y == 0:
        return True
    else:
        return False","def divisible(x, y):
    if x % y == 0:
    ___
    ___
    ___"
Develop a Python script for checking for palindromes.,<none>,"def is_palindrome(word):
  rev_word = word[::-1]
  if word == rev_word:
    return True
  return False",Control Structure,647,"def is_palindrome(word):
  rev_word = word[::-1]
  if word == rev_word:
    return True
  return False","def is_palindrome(word):
  rev_word = word[::-1]
  if word == rev_word:
    ___
    ___"
Write a Python program for finding the root of a given quadratic equation.,"a = 1, b = 5, c = 4","def quadratic(a, b, c):
    # calculate the discriminant
    d = (b**2) - (4*a*c)

    # find the two roots
    root1 = (-b-d**0.5)/(2*a)
    root2 = (-b+d**0.5)/(2*a)
    return root1, root2",Control Structure,717,"def quadratic(a, b, c):
    # calculate the discriminant
    d = (b**2) - (4*a*c)

    # find the two roots
    root1 = (-b-d**0.5)/(2*a)
    root2 = (-b+d**0.5)/(2*a)
    return root1, root2","def quadratic(a, b, c):
    # calculate the discriminant
    d = (b**2) - (4*a*c)

    # find the two roots
    root1 = (-b-d**0.5)/(2*a)
    root2 = (-b+d**0.5)/(2*a)
    ___"
"Write a code to detect if a given text contains the word ""python"".",This post is about programming in python.,"def contains_python(text):
    return ""python"" in text",Control Structure,756,"def contains_python(text):
    return ""python"" in text","def contains_python(text):
    ___"
Design an algorithm to check if a given number is prime in Python.,n = 19,"def is_prime(n):
    """"""Check if a given number is prime.""""""
    # Corner case
    if n <= 1:
        return False

    # Check for divisibility
    for i in range(2, n):
        if n % i == 0:
            return False
    # Return true if it is not divisible by any number
    return True

# Output
print(is_prime(n))",Control Structure,760,"def is_prime(n):
    """"""Check if a given number is prime.""""""
    # Corner case
    if n <= 1:
        return False

    # Check for divisibility
    for i in range(2, n):
        if n % i == 0:
            return False
    # Return true if it is not divisible by any number
    return True

# Output
print(is_prime(n))","def is_prime(n):
    """"""Check if a given number is prime.""""""
    ___
    if n <= 1:
    ___

    # Check for divisibility
    for i in range(2, n):
        if n % i == 0:
    ___
    # Return true if it is not divisible by any number
    ___

# Output
print(is_prime(n))"
Generate a code in Python for validating a given password,"Minimum length of 8 characters and must contain at least 1 uppercase letter, 1 lowercase letter, 1 special character and 1 number","import re

def validate_password(passwd):  
    Rule = re.compile(r""^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{8,}$"")  
    return Rule.search(passwd)",Control Structure,773,"import re

def validate_password(passwd):  
    Rule = re.compile(r""^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{8,}$"")  
    return Rule.search(passwd)","import re

def validate_password(passwd):  
    Rule = re.compile(r""^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{8,}$"")  
    ___"
Design a function to tell if a number is even or odd using Python.,x = 5,"def isEven(x):
    if x % 2 == 0:
        return True
    else:
        return False

x = 5

if isEven(x):
    print(""It is even"")
else:
    print(""It is odd"")",Control Structure,778,"def isEven(x):
    if x % 2 == 0:
        return True
    else:
        return False

x = 5

if isEven(x):
    print(""It is even"")
else:
    print(""It is odd"")","def isEven(x):
    if x % 2 == 0:
    ___
    ___
    ___

x = 5

if isEven(x):
    print(""It is even"")
    ___
    print(""It is odd"")"
Suggest a completion for the following Python code to check if a given number is an Armstrong number.,def is_armstrong_number(num):,"def is_armstrong_number(num):
  order = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
  if num == sum:
    return True  
  else:
    return False",Control Structure,804,"def is_armstrong_number(num):
  order = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
  if num == sum:
    return True  
  else:
    return False","def is_armstrong_number(num):
  order = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
  if num == sum:
    ___
    ___
    ___"
Write a conditional statement in Python that checks if two lists have the same items.,"list1 = [9,8,7]
list2 = [7,8,9]","list1 = [9,8,7]
list2 = [7,8,9]

if list1 == list2:
    print(""The lists have the same items."")
else:
    print(""The lists do not have the same items."")",Control Structure,818,"list1 = [9,8,7]
list2 = [7,8,9]

if list1 == list2:
    print(""The lists have the same items."")
else:
    print(""The lists do not have the same items."")","list1 = [9,8,7]
list2 = [7,8,9]

if list1 == list2:
    print(""The lists have the same items."")
    ___
    print(""The lists do not have the same items."")"
Create a function in Python that takes two strings and checks if they are anagrams of each other.,"""apple"", ""pleap""","def is_anagram(str1, str2): 
    if len(str1)!= len(str2): 
        return False
    first_list = list(str1.lower())
    second_list = list(str2.lower())
    first_list.sort()
    second_list.sort()
    return first_list == second_list

print(is_anagram(""apple"",""pleap""))",Control Structure,841,"def is_anagram(str1, str2): 
    if len(str1)!= len(str2): 
        return False
    first_list = list(str1.lower())
    second_list = list(str2.lower())
    first_list.sort()
    second_list.sort()
    return first_list == second_list

print(is_anagram(""apple"",""pleap""))","def is_anagram(str1, str2): 
    if len(str1)!= len(str2): 
    ___
    first_list = list(str1.lower())
    second_list = list(str2.lower())
    first_list.sort()
    second_list.sort()
    ___

print(is_anagram(""apple"",""pleap""))"
"Convert the following Algorithm into Python code.

Input: two numbers

Algorithm:
1. Check if the two numbers are equal.
2. If true, return 0.
3. Else check the which is higher.
4. Return 1 if the first number is higher than the second one.
5. Return -1 otherwise.","num1 : 5
num2 : 10","def compare_numbers(num1, num2):
 if num1 == num2:
  return 0
 elif num1 > num2:
  return 1
 else:
  return -1

num1 = 5
num2 = 10
result = compare_numbers(num1, num2)

print(result)",Control Structure,891,"def compare_numbers(num1, num2):
 if num1 == num2:
  return 0
 elif num1 > num2:
  return 1
 else:
  return -1

num1 = 5
num2 = 10
result = compare_numbers(num1, num2)

print(result)","def compare_numbers(num1, num2):
 if num1 == num2:
    ___
 elif num1 > num2:
    ___
    ___
    ___

num1 = 5
num2 = 10
result = compare_numbers(num1, num2)

print(result)"
Optimize the following Python code for calculating the square of a number.,"def calculateSquare(x):
    return x * x","def calculateSquare(x):
    return x ** 2",Control Structure,903,"def calculateSquare(x):
    return x ** 2","def calculateSquare(x):
    ___"
Create a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).,"string1 = ""pizza""
string2 = ""appaiz""","def isAnagram(string1, string2):
 s1 = sorted(string1.lower())
 s2 = sorted(string2.lower())

 if s1 == s2:
 return True
 else:
 return False

string1 = ""pizza"";
string2 = ""appaiz"";

isAnagram(string1, string2); // True",Control Structure,906,"def isAnagram(string1, string2):
 s1 = sorted(string1.lower())
 s2 = sorted(string2.lower())

 if s1 == s2:
 return True
 else:
 return False

string1 = ""pizza"";
string2 = ""appaiz"";

isAnagram(string1, string2); // True","def isAnagram(string1, string2):
 s1 = sorted(string1.lower())
 s2 = sorted(string2.lower())

 if s1 == s2:
    ___
    ___
    ___

string1 = ""pizza"";
string2 = ""appaiz"";

isAnagram(string1, string2); // True"
Write a Python program to clean a given dataset for an AI system.,"Dataset:

{
   ""name"": ""John"",
   ""age"": 50,
   ""height"": ""180 cm"",
   ""weight"": ""75 kg""
}","def clean_dataset(dataset):
 cleaned_dataset = dataset.copy()
 cleaned_dataset['age'] = int(dataset['age'])
 cleaned_dataset['height'] = float(dataset['height'].split(' cm')[0])
 cleaned_dataset['weight'] = float(dataset['weight'].split(' kg')[0])
 return cleaned_dataset",Control Structure,917,"def clean_dataset(dataset):
 cleaned_dataset = dataset.copy()
 cleaned_dataset['age'] = int(dataset['age'])
 cleaned_dataset['height'] = float(dataset['height'].split(' cm')[0])
 cleaned_dataset['weight'] = float(dataset['weight'].split(' kg')[0])
 return cleaned_dataset","def clean_dataset(dataset):
 cleaned_dataset = dataset.copy()
 cleaned_dataset['age'] = int(dataset['age'])
 cleaned_dataset['height'] = float(dataset['height'].split(' cm')[0])
 cleaned_dataset['weight'] = float(dataset['weight'].split(' kg')[0])
    ___"
Write a function in Python to predict a label for a given input.,"[5, -2, 4]","def predict(x):
    if x[0] > 0:
        return 'positive'
    if x[1] < 0:
        return 'negative'
    if x[2] > 0:
        return 'positive'
    return 'neutral'",Control Structure,948,"def predict(x):
    if x[0] > 0:
        return 'positive'
    if x[1] < 0:
        return 'negative'
    if x[2] > 0:
        return 'positive'
    return 'neutral'","def predict(x):
    if x[0] > 0:
    ___
    if x[1] < 0:
    ___
    if x[2] > 0:
    ___
    ___"
Create a Python program to check if a given date is valid or not.,"The date to be checked is ""2019/02/29"".","from datetime import datetime
 
date_string = '2019/02/29'
try:
 date = datetime.strptime(date_string, '%Y/%m/%d')
 
 if date.year % 4 == 0 and date.month == 2 and date.day == 29:
 print('Valid Date')
 else:
 print('Invalid Date')
except ValueError:
 print('Invalid Date')",Control Structure,1009,"from datetime import datetime
 
date_string = '2019/02/29'
try:
 date = datetime.strptime(date_string, '%Y/%m/%d')
 
 if date.year % 4 == 0 and date.month == 2 and date.day == 29:
 print('Valid Date')
 else:
 print('Invalid Date')
except ValueError:
 print('Invalid Date')","from datetime import datetime
 
date_string = '2019/02/29'
try:
 date = datetime.strptime(date_string, '%Y/%m/%d')
 
 if date.year % 4 == 0 and date.month == 2 and date.day == 29:
 print('Valid Date')
    ___
 print('Invalid Date')
except ValueError:
 print('Invalid Date')"
"Write a code for sorting the words within a sentence, alphabetically.",Python is a great language,"""""""
Write a code for sorting the words within a sentence, alphabetically.
""""""

def sort_words_alphabetically(sentence):
    words = sentence.split()
    words.sort()
    return ' '.join(words)

if __name__ == '__main__':
    sentence = 'Python is a great language'
    print(sort_words_alphabetically(sentence))",Control Structure,1140,"""""""
Write a code for sorting the words within a sentence, alphabetically.
""""""

def sort_words_alphabetically(sentence):
    words = sentence.split()
    words.sort()
    return ' '.join(words)

if __name__ == '__main__':
    sentence = 'Python is a great language'
    print(sort_words_alphabetically(sentence))","""""""
Write a code for sorting the words within a sentence, alphabetically.
""""""

def sort_words_alphabetically(sentence):
    words = sentence.split()
    words.sort()
    ___

if __name__ == '__main__':
    sentence = 'Python is a great language'
    print(sort_words_alphabetically(sentence))"
Trace the recursive Fibonacci algorithm in Python and test its execution time for different values of n.,num = 10,"import time 

def fib(n): 
 if n<0: 
  print(""Incorrect input"") 
 elif n==1: 
  return 0
 elif n==2: 
  return 1
 else: 
  return fib(n-1)+fib(n-2) 

start = time.time() 

num = 10 
print(fib(num))

print(""Time taken:"", time.time()-start)",Control Structure,1157,"import time 

def fib(n): 
 if n<0: 
  print(""Incorrect input"") 
 elif n==1: 
  return 0
 elif n==2: 
  return 1
 else: 
  return fib(n-1)+fib(n-2) 

start = time.time() 

num = 10 
print(fib(num))

print(""Time taken:"", time.time()-start)","import time 

def fib(n): 
 if n<0: 
  print(""Incorrect input"") 
 elif n==1: 
    ___
 elif n==2: 
    ___
    ___
    ___

start = time.time() 

num = 10 
print(fib(num))

print(""Time taken:"", time.time()-start)"
Author a Python program to check if a number is a palindrome.,1991,"def isPalindrome(num):
  numStr = str(num)
  for i in range(0, len(numStr)//2):
    if numStr[i] != numStr[len(numStr)-i-1]:
      return False
  return True

print(isPalindrome(1991)) # Output: True",Control Structure,1172,"def isPalindrome(num):
  numStr = str(num)
  for i in range(0, len(numStr)//2):
    if numStr[i] != numStr[len(numStr)-i-1]:
      return False
  return True

print(isPalindrome(1991)) # Output: True","def isPalindrome(num):
  numStr = str(num)
  for i in range(0, len(numStr)//2):
    if numStr[i] != numStr[len(numStr)-i-1]:
    ___
    ___

print(isPalindrome(1991)) # Output: True"
Can you develop a program using Python to check if number is prime?,13,"def is_prime(n):
    if (n <= 1): 
        return False
    elif (n <= 3): 
        return True
    elif (n % 2 == 0 or n % 3 == 0): 
        return False 

    i = 5
    while(i * i <= n): 
        if (n % i == 0 or n % (i + 2) == 0): 
            return False
        i = i + 6
  
    return True

print(is_prime(13))",Control Structure,1187,"def is_prime(n):
    if (n <= 1): 
        return False
    elif (n <= 3): 
        return True
    elif (n % 2 == 0 or n % 3 == 0): 
        return False 

    i = 5
    while(i * i <= n): 
        if (n % i == 0 or n % (i + 2) == 0): 
            return False
        i = i + 6
  
    return True

print(is_prime(13))","def is_prime(n):
    if (n <= 1): 
    ___
    elif (n <= 3): 
    ___
    elif (n % 2 == 0 or n % 3 == 0): 
    ___

    i = 5
    while(i * i <= n): 
        if (n % i == 0 or n % (i + 2) == 0): 
    ___
        i = i + 6
  
    ___

print(is_prime(13))"
Write a Python script to extract all the values for a given key from a dictionary.,"dictionary = {
    'key1': 'val1',
    'key2': 'val2',
    'key3': 'val3',
    'key4': 'val4',
}","def get_key_values(dictionary, key):
    return [value for key, value in dictionary.items() if key == key]",Control Structure,1190,"def get_key_values(dictionary, key):
    return [value for key, value in dictionary.items() if key == key]","def get_key_values(dictionary, key):
    ___"
Create a Python function for computing the Fibonacci sequence up to the nth number.,Number n: 10,"def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

print(fibonacci(10)) # outputs 55",Control Structure,1228,"def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

print(fibonacci(10)) # outputs 55","def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    ___

print(fibonacci(10)) # outputs 55"
Implement a Python function for finding the difference between two lists.,"list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]","def difference(list1, list2):
    difference_set = set(list1) - set(list2)
    return list(difference_set)

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]

difference = difference(list1, list2)
print(difference)

# Output:
# [1]",Control Structure,1252,"def difference(list1, list2):
    difference_set = set(list1) - set(list2)
    return list(difference_set)

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]

difference = difference(list1, list2)
print(difference)

# Output:
# [1]","def difference(list1, list2):
    difference_set = set(list1) - set(list2)
    ___

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]

difference = difference(list1, list2)
print(difference)

# Output:
# [1]"
"Write a Python program to calculate the sum of two given integers, but only if both of them are even.","num1 = 6
num2 = 8","def sum_of_two_ints(a,b): 
    if (a % 2 == 0 and b % 2 == 0): 
        return a+b 
    else: 
        return ""Wrong input""

print(sum_of_two_ints(num1,num2))",Control Structure,1270,"def sum_of_two_ints(a,b): 
    if (a % 2 == 0 and b % 2 == 0): 
        return a+b 
    else: 
        return ""Wrong input""

print(sum_of_two_ints(num1,num2))","def sum_of_two_ints(a,b): 
    if (a % 2 == 0 and b % 2 == 0): 
    ___
    ___
    ___

print(sum_of_two_ints(num1,num2))"
Write a Python program to compare two unordered lists to see if they are equal.,"list1 = [3, 4, 5]
list2 = [4, 5, 3]","def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False
    if sorted(list1) == sorted(list2):
        return True
    return False",Control Structure,1309,"def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False
    if sorted(list1) == sorted(list2):
        return True
    return False","def compare_lists(list1, list2):
    if len(list1) != len(list2):
    ___
    if sorted(list1) == sorted(list2):
    ___
    ___"
Write a python program for binary search,"[2, 5, 7, 9, 11, 15]","def binarySearch(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1",Control Structure,1322,"def binarySearch(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1","def binarySearch(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
    ___
        elif arr[mid] > target:
            right = mid - 1
    ___
            left = mid + 1
    ___"
Create a Python program to check if a triangle is valid or not with the given values for its three sides.,"a = 2
b = 2
c = 3","def is_valid_triangle(a, b, c): 
  
    # triangle should have 3 sides 
    if a + b <= c or a + c <= b or b + c <= a: 
        return False
  
    # sum of any two side should always be greater than third side 
    if a + b > c and a + c > b and b + c > a: 
        return True
    return False

is_valid_triangle(2, 2, 3)",Control Structure,1341,"def is_valid_triangle(a, b, c): 
  
    # triangle should have 3 sides 
    if a + b <= c or a + c <= b or b + c <= a: 
        return False
  
    # sum of any two side should always be greater than third side 
    if a + b > c and a + c > b and b + c > a: 
        return True
    return False

is_valid_triangle(2, 2, 3)","def is_valid_triangle(a, b, c): 
  
    # triangle should have 3 sides 
    if a + b <= c or a + c <= b or b + c <= a: 
    ___
  
    # sum of any two side should always be greater than third side 
    if a + b > c and a + c > b and b + c > a: 
    ___
    ___

is_valid_triangle(2, 2, 3)"
Write a Python function for calculating factorials.,4,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

number = 4
result = factorial(number)
print(result)",Control Structure,1353,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

number = 4
result = factorial(number)
print(result)","def factorial(n):
    if n == 0:
    ___
    ___
    ___

number = 4
result = factorial(number)
print(result)"
Design a Python program for implementing a stack with the following methods.,"pop(), push(x), and is_empty().","class Stack:
    def __init__(self):
        self.items = []

    def push(self, x): 
        self.items.append(x) 

    def pop(self): 
        if not self.is_empty():
            return self.items.pop()
        else:
            return None
        
    def is_empty(self): 
        return len(self.items) == 0",Control Structure,1397,"class Stack:
    def __init__(self):
        self.items = []

    def push(self, x): 
        self.items.append(x) 

    def pop(self): 
        if not self.is_empty():
            return self.items.pop()
        else:
            return None
        
    def is_empty(self): 
        return len(self.items) == 0","class Stack:
    def __init__(self):
        self.items = []

    def push(self, x): 
        self.items.append(x) 

    def pop(self): 
        if not self.is_empty():
    ___
    ___
    ___
        
    def is_empty(self): 
    ___"
Compose a python program that can search a text document for a given word.,"text_file=""text.txt""
query_word=""apple""","def search_for_word(text_file, query_word):
    words = []

    with open(text_file, ""r"") as file:
        for line in file:
            words.extend(line.split())

    if query_word in words:
        return True
    else:
        return False",Control Structure,1401,"def search_for_word(text_file, query_word):
    words = []

    with open(text_file, ""r"") as file:
        for line in file:
            words.extend(line.split())

    if query_word in words:
        return True
    else:
        return False","def search_for_word(text_file, query_word):
    words = []

    with open(text_file, ""r"") as file:
        for line in file:
            words.extend(line.split())

    if query_word in words:
    ___
    ___
    ___"
Build an algorithm in Python to identify if a given number is a perfect square.,25,"import math

def is_perfect_square(num):
    sqrt = int(math.sqrt(num))
    return sqrt * sqrt == num

result = is_perfect_square(25)
print(result)",Control Structure,1514,"import math

def is_perfect_square(num):
    sqrt = int(math.sqrt(num))
    return sqrt * sqrt == num

result = is_perfect_square(25)
print(result)","import math

def is_perfect_square(num):
    sqrt = int(math.sqrt(num))
    ___

result = is_perfect_square(25)
print(result)"
Can you generate a greedy algorithm in Python for solving the coin change problem?,"Coins = [1, 6, 10], Change = 8","def get_coins(coins, change):
	min_coins = change
	if change in coins:
		return [change]

	for i in [c for c in coins if c <= change]:
		num_coins = 1 + get_coins(coins, change-i)
		if len(num_coins) < min_coins:
			min_coins = num_coins
	return min_coins

# Test 
coins = [1, 6, 10]
change = 8
print(get_coins(coins, change)) # [1, 6, 1]",Control Structure,1548,"def get_coins(coins, change):
	min_coins = change
	if change in coins:
		return [change]

	for i in [c for c in coins if c <= change]:
		num_coins = 1 + get_coins(coins, change-i)
		if len(num_coins) < min_coins:
			min_coins = num_coins
	return min_coins

# Test 
coins = [1, 6, 10]
change = 8
print(get_coins(coins, change)) # [1, 6, 1]","def get_coins(coins, change):
	min_coins = change
	if change in coins:
    ___

	for i in [c for c in coins if c <= change]:
		num_coins = 1 + get_coins(coins, change-i)
		if len(num_coins) < min_coins:
			min_coins = num_coins
    ___

# Test 
coins = [1, 6, 10]
change = 8
print(get_coins(coins, change)) # [1, 6, 1]"
Create a script in Python for classifying the sentiment of a text. The script should be able to handle input of various lengths and should return a sentiment score (on a scale from -1 to +1) for the text.,positive,"import nltk

def sentiment_analysis(text):
 tokens = nltk.word_tokenize(text)
 score = 0
 for token in tokens:
 tag = nltk.pos_tag(token)[0]
 if tag[1] == 'positive':
 score += 1
 else:
 score -= 1
 return score / len(tokens)",Control Structure,1552,"import nltk

def sentiment_analysis(text):
 tokens = nltk.word_tokenize(text)
 score = 0
 for token in tokens:
 tag = nltk.pos_tag(token)[0]
 if tag[1] == 'positive':
 score += 1
 else:
 score -= 1
 return score / len(tokens)","import nltk

def sentiment_analysis(text):
 tokens = nltk.word_tokenize(text)
 score = 0
 for token in tokens:
 tag = nltk.pos_tag(token)[0]
 if tag[1] == 'positive':
 score += 1
    ___
 score -= 1
    ___"
Develop a Python program to check if a given number is a power of two.,Number = 16,"def is_power_of_two(x):
  while x % 2 == 0 and x > 1:
    x = x / 2
  return x == 1

num = 16

print(is_power_of_two(num))",Control Structure,1580,"def is_power_of_two(x):
  while x % 2 == 0 and x > 1:
    x = x / 2
  return x == 1

num = 16

print(is_power_of_two(num))","def is_power_of_two(x):
  while x % 2 == 0 and x > 1:
    x = x / 2
    ___

num = 16

print(is_power_of_two(num))"
"Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.","n = 4
m = 6","def sum_of_squares(n, m):
    result = 0
    for i in range(n, m+1):
        result += i*i
    return result
  
print(sum_of_squares(n, m))",Control Structure,1598,"def sum_of_squares(n, m):
    result = 0
    for i in range(n, m+1):
        result += i*i
    return result
  
print(sum_of_squares(n, m))","def sum_of_squares(n, m):
    result = 0
    for i in range(n, m+1):
        result += i*i
    ___
  
print(sum_of_squares(n, m))"
Build a Python class to identify if a provided number is prime or composite.,10,"class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
else:
    print(""Number is Composite"")",Control Structure,1638,"class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
else:
    print(""Number is Composite"")","class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
    ___
    ___

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
    ___
    print(""Number is Composite"")"
Write a Python script that takes as input two strings and returns a boolean indicating if the two strings are equal when accounting for case sensitivity.,"String 1: ""Hello""
String 2: ""hello""","def case_insensitive_compare(str1, str2):
 return str1.lower() == str2.lower()

string1 = ""Hello""
string2 = ""hello""

print(case_insensitive_compare(string1, string2))

# Output
True",Control Structure,1661,"def case_insensitive_compare(str1, str2):
 return str1.lower() == str2.lower()

string1 = ""Hello""
string2 = ""hello""

print(case_insensitive_compare(string1, string2))

# Output
True","def case_insensitive_compare(str1, str2):
    ___

string1 = ""Hello""
string2 = ""hello""

print(case_insensitive_compare(string1, string2))

# Output
True"
Create a Python program to check if two lists have overlapping elements,"A = [1,3,5,7], B = [2,4,5,7]","def has_overlapping(arr1, arr2):
    for element in arr1:
        if element in arr2:
            return True
    return False

A = [1,3,5,7]
B = [2,4,5,7]

result = has_overlapping(A, B)
print(result)",Control Structure,1683,"def has_overlapping(arr1, arr2):
    for element in arr1:
        if element in arr2:
            return True
    return False

A = [1,3,5,7]
B = [2,4,5,7]

result = has_overlapping(A, B)
print(result)","def has_overlapping(arr1, arr2):
    for element in arr1:
        if element in arr2:
    ___
    ___

A = [1,3,5,7]
B = [2,4,5,7]

result = has_overlapping(A, B)
print(result)"
"Given input and output examples, create a classification model in Python that can predict the output for a given input.","Inputs: [1, 2, 3] 
Outputs: [2, 4, 6]","def pred_model(inputs): 
  outputs=[]
  for i in inputs:
    outputs.append(i*2)
  return outputs
 
inputs = [1,2,3] 
outputs = pred_model(inputs) 
print(""Outputs:"", outputs)",Control Structure,1685,"def pred_model(inputs): 
  outputs=[]
  for i in inputs:
    outputs.append(i*2)
  return outputs
 
inputs = [1,2,3] 
outputs = pred_model(inputs) 
print(""Outputs:"", outputs)","def pred_model(inputs): 
  outputs=[]
  for i in inputs:
    outputs.append(i*2)
    ___
 
inputs = [1,2,3] 
outputs = pred_model(inputs) 
print(""Outputs:"", outputs)"
Write a python program to check if a given number is prime or not.,27,"def is_prime(num):
    for i in range(2, num):
        if (num % i) == 0:
            return False
    return True

number = 27

if is_prime(number):
    print(str(number) + ' is a prime number.')
else:
    print(str(number) + ' is not a prime number.')",Control Structure,1698,"def is_prime(num):
    for i in range(2, num):
        if (num % i) == 0:
            return False
    return True

number = 27

if is_prime(number):
    print(str(number) + ' is a prime number.')
else:
    print(str(number) + ' is not a prime number.')","def is_prime(num):
    for i in range(2, num):
        if (num % i) == 0:
    ___
    ___

number = 27

if is_prime(number):
    print(str(number) + ' is a prime number.')
    ___
    print(str(number) + ' is not a prime number.')"
Create a module in Python for validating a phone number.,"phone number = ""+1-800-867-5309""","import re

phone_number = ""+1-800-867-5309""

phone_pattern = re.compile(r'^\+[1-9]\d{1,2}\-\d{3}\-\d{3}\-\d{4}$')

def validate_phone_number(phone_number):
    return phone_pattern.search(phone_number)

valid = validate_phone_number(phone_number)
if valid:
    print(""Valid Phone number"")
else:
    print(""Invalid Phone number"")",Control Structure,1721,"import re

phone_number = ""+1-800-867-5309""

phone_pattern = re.compile(r'^\+[1-9]\d{1,2}\-\d{3}\-\d{3}\-\d{4}$')

def validate_phone_number(phone_number):
    return phone_pattern.search(phone_number)

valid = validate_phone_number(phone_number)
if valid:
    print(""Valid Phone number"")
else:
    print(""Invalid Phone number"")","import re

phone_number = ""+1-800-867-5309""

phone_pattern = re.compile(r'^\+[1-9]\d{1,2}\-\d{3}\-\d{3}\-\d{4}$')

def validate_phone_number(phone_number):
    ___

valid = validate_phone_number(phone_number)
if valid:
    print(""Valid Phone number"")
    ___
    print(""Invalid Phone number"")"
"Create an Optimizer function in Python to optimize a given function f(x) for x in [-4, 4].",Function f(x): f(x) = x^2 - 3x + 2,"import numpy as np
from scipy.optimize import minimize

# Function to optimize
def f(x):
 return x**2 - 3*x + 2

# Optimize
optimized = minimize(f, [-4, 4], method=""L-BFGS-B"")

# Print result
print(""Optimized value of the function: "", optimized.fun)  # prints -3.999999999999997
print(""Optimized value of x: "", optimized.x) # prints [-4.]",Control Structure,1735,"import numpy as np
from scipy.optimize import minimize

# Function to optimize
def f(x):
 return x**2 - 3*x + 2

# Optimize
optimized = minimize(f, [-4, 4], method=""L-BFGS-B"")

# Print result
print(""Optimized value of the function: "", optimized.fun)  # prints -3.999999999999997
print(""Optimized value of x: "", optimized.x) # prints [-4.]","import numpy as np
from scipy.optimize import minimize

# Function to optimize
def f(x):
    ___

# Optimize
optimized = minimize(f, [-4, 4], method=""L-BFGS-B"")

# Print result
print(""Optimized value of the function: "", optimized.fun)  # prints -3.999999999999997
print(""Optimized value of x: "", optimized.x) # prints [-4.]"
Edit the given Python program to optimize its code for better performance,"#Function to calculate the sum of the natural numbers 
def sumOfNaturals(n): 
  
    sum = 0
    for i in range(1, n+1): 
        sum += i 
  
    return sum","#Function to calculate the sum of the natural numbers 
def sumOfNaturals(n): 
  
    #using Gauss formula
    if n % 2 == 0: 
        sum = (n//2)*(n+1) 
    else: 
        sum = (n//2)*(n+1) + (n+1)//2
  
    return sum",Control Structure,1738,"#Function to calculate the sum of the natural numbers 
def sumOfNaturals(n): 
  
    #using Gauss formula
    if n % 2 == 0: 
        sum = (n//2)*(n+1) 
    else: 
        sum = (n//2)*(n+1) + (n+1)//2
  
    return sum","#Function to calculate the sum of the natural numbers 
def sumOfNaturals(n): 
  
    #using Gauss formula
    if n % 2 == 0: 
        sum = (n//2)*(n+1) 
    ___
        sum = (n//2)*(n+1) + (n+1)//2
  
    ___"
Design a program in Python for computing the average height of a group of people.,"[1.78, 1.90, 1.75, 1.82]","def average_height(lst):
    total = 0
    for height in lst:
        total += height
    
    return total / len(lst)

result = average_height([1.78, 1.90, 1.75, 1.82])
print(result)",Control Structure,1741,"def average_height(lst):
    total = 0
    for height in lst:
        total += height
    
    return total / len(lst)

result = average_height([1.78, 1.90, 1.75, 1.82])
print(result)","def average_height(lst):
    total = 0
    for height in lst:
        total += height
    
    ___

result = average_height([1.78, 1.90, 1.75, 1.82])
print(result)"
"Analyze the input provided and generate a function in Python that returns ""Invalid input"" if the input is not a valid integer number, or returns the number of digits in the input number otherwise.",212,"def count_digits(inp):
    if not isinstance(inp, int):
        return ""Invalid input""
    else:
        return len(str(inp))",Control Structure,1777,"def count_digits(inp):
    if not isinstance(inp, int):
        return ""Invalid input""
    else:
        return len(str(inp))","def count_digits(inp):
    if not isinstance(inp, int):
    ___
    ___
    ___"
Create a function in Python that determines if a given number is an Armstrong number or not.,371,"def isArmstrongNumber(number):
  num_str = str(number)
  result = 0
  power = len(num_str)

  for c in num_str:
    result += int(c) ** power

  if result == number:
    return True
  else:
    return False

if isArmstrongNumber(371):
  print('It is an Armstrong number.')
else:
  print('It is not an Armstrong number.')",Control Structure,1791,"def isArmstrongNumber(number):
  num_str = str(number)
  result = 0
  power = len(num_str)

  for c in num_str:
    result += int(c) ** power

  if result == number:
    return True
  else:
    return False

if isArmstrongNumber(371):
  print('It is an Armstrong number.')
else:
  print('It is not an Armstrong number.')","def isArmstrongNumber(number):
  num_str = str(number)
  result = 0
  power = len(num_str)

  for c in num_str:
    result += int(c) ** power

  if result == number:
    ___
    ___
    ___

if isArmstrongNumber(371):
  print('It is an Armstrong number.')
    ___
  print('It is not an Armstrong number.')"
Write an expression in python to check if a given number is prime,number = 15,"def is_prime(number):
    if number>1:
        for i in range(2,number):
            if number%i==0:
                return False
    else:
        return False
    return True
print(is_prime(number))",Control Structure,1826,"def is_prime(number):
    if number>1:
        for i in range(2,number):
            if number%i==0:
                return False
    else:
        return False
    return True
print(is_prime(number))","def is_prime(number):
    if number>1:
        for i in range(2,number):
            if number%i==0:
    ___
    ___
    ___
    ___
print(is_prime(number))"
"Given two number arrays A and B, write a Python function to check if each element in A also exists in B","A = [1,2,3], B = [2,3,4]","def check_equality(arr1, arr2):
    for num in arr1:
        if num not in arr2:
            return False
    return True

A = [1, 2, 3]
B = [2, 3, 4]

result = check_equality(A, B)
print(result)",Control Structure,1852,"def check_equality(arr1, arr2):
    for num in arr1:
        if num not in arr2:
            return False
    return True

A = [1, 2, 3]
B = [2, 3, 4]

result = check_equality(A, B)
print(result)","def check_equality(arr1, arr2):
    for num in arr1:
        if num not in arr2:
    ___
    ___

A = [1, 2, 3]
B = [2, 3, 4]

result = check_equality(A, B)
print(result)"
Write a Python program to search for a given element in multiple lists,"my_list1 = [2, 3, 4, 5]
my_list2 = [7, 9, 5]
elem = 5","def search_elem(my_list1, my_list2, elem):
    for list in [my_list1, my_list2]:
        found = False
        for val in list:
            if val == elem:
                found = True
                break
        if found:
            return True
    return False

found = search_elem(my_list1, my_list2, elem)
print(found)",Control Structure,1914,"def search_elem(my_list1, my_list2, elem):
    for list in [my_list1, my_list2]:
        found = False
        for val in list:
            if val == elem:
                found = True
                break
        if found:
            return True
    return False

found = search_elem(my_list1, my_list2, elem)
print(found)","def search_elem(my_list1, my_list2, elem):
    for list in [my_list1, my_list2]:
        found = False
        for val in list:
            if val == elem:
                found = True
    ___
        if found:
    ___
    ___

found = search_elem(my_list1, my_list2, elem)
print(found)"
Create a python program for identifying if a given number is prime or not.,Use number 10 as an example.,"def is_prime(num): 
    if num < 2: 
        return False
  
    for i in range(2, num): 
        if num % i == 0: 
            return False
  
    return True
  
# Example 
number = 10
  
if is_prime(number): 
    print(number, ""is a prime number"") 
else: 
    print(number, ""is not a prime number"")",Control Structure,1922,"def is_prime(num): 
    if num < 2: 
        return False
  
    for i in range(2, num): 
        if num % i == 0: 
            return False
  
    return True
  
# Example 
number = 10
  
if is_prime(number): 
    print(number, ""is a prime number"") 
else: 
    print(number, ""is not a prime number"")","def is_prime(num): 
    if num < 2: 
    ___
  
    for i in range(2, num): 
        if num % i == 0: 
    ___
  
    ___
  
# Example 
number = 10
  
if is_prime(number): 
    print(number, ""is a prime number"") 
    ___
    print(number, ""is not a prime number"")"
"Create a Python function that takes two lists, compare them, and return True if both lists are identical and False if they differ.","list1 = [1, 2, 3]
list2 = [1, 2, 3]","def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False

    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False

    return True",Control Structure,1934,"def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False

    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False

    return True","def compare_lists(list1, list2):
    if len(list1) != len(list2):
    ___

    for i in range(len(list1)):
        if list1[i] != list2[i]:
    ___

    ___"
Implement a Python program to check if a number is divisible by another number.,"7, 2","def is_divisible(n, m):
    if (n % m == 0):
        return True
    else:
        return False
    
print(is_divisible(7, 2))  # Outputs False",Control Structure,1958,"def is_divisible(n, m):
    if (n % m == 0):
        return True
    else:
        return False
    
print(is_divisible(7, 2))  # Outputs False","def is_divisible(n, m):
    if (n % m == 0):
    ___
    ___
    ___
    
print(is_divisible(7, 2))  # Outputs False"
Write a Bash script to check if a specific program is installed on the current system.,Program Name = Python,"#!/usr/bin/env bash

if type -p python &> /dev/null; then
  echo 'Python is installed!'
else 
  echo 'Python is not installed!'
fi",Control Structure,2069,"#!/usr/bin/env bash

if type -p python &> /dev/null; then
  echo 'Python is installed!'
else 
  echo 'Python is not installed!'
fi","#!/usr/bin/env bash

if type -p python &> /dev/null; then
  echo 'Python is installed!'
    ___
  echo 'Python is not installed!'
fi"
Create a method in Python that returns the result for the factorial of a given number.,5,"def factorial(n): 
    if n == 0:
        return 1
    else:
        return n*factorial(n-1) 

x = 5
result = factorial(x) 
print(result) 

# Output: 
120",Control Structure,2135,"def factorial(n): 
    if n == 0:
        return 1
    else:
        return n*factorial(n-1) 

x = 5
result = factorial(x) 
print(result) 

# Output: 
120","def factorial(n): 
    if n == 0:
    ___
    ___
    ___

x = 5
result = factorial(x) 
print(result) 

# Output: 
120"
Develop a python program for,Filter a given list of strings to only include strings that start with vowels.,"def filter_vowel_strings(string_list):
    vowels = ('a', 'e', 'i', 'o', 'u')
    filtered_list = []
    for string in string_list:
        if string.startswith(vowels):
            filtered_list.append(string)
    return filtered_list",Control Structure,2165,"def filter_vowel_strings(string_list):
    vowels = ('a', 'e', 'i', 'o', 'u')
    filtered_list = []
    for string in string_list:
        if string.startswith(vowels):
            filtered_list.append(string)
    return filtered_list","def filter_vowel_strings(string_list):
    vowels = ('a', 'e', 'i', 'o', 'u')
    filtered_list = []
    for string in string_list:
        if string.startswith(vowels):
            filtered_list.append(string)
    ___"
Write a Python program to check if the given matris is a symmetric matrix.,"A = [[1,2,3],
    [-2,0,4],
    [3,-4,5]]","def is_symmetric(a):
    n = len(a)
    for i in range(n):
        for j in range(n):
            if a[i][j] != a[j][i]:
                return False
    return True

A = [[1,2,3],
    [-2,0,4],
    [3,-4,5]]
print(is_symmetric(A))",Control Structure,2197,"def is_symmetric(a):
    n = len(a)
    for i in range(n):
        for j in range(n):
            if a[i][j] != a[j][i]:
                return False
    return True

A = [[1,2,3],
    [-2,0,4],
    [3,-4,5]]
print(is_symmetric(A))","def is_symmetric(a):
    n = len(a)
    for i in range(n):
        for j in range(n):
            if a[i][j] != a[j][i]:
    ___
    ___

A = [[1,2,3],
    [-2,0,4],
    [3,-4,5]]
print(is_symmetric(A))"
Develop an algorithm in Python to find the minimum number of coins needed to make change for a given amount,n = 5,"def minCoinChange(n):
    coins = [1, 2, 5]
    mins = [0]+ [float('inf')]*n
    for c in coins:
        for i in range(c, n+1):
            mins[i] = min(mins[i], mins[i-c]+1)
    return mins[n]
    
print(minCoinChange(n))",Control Structure,2307,"def minCoinChange(n):
    coins = [1, 2, 5]
    mins = [0]+ [float('inf')]*n
    for c in coins:
        for i in range(c, n+1):
            mins[i] = min(mins[i], mins[i-c]+1)
    return mins[n]
    
print(minCoinChange(n))","def minCoinChange(n):
    coins = [1, 2, 5]
    mins = [0]+ [float('inf')]*n
    for c in coins:
        for i in range(c, n+1):
            mins[i] = min(mins[i], mins[i-c]+1)
    ___
    
print(minCoinChange(n))"
Generate code for rounding a given number to the nearest integer in Python.,Number: 2.6,"def round_nearest_int(num):
    return round(num)

result = round_nearest_int(2.6)
print(result)",Control Structure,2309,"def round_nearest_int(num):
    return round(num)

result = round_nearest_int(2.6)
print(result)","def round_nearest_int(num):
    ___

result = round_nearest_int(2.6)
print(result)"
Write a Python script to detect if two strings contain the same characters. Output should be true or false.,"s1 = ""abc""
s2 = ""bca""","def is_permutation(s1, s2):
    s1_list = list(s1)
    s2_list = list(s2)
    s1_list.sort()
    s2_list.sort()
    if s1_list == s2_list:
        return True
    else:
        return False

print(is_permutation(""abc"", ""bca"")) # True",Control Structure,2327,"def is_permutation(s1, s2):
    s1_list = list(s1)
    s2_list = list(s2)
    s1_list.sort()
    s2_list.sort()
    if s1_list == s2_list:
        return True
    else:
        return False

print(is_permutation(""abc"", ""bca"")) # True","def is_permutation(s1, s2):
    s1_list = list(s1)
    s2_list = list(s2)
    s1_list.sort()
    s2_list.sort()
    if s1_list == s2_list:
    ___
    ___
    ___

print(is_permutation(""abc"", ""bca"")) # True"
Can you create an algorithm in Python for reversing an integer?,x = 2435,"def reverseInteger(x): 
     
    reversed = 0
    while(x > 0): 
        reminder = x % 10
        reversed = (reversed * 10) + reminder 
        x = x // 10
    return reversed 

x = 2435
res = reverseInteger(x) 
print(res)",Control Structure,2328,"def reverseInteger(x): 
     
    reversed = 0
    while(x > 0): 
        reminder = x % 10
        reversed = (reversed * 10) + reminder 
        x = x // 10
    return reversed 

x = 2435
res = reverseInteger(x) 
print(res)","def reverseInteger(x): 
     
    reversed = 0
    while(x > 0): 
        reminder = x % 10
        reversed = (reversed * 10) + reminder 
        x = x // 10
    ___

x = 2435
res = reverseInteger(x) 
print(res)"
Generate a Python algorithm to check if a given word is a palindrome.,madam,"def isPalindrome(word): 
    left, right = 0, len(word) - 1
    while right >= left: 
        if not word[left] == word[right]: 
            return False
        left += 1
        right -= 1
    return True",Control Structure,2330,"def isPalindrome(word): 
    left, right = 0, len(word) - 1
    while right >= left: 
        if not word[left] == word[right]: 
            return False
        left += 1
        right -= 1
    return True","def isPalindrome(word): 
    left, right = 0, len(word) - 1
    while right >= left: 
        if not word[left] == word[right]: 
    ___
        left += 1
        right -= 1
    ___"
Create a Python script for formatting a sentence.,He  went  to the store,"def format_sentence(sentence):
    sentence = sentence.split()
    sentence = [word.capitalize() for word in sentence]
    return ' '.join(sentence)

print(format_sentence(""He went to the store""))",Control Structure,2360,"def format_sentence(sentence):
    sentence = sentence.split()
    sentence = [word.capitalize() for word in sentence]
    return ' '.join(sentence)

print(format_sentence(""He went to the store""))","def format_sentence(sentence):
    sentence = sentence.split()
    sentence = [word.capitalize() for word in sentence]
    ___

print(format_sentence(""He went to the store""))"
"Implement a Python function called “check_prime” which takes an integer as an argument and returns True if the number is prime, and False otherwise.",check_prime(125),"def check_prime(n):
 if n == 1:
 return False

 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False

 return True",Control Structure,2363,"def check_prime(n):
 if n == 1:
 return False

 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False

 return True","def check_prime(n):
 if n == 1:
    ___

 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
    ___

    ___"
Write a Python program to do a brute force search for a pair of elements which sum to a given target value.,"[1, 3, 4, 5, 6, 7], 8","# brute force search algorithm
def brute_force_search(arr, target):
	for i in range(len(arr)):
		for j in range(len(arr)):
			if arr[i] + arr[j] == target:
				return arr[i], arr[j]
	return None

# test the algorithm
target = 8
lst = [1, 3, 4, 5, 6, 7]
print(brute_force_search(lst, target))

Output:
pair = (3, 5)",Control Structure,2383,"# brute force search algorithm
def brute_force_search(arr, target):
	for i in range(len(arr)):
		for j in range(len(arr)):
			if arr[i] + arr[j] == target:
				return arr[i], arr[j]
	return None

# test the algorithm
target = 8
lst = [1, 3, 4, 5, 6, 7]
print(brute_force_search(lst, target))

Output:
pair = (3, 5)","# brute force search algorithm
def brute_force_search(arr, target):
	for i in range(len(arr)):
		for j in range(len(arr)):
			if arr[i] + arr[j] == target:
    ___
    ___

# test the algorithm
target = 8
lst = [1, 3, 4, 5, 6, 7]
print(brute_force_search(lst, target))

Output:
pair = (3, 5)"
Create a Python code to check if a single integer is a prime number,int number = 11,"def is_prime(number):
    if number <= 1:
        return False

    for i in range(2, number):
        if number % i == 0:
            return False
    return True",Control Structure,2390,"def is_prime(number):
    if number <= 1:
        return False

    for i in range(2, number):
        if number % i == 0:
            return False
    return True","def is_prime(number):
    if number <= 1:
    ___

    for i in range(2, number):
        if number % i == 0:
    ___
    ___"
Create a program in Python to check for palindrome numbers.,121,"def palindrome(num):
    num = str(num)
    if num == num[::-1]:
        print(num + "" is a palindrome number"")
    else: 
        print(num + "" is not a palindrome number"")

palindrome(121)
// Output: 121 is a palindrome number",Control Structure,2391,"def palindrome(num):
    num = str(num)
    if num == num[::-1]:
        print(num + "" is a palindrome number"")
    else: 
        print(num + "" is not a palindrome number"")

palindrome(121)
// Output: 121 is a palindrome number","def palindrome(num):
    num = str(num)
    if num == num[::-1]:
        print(num + "" is a palindrome number"")
    ___
        print(num + "" is not a palindrome number"")

palindrome(121)
// Output: 121 is a palindrome number"
Debug the following Python code and make it functional (read the instructions for the code).,"def factorial(n):
 if n == 0:
    return 1
 else:
 return n * factorial(n - 1)
factorial(5)","def factorial(n):
 if n == 0:
    return 1
 else:
 return n * factorial(n - 1)

# call the method
print(factorial(5))",Control Structure,2423,"def factorial(n):
 if n == 0:
    return 1
 else:
 return n * factorial(n - 1)

# call the method
print(factorial(5))","def factorial(n):
 if n == 0:
    ___
    ___
    ___

# call the method
print(factorial(5))"
Create a method to verify if the following number is prime in Python:,7,"def is_prime(n):
    if (n <= 1):
        return False
    for i in range(2, n):
        if (n % i == 0):
            return False
    return True

n = 7

if is_prime(n):
    print(""The number {} is prime."".format(n))
else:
    print(""The number {} is not prime."".format(n))",Control Structure,2431,"def is_prime(n):
    if (n <= 1):
        return False
    for i in range(2, n):
        if (n % i == 0):
            return False
    return True

n = 7

if is_prime(n):
    print(""The number {} is prime."".format(n))
else:
    print(""The number {} is not prime."".format(n))","def is_prime(n):
    if (n <= 1):
    ___
    for i in range(2, n):
        if (n % i == 0):
    ___
    ___

n = 7

if is_prime(n):
    print(""The number {} is prime."".format(n))
    ___
    print(""The number {} is not prime."".format(n))"
Optimize the following Python code for best runtime.,"def is_prime(n):
    for i in range(2, n):
        if (n % i) == 0:
            return False
    return True","def is_prime(n):
    if n == 1:
        return False
    if n in (2, 3):
        return True
    if not (n & 1) and n > 2:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True",Control Structure,2444,"def is_prime(n):
    if n == 1:
        return False
    if n in (2, 3):
        return True
    if not (n & 1) and n > 2:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True","def is_prime(n):
    if n == 1:
    ___
    if n in (2, 3):
    ___
    if not (n & 1) and n > 2:
    ___
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
    ___
    ___"
Generate an algorithm in Python to check if a given number of years is a leap year.,year = 1999,"def is_leap_year(year):
    if year % 400 == 0:
        return True
    if year % 100 == 0:
        return False
    if year % 4 == 0:
        return True
    return False

year = 1999
if is_leap_year(year):
    print(""This is a leap year."")
else:
    print(""This is not a leap year."")",Control Structure,2463,"def is_leap_year(year):
    if year % 400 == 0:
        return True
    if year % 100 == 0:
        return False
    if year % 4 == 0:
        return True
    return False

year = 1999
if is_leap_year(year):
    print(""This is a leap year."")
else:
    print(""This is not a leap year."")","def is_leap_year(year):
    if year % 400 == 0:
    ___
    if year % 100 == 0:
    ___
    if year % 4 == 0:
    ___
    ___

year = 1999
if is_leap_year(year):
    print(""This is a leap year."")
    ___
    print(""This is not a leap year."")"
Produce a Python program to compute the Fibonacci number for a given integer.,8,"def getFibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return getFibonacci(n-1)+getFibonacci(n-2) 

number = 8
fibonacci_number = getFibonacci(number)
print(fibonacci_number)",Control Structure,2512,"def getFibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return getFibonacci(n-1)+getFibonacci(n-2) 

number = 8
fibonacci_number = getFibonacci(number)
print(fibonacci_number)","def getFibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
    ___
    elif n==2: 
    ___
    ___
    ___

number = 8
fibonacci_number = getFibonacci(number)
print(fibonacci_number)"
Optimize a Python program to check for prime numbers,"def isPrime(n):
  for i in range(2, n):
    if n % i == 0:
      return False
  return True

num = 23
if isPrime(num):
  print(""Number is prime"")
else:
  print(""Number is not prime"")","def isPrime(n):
 if n <= 1:
 return False
 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False
 return True

num = 23
if isPrime(num):
 print(""Number is prime"")
else:
 print(""Number is not prime"")",Control Structure,2514,"def isPrime(n):
 if n <= 1:
 return False
 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False
 return True

num = 23
if isPrime(num):
 print(""Number is prime"")
else:
 print(""Number is not prime"")","def isPrime(n):
 if n <= 1:
    ___
 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
    ___
    ___

num = 23
if isPrime(num):
 print(""Number is prime"")
    ___
 print(""Number is not prime"")"
Create a Python program for implementing a linear search algorithm.,"[4, 6, 5, 2, 9]","def linearSearch(arr, key): 
 for idx, num in enumerate(arr):
 if num == key:
 return idx
 
 return -1",Control Structure,2522,"def linearSearch(arr, key): 
 for idx, num in enumerate(arr):
 if num == key:
 return idx
 
 return -1","def linearSearch(arr, key): 
 for idx, num in enumerate(arr):
 if num == key:
    ___
 
    ___"
Create a Python program to check if the given number is divisible by 3 or not.,12,"def is_divisible_by_3(n):
  return (n % 3 == 0)

n = 12
if is_divisible_by_3(n):
  print(str(n) + ' is divisible by 3.')
else:
  print(str(n) + ' is not divisible by 3.')",Control Structure,2523,"def is_divisible_by_3(n):
  return (n % 3 == 0)

n = 12
if is_divisible_by_3(n):
  print(str(n) + ' is divisible by 3.')
else:
  print(str(n) + ' is not divisible by 3.')","def is_divisible_by_3(n):
    ___

n = 12
if is_divisible_by_3(n):
  print(str(n) + ' is divisible by 3.')
    ___
  print(str(n) + ' is not divisible by 3.')"
"Design a Python program for comparing two strings and printing ""Equal"" if the strings are equal, or ""Not Equal"" if the strings are not equal.","string1 = ""hello""
string2 = ""world""","if string1 == string2:
    print(""Equal"")
else:
    print(""Not Equal"")",Control Structure,2531,"if string1 == string2:
    print(""Equal"")
else:
    print(""Not Equal"")","if string1 == string2:
    print(""Equal"")
    ___
    print(""Not Equal"")"
Generate a function in Python to return the highest value in a dictionary for the given key.,"dictionary = {'A': 10, 'B': 20, 'C': 30, 'D': 40}","def highestValue(dictionary, key): 
    highest = 0 
    for key,value in dictionary.items(): 
        if value > highest: 
            highest = value 
    return highest 

highestValue(dictionary, key)",Control Structure,2579,"def highestValue(dictionary, key): 
    highest = 0 
    for key,value in dictionary.items(): 
        if value > highest: 
            highest = value 
    return highest 

highestValue(dictionary, key)","def highestValue(dictionary, key): 
    highest = 0 
    for key,value in dictionary.items(): 
        if value > highest: 
            highest = value 
    ___

highestValue(dictionary, key)"
Create a search algorithm in Python that takes two inputs 'word' and 'text' and returns true if the word is present in the text.,"word = ""code""
text = ""Today I wrote some code in Python""","def search(word, text):
    words = text.split()
    for w in words:
        if w == word:
            return True
    return False",Control Structure,2630,"def search(word, text):
    words = text.split()
    for w in words:
        if w == word:
            return True
    return False","def search(word, text):
    words = text.split()
    for w in words:
        if w == word:
    ___
    ___"
Create a Python program to compute the greatest common divisor (GCD) for two given numbers.,24 and 32,"def gcd(x, y):
 
    # Using Euclidean algorithm 
    while(y): 
        x, y = y, x % y 
  
    return x 
  
# Driver Code 
a = 24
b = 32
  
gcd = gcd(a, b) 
print(""GCD of"", a, ""and"", b, ""is:"", gcd)",Control Structure,2633,"def gcd(x, y):
 
    # Using Euclidean algorithm 
    while(y): 
        x, y = y, x % y 
  
    return x 
  
# Driver Code 
a = 24
b = 32
  
gcd = gcd(a, b) 
print(""GCD of"", a, ""and"", b, ""is:"", gcd)","def gcd(x, y):
 
    # Using Euclidean algorithm 
    while(y): 
        x, y = y, x % y 
  
    ___
  
# Driver Code 
a = 24
b = 32
  
gcd = gcd(a, b) 
print(""GCD of"", a, ""and"", b, ""is:"", gcd)"
Create an algorithm in Python to search for a given item in a dictionary.,"Dictionary = {'name': 'john', 'age': 22, 'city': 'New York'}, item = 'John'","def search(dict, item): 
    for key, value in dict.items(): 
        if item == value: 
            return True 
    return False

dict = {'name': 'john', 'age': 22, 'city': 'New York'}
item = 'John'
print(search(dict, item))",Control Structure,2664,"def search(dict, item): 
    for key, value in dict.items(): 
        if item == value: 
            return True 
    return False

dict = {'name': 'john', 'age': 22, 'city': 'New York'}
item = 'John'
print(search(dict, item))","def search(dict, item): 
    for key, value in dict.items(): 
        if item == value: 
    ___
    ___

dict = {'name': 'john', 'age': 22, 'city': 'New York'}
item = 'John'
print(search(dict, item))"
Design an algorithm in Python for finding out the factorial of a given number.,7,"def factorial(n):
 fact = 1
 for i in range(2,n+1):
  fact = fact * i
 return fact",Control Structure,2665,"def factorial(n):
 fact = 1
 for i in range(2,n+1):
  fact = fact * i
 return fact","def factorial(n):
 fact = 1
 for i in range(2,n+1):
  fact = fact * i
    ___"
Create a module in Python to scrape the web for a particular website.,https://www.example.com/,"import requests
from bs4 import BeautifulSoup

def scrape_website(url):
    response = requests.get(url)
    html = response.text
 
    soup = BeautifulSoup(html, 'html.parser')
    return soup

if __name__ == '__main__':
    url = 'https://www.example.com/'
    soup = scrape_website(url)
    print(soup)",Control Structure,2686,"import requests
from bs4 import BeautifulSoup

def scrape_website(url):
    response = requests.get(url)
    html = response.text
 
    soup = BeautifulSoup(html, 'html.parser')
    return soup

if __name__ == '__main__':
    url = 'https://www.example.com/'
    soup = scrape_website(url)
    print(soup)","import requests
from bs4 import BeautifulSoup

def scrape_website(url):
    response = requests.get(url)
    html = response.text
 
    soup = BeautifulSoup(html, 'html.parser')
    ___

if __name__ == '__main__':
    url = 'https://www.example.com/'
    soup = scrape_website(url)
    print(soup)"
Create a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter.,No Input,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width
    def perimeter(self):
        return (2 * self.length) + (2 * self.width)",Control Structure,2703,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width
    def perimeter(self):
        return (2 * self.length) + (2 * self.width)","class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
    ___
    def perimeter(self):
    ___"
Optimize the following Python code for efficiency.,"def search(list, query): 
    if query in list: 
        return True 
    else: 
        return False","def search(list, query): 
    return query in list",Control Structure,2705,"def search(list, query): 
    return query in list","def search(list, query): 
    ___"
Write a Python program to calculate the total amount of taxes to be paid by a customer for an online purchase. The input should include the cost of the item and the tax rate.,"Item cost: 700, Tax rate: 10%","def calculate_total_tax(cost, rate):
 """"""Calculate the total amount of taxes to be paid""""""
 tax = cost * rate/100
 total = cost + tax

 return total

total_amount = calculate_total_tax(700, 10)
print(f""The total amount, including taxes, is {total_amount}"") # 770",Control Structure,2742,"def calculate_total_tax(cost, rate):
 """"""Calculate the total amount of taxes to be paid""""""
 tax = cost * rate/100
 total = cost + tax

 return total

total_amount = calculate_total_tax(700, 10)
print(f""The total amount, including taxes, is {total_amount}"") # 770","def calculate_total_tax(cost, rate):
 """"""Calculate the total amount of taxes to be paid""""""
 tax = cost * rate/100
 total = cost + tax

    ___

total_amount = calculate_total_tax(700, 10)
print(f""The total amount, including taxes, is {total_amount}"") # 770"
Create a Python code to check if two DNA sequences are equal.,"ATTCTCA, ATTCCTA","def equal(dna1, dna2):
    if (dna1 ==dna2):
        return True
    else:
        return False
dna1 = 'ATTCTCA'
dna2 = 'ATTCCTA'

print(equal(dna1,dna2))",Control Structure,2783,"def equal(dna1, dna2):
    if (dna1 ==dna2):
        return True
    else:
        return False
dna1 = 'ATTCTCA'
dna2 = 'ATTCCTA'

print(equal(dna1,dna2))","def equal(dna1, dna2):
    if (dna1 ==dna2):
    ___
    ___
    ___
dna1 = 'ATTCTCA'
dna2 = 'ATTCCTA'

print(equal(dna1,dna2))"
Generate a python program for validating a phone number.,"Phone numbers should be in 10-digit format (no dashes, hyphens, etc.).","def valid_phone_number(phone):
    phone = str(phone)
    return len(phone) == 10 and phone.isdigit()",Control Structure,2787,"def valid_phone_number(phone):
    phone = str(phone)
    return len(phone) == 10 and phone.isdigit()","def valid_phone_number(phone):
    phone = str(phone)
    ___"
Create a function in Python that checks if a given number is a prime.,15,"def isPrime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n))+1):
        if n % i == 0:
            return False
    return True",Control Structure,2796,"def isPrime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n))+1):
        if n % i == 0:
            return False
    return True","def isPrime(n):
    if n < 2:
    ___
    for i in range(2, int(sqrt(n))+1):
        if n % i == 0:
    ___
    ___"
"Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state ""Try again"". If the score is 1, the message should state ""Well done"".",score = 0,"def create_response(score):
 if score == 0:
  message = ""Try again""  
 elif score == 1:
  message = ""Well done""
 else:
  message = """"
 
 return {""score"": score, ""message"": message}",Control Structure,2801,"def create_response(score):
 if score == 0:
  message = ""Try again""  
 elif score == 1:
  message = ""Well done""
 else:
  message = """"
 
 return {""score"": score, ""message"": message}","def create_response(score):
 if score == 0:
  message = ""Try again""  
 elif score == 1:
  message = ""Well done""
    ___
  message = """"
 
    ___"
"Using Python, generate a program for solving linear equations.","x + 2y = 8
3x – 4y = -2","def solution(coefficients):
	# get the coefficients of the equations
	a = coefficients[0][0] 
	b = coefficients[0][1] 
	c = coefficients[0][2] 
	d = coefficients[1][0] 
	e = coefficients[1][1] 
	f = coefficients[1][2] 

	# solve for x and y
	y = (a*f - c*d)/(a*e - b*d) 
	x = (c*e - b*f)/(a*e - b*d) 

	# return the solutions
	return x, y


# example
solution([[1, 2, 8], [3, -4, -2]])",Control Structure,2816,"def solution(coefficients):
	# get the coefficients of the equations
	a = coefficients[0][0] 
	b = coefficients[0][1] 
	c = coefficients[0][2] 
	d = coefficients[1][0] 
	e = coefficients[1][1] 
	f = coefficients[1][2] 

	# solve for x and y
	y = (a*f - c*d)/(a*e - b*d) 
	x = (c*e - b*f)/(a*e - b*d) 

	# return the solutions
	return x, y


# example
solution([[1, 2, 8], [3, -4, -2]])","def solution(coefficients):
	# get the coefficients of the equations
	a = coefficients[0][0] 
	b = coefficients[0][1] 
	c = coefficients[0][2] 
	d = coefficients[1][0] 
	e = coefficients[1][1] 
	f = coefficients[1][2] 

	# solve for x and y
	y = (a*f - c*d)/(a*e - b*d) 
	x = (c*e - b*f)/(a*e - b*d) 

    ___
    ___


# example
solution([[1, 2, 8], [3, -4, -2]])"
Create a function in Python for evaluating a given expression.,"expression = ""2 * (3 + 4)""","def eval_expr(expr):
    return eval(expr)

print(eval_expr(""2 * (3 + 4)""))
# 14",Control Structure,2830,"def eval_expr(expr):
    return eval(expr)

print(eval_expr(""2 * (3 + 4)""))
# 14","def eval_expr(expr):
    ___

print(eval_expr(""2 * (3 + 4)""))
# 14"
Generate a Python program to apply custom formatting for the following output.,"Given a list of strings, output a HTML table with data in the strings","def create_html_table(slist):
    table_html = ""<table>""
    for str in slist:
        table_html += ""<tr>""
        table_html += ""<td>"" + str + ""</td>"" 
        table_html += ""</tr>""

    table_html += ""</table>""
    return table_html",Control Structure,2842,"def create_html_table(slist):
    table_html = ""<table>""
    for str in slist:
        table_html += ""<tr>""
        table_html += ""<td>"" + str + ""</td>"" 
        table_html += ""</tr>""

    table_html += ""</table>""
    return table_html","def create_html_table(slist):
    table_html = ""<table>""
    for str in slist:
        table_html += ""<tr>""
        table_html += ""<td>"" + str + ""</td>"" 
        table_html += ""</tr>""

    table_html += ""</table>""
    ___"
"Modify the Python function so that it prints ""Success!"" if the input parameter is greater than 10, or prints ""Failed!"" if it is less than or equal to 10.",7,"def check_num(num):
    if num > 10:
        print(""Success!"")
    else:
        print(""Failed!"")

check_num(7)",Control Structure,2878,"def check_num(num):
    if num > 10:
        print(""Success!"")
    else:
        print(""Failed!"")

check_num(7)","def check_num(num):
    if num > 10:
        print(""Success!"")
    ___
        print(""Failed!"")

check_num(7)"
Write a Python program that takes two given strings and checks if the first is a substring of the second one.,"string_1 = 'cat'
string_2 = 'the cats meow'","def is_substring(string_1, string_2):
    
    if string_1 in string_2:
        return True
    else:
        return False",Control Structure,2900,"def is_substring(string_1, string_2):
    
    if string_1 in string_2:
        return True
    else:
        return False","def is_substring(string_1, string_2):
    
    if string_1 in string_2:
    ___
    ___
    ___"
Create a Python program for sorting a dictionary based on a given key.,"{""apple"": 10, ""banana"": 5, ""pear"": 7}","def sort_dict(d, key): 
 return sorted(d.items(), key=lambda x: x[1][key])

#Test
d = {""apple"": 10, ""banana"": 5, ""pear"": 7} 

print(sort_dict(d, ""price""))
# Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})]",Control Structure,2905,"def sort_dict(d, key): 
 return sorted(d.items(), key=lambda x: x[1][key])

#Test
d = {""apple"": 10, ""banana"": 5, ""pear"": 7} 

print(sort_dict(d, ""price""))
# Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})]","def sort_dict(d, key): 
    ___

#Test
d = {""apple"": 10, ""banana"": 5, ""pear"": 7} 

print(sort_dict(d, ""price""))
# Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})]"
Generate a stack trace for the following Python program,"import traceback
def foo(x, y):
    return x/y

try:
    foo(10, 0)
except:
    traceback.print_exc()","Traceback (most recent call last):
  File ""code.py"", line 6, in <module>
    foo(10, 0)
  File ""code.py"", line 3, in foo
    return x/y
ZeroDivisionError: division by zero",Control Structure,2915,"Traceback (most recent call last):
  File ""code.py"", line 6, in <module>
    foo(10, 0)
  File ""code.py"", line 3, in foo
    return x/y
ZeroDivisionError: division by zero","Traceback (most recent call last):
  File ""code.py"", line 6, in <module>
    foo(10, 0)
  File ""code.py"", line 3, in foo
    ___
ZeroDivisionError: division by zero"
Compare two arrays of Python objects and return True if all objects in arrayA are also in arrayB.,"arrayA = ['a', 'b', 'c', 'd']
arrayB = ['c', 'b', 'a', 'd', 'e']","def compare_arrays(arrA, arrB):
    for i in arrA:
        if i not in arrB:
            return False
    return True",Control Structure,2920,"def compare_arrays(arrA, arrB):
    for i in arrA:
        if i not in arrB:
            return False
    return True","def compare_arrays(arrA, arrB):
    for i in arrA:
        if i not in arrB:
    ___
    ___"
Generate a python program to check the sum of two numbers and determine if they are equal or not.,Compare a = 4 and b = 6,"def compare_sum(a, b):
  if a + b == 10:
    return True
  else:
    return False",Control Structure,2995,"def compare_sum(a, b):
  if a + b == 10:
    return True
  else:
    return False","def compare_sum(a, b):
  if a + b == 10:
    ___
    ___
    ___"
Write a Python code to check if a given number is divisible by both 5 and 7,50,"def is_divisible_by_5_and_7(num):
    if (num % 5 == 0 and num % 7 == 0):
        return True
    else:
        return False

print(is_divisible_by_5_and_7(50))",Control Structure,3027,"def is_divisible_by_5_and_7(num):
    if (num % 5 == 0 and num % 7 == 0):
        return True
    else:
        return False

print(is_divisible_by_5_and_7(50))","def is_divisible_by_5_and_7(num):
    if (num % 5 == 0 and num % 7 == 0):
    ___
    ___
    ___

print(is_divisible_by_5_and_7(50))"
Edit the following Python function to raise an exception if the given number is lower than 0.,"def square(num):
    return num**2","def square(num):
    if num < 0:
        raise ValueError('Cannot square negative numbers.')
    return num**2",Control Structure,3059,"def square(num):
    if num < 0:
        raise ValueError('Cannot square negative numbers.')
    return num**2","def square(num):
    if num < 0:
        raise ValueError('Cannot square negative numbers.')
    ___"
Create a Python dictionary for alphabetical order of numeric input,"[2, 3, 1]","def createDict(arr):
  res = {}
  for i in range(len(arr)):
    res[arr[i]] = i + 1
  return res

d = createDict([2, 3, 1])
print(d)",Control Structure,3107,"def createDict(arr):
  res = {}
  for i in range(len(arr)):
    res[arr[i]] = i + 1
  return res

d = createDict([2, 3, 1])
print(d)","def createDict(arr):
  res = {}
  for i in range(len(arr)):
    res[arr[i]] = i + 1
    ___

d = createDict([2, 3, 1])
print(d)"
Optimize a Python program for calculating the sum of the first N numbers.,n = 20,"def get_sum(n):
    return (n*(n+1)) // 2

n = 20
sum_of_num = get_sum(n)

print(""Sum of first"", n, ""numbers is"", sum_of_num)",Control Structure,3114,"def get_sum(n):
    return (n*(n+1)) // 2

n = 20
sum_of_num = get_sum(n)

print(""Sum of first"", n, ""numbers is"", sum_of_num)","def get_sum(n):
    ___

n = 20
sum_of_num = get_sum(n)

print(""Sum of first"", n, ""numbers is"", sum_of_num)"
Generate a program in Python that will check if a given number is a palindrome.,123321,"def is_palindrome(n):
 n = str(n)
 
 return n == n[::-1]
 
num = 123321
if is_palindrome(num):
 print(f""{num} is a palindrome"")
else:
 print(f""{num} is not a palindrome"")",Control Structure,3121,"def is_palindrome(n):
 n = str(n)
 
 return n == n[::-1]
 
num = 123321
if is_palindrome(num):
 print(f""{num} is a palindrome"")
else:
 print(f""{num} is not a palindrome"")","def is_palindrome(n):
 n = str(n)
 
    ___
 
num = 123321
if is_palindrome(num):
 print(f""{num} is a palindrome"")
    ___
 print(f""{num} is not a palindrome"")"
Write an algorithm in Python to determine if a number is an Armstrong number or not.,The number is 370.,"def armstrong_number(num):
  digits = [int(x) for x in str(num)]
  n_digits = len(digits)
  sum_of_cubes = 0
  for digit in digits:
    sum_of_cubes += digit ** n_digits
  if sum_of_cubes == num:
    return True
  else:
    return False

armstrong_number(370)",Control Structure,3228,"def armstrong_number(num):
  digits = [int(x) for x in str(num)]
  n_digits = len(digits)
  sum_of_cubes = 0
  for digit in digits:
    sum_of_cubes += digit ** n_digits
  if sum_of_cubes == num:
    return True
  else:
    return False

armstrong_number(370)","def armstrong_number(num):
  digits = [int(x) for x in str(num)]
  n_digits = len(digits)
  sum_of_cubes = 0
  for digit in digits:
    sum_of_cubes += digit ** n_digits
  if sum_of_cubes == num:
    ___
    ___
    ___

armstrong_number(370)"
Develop a Python script for creating a dictionary with all the occurrences of the words in a sentence.,John and Mary went to the school,"sentence = ""John and Mary went to the school""
words = sentence.split()
word_dict = {}

for word in words:
    if word in word_dict:
        word_dict[word] += 1
    else:
        word_dict[word] = 1

print(word_dict)",Control Structure,3248,"sentence = ""John and Mary went to the school""
words = sentence.split()
word_dict = {}

for word in words:
    if word in word_dict:
        word_dict[word] += 1
    else:
        word_dict[word] = 1

print(word_dict)","sentence = ""John and Mary went to the school""
words = sentence.split()
word_dict = {}

for word in words:
    if word in word_dict:
        word_dict[word] += 1
    ___
        word_dict[word] = 1

print(word_dict)"
Create a method in Python that accepts two strings and returns a boolean if the two strings are anagrams.,“listen” and “silent”,"def is_anagram(string1, string2):
    return (sorted(string1) == sorted(string2))

print(is_anagram(""listen"", ""silent"")) # prints True",Control Structure,3255,"def is_anagram(string1, string2):
    return (sorted(string1) == sorted(string2))

print(is_anagram(""listen"", ""silent"")) # prints True","def is_anagram(string1, string2):
    ___

print(is_anagram(""listen"", ""silent"")) # prints True"
Create a function in Python for calculating the surface area of a cube.,The length of one of the sides of the cube,"def cube_area(side):
 return 6 * (side ** 2)",Control Structure,3256,"def cube_area(side):
 return 6 * (side ** 2)","def cube_area(side):
    ___"
Generate a Python program for merging two sorted lists.,"l1 = [1, 2, 5] 
l2 = [3, 4, 6]","def merge_sorted_lists(l1, l2):
        l3 = l1 + l2
        l3.sort()
        return l3
    
l1 = [1, 2, 5] 
l2 = [3, 4, 6]

result = merge_sorted_lists(l1, l2)
print(result)",Control Structure,3257,"def merge_sorted_lists(l1, l2):
        l3 = l1 + l2
        l3.sort()
        return l3
    
l1 = [1, 2, 5] 
l2 = [3, 4, 6]

result = merge_sorted_lists(l1, l2)
print(result)","def merge_sorted_lists(l1, l2):
        l3 = l1 + l2
        l3.sort()
    ___
    
l1 = [1, 2, 5] 
l2 = [3, 4, 6]

result = merge_sorted_lists(l1, l2)
print(result)"
Write a Python program for creating email address based on input domain name and username.,"username=johndoe
domain=example.com","def generate_email_address(username, domain):
  return f""{username}@{domain}""

username = input(""Enter username:"")
domain = input(""Enter domain:"")

email_address = generate_email_address(username, domain)
print(""Generated email address:"", email_address)",Control Structure,3279,"def generate_email_address(username, domain):
  return f""{username}@{domain}""

username = input(""Enter username:"")
domain = input(""Enter domain:"")

email_address = generate_email_address(username, domain)
print(""Generated email address:"", email_address)","def generate_email_address(username, domain):
    ___

username = input(""Enter username:"")
domain = input(""Enter domain:"")

email_address = generate_email_address(username, domain)
print(""Generated email address:"", email_address)"
Create a python program to find if a number is a prime number,15,"def is_prime(num):
    for i in range(2, num):
        if not num % i:
            return False
    return True

num = 15 
if is_prime(num):
    print(""The number is prime"")
else:
    print(""The number is not prime"")",Control Structure,3313,"def is_prime(num):
    for i in range(2, num):
        if not num % i:
            return False
    return True

num = 15 
if is_prime(num):
    print(""The number is prime"")
else:
    print(""The number is not prime"")","def is_prime(num):
    for i in range(2, num):
        if not num % i:
    ___
    ___

num = 15 
if is_prime(num):
    print(""The number is prime"")
    ___
    print(""The number is not prime"")"
"Assuming a Python class Point for representing a point in a two dimensional plane with x and y as its field variables, write a method to calculate the distance from a point to the origin.","class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y","class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    
    def distance_from_origin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5",Control Structure,3323,"class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    
    def distance_from_origin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5","class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    
    def distance_from_origin(self):
    ___"
Generate a python script to calculate the total public holiday hours for a given state.,"state = ""Illinois""","state = ""Illinois""

def calculate_public_holiday_hours(state):
    # code to calculate public holiday hours for a given state
    if state == ""Illinois"":
        return 8
    # code for other states

hours = calculate_public_holiday_hours(state)
print(""Public holiday hours:"", hours)",Control Structure,3340,"state = ""Illinois""

def calculate_public_holiday_hours(state):
    # code to calculate public holiday hours for a given state
    if state == ""Illinois"":
        return 8
    # code for other states

hours = calculate_public_holiday_hours(state)
print(""Public holiday hours:"", hours)","state = ""Illinois""

def calculate_public_holiday_hours(state):
    # code to calculate public holiday hours for a given state
    if state == ""Illinois"":
    ___
    # code for other states

hours = calculate_public_holiday_hours(state)
print(""Public holiday hours:"", hours)"
Optimize the following Python code for adding two numbers,"a = 3
b = 4
c = a + b","def addTwoNum(a, b):
 return a + b

c = addTwoNum(3, 4)",Control Structure,3346,"def addTwoNum(a, b):
 return a + b

c = addTwoNum(3, 4)","def addTwoNum(a, b):
    ___

c = addTwoNum(3, 4)"
Generate a python code to calculate the factorial for a given number.,num = 5,"def factorial(number):
    if number == 0:
        return 1
    else:
        return number * factorial(number -1)

factorial(num)",Control Structure,3363,"def factorial(number):
    if number == 0:
        return 1
    else:
        return number * factorial(number -1)

factorial(num)","def factorial(number):
    if number == 0:
    ___
    ___
    ___

factorial(num)"
Write a Python program to determine if one number is a multiple of another.,"num1: 32
num2: 8","def is_multiple(num1, num2):
   if (num1 % num2 == 0):
       print(f'{num1} is a multiple of {num2}')
   else:
       print(f'{num1} is not a multiple of {num2}')

is_multiple(32, 8)

Output:
32 is a multiple of 8",Control Structure,3366,"def is_multiple(num1, num2):
   if (num1 % num2 == 0):
       print(f'{num1} is a multiple of {num2}')
   else:
       print(f'{num1} is not a multiple of {num2}')

is_multiple(32, 8)

Output:
32 is a multiple of 8","def is_multiple(num1, num2):
   if (num1 % num2 == 0):
       print(f'{num1} is a multiple of {num2}')
    ___
       print(f'{num1} is not a multiple of {num2}')

is_multiple(32, 8)

Output:
32 is a multiple of 8"
Create a Python script to calculate the Fibonacci sequence for a given integer n.,7,"# Fibonacci sequence
def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
 print(""Incorrect input"")
 elif n == 0:
 return a
 elif n == 1:
 return b
 else:
 for i in range(2,n):
 c = a + b
 a = b
 b = c
 return b

# Driver Program
print(Fibonacci(7)) 
# Output: 13",Control Structure,3437,"# Fibonacci sequence
def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
 print(""Incorrect input"")
 elif n == 0:
 return a
 elif n == 1:
 return b
 else:
 for i in range(2,n):
 c = a + b
 a = b
 b = c
 return b

# Driver Program
print(Fibonacci(7)) 
# Output: 13","# Fibonacci sequence
def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
 print(""Incorrect input"")
 elif n == 0:
    ___
 elif n == 1:
    ___
    ___
 for i in range(2,n):
 c = a + b
 a = b
 b = c
    ___

# Driver Program
print(Fibonacci(7)) 
# Output: 13"
Identify errors and write fix for the following python code,"def uppercase_letter_count(string):
    count = 0
    for c in string
        if c.isupper():
            count += 1
    return count","def uppercase_letter_count(string):
    count = 0
    for c in string: # Added missing colon
        if c.isupper():
            count += 1
    return count # Removed an unnecessary '-'",Control Structure,3450,"def uppercase_letter_count(string):
    count = 0
    for c in string: # Added missing colon
        if c.isupper():
            count += 1
    return count # Removed an unnecessary '-'","def uppercase_letter_count(string):
    count = 0
    for c in string: # Added missing colon
        if c.isupper():
            count += 1
    ___"
Create a scoring system for a trivia game in Python. The system should take two inputs - the correct answer and user response - and return a single score value.,"correct_answer = '5'
user_response = 'five'","def score_trivia(correct, user):
    correct = correct.lower()
    user = user.lower()

    max_score = 10
    score = 0

    if correct == user:
        score = max_score
    elif user in correct or correct in user:
        score = max_score * 0.8

    return score",Control Structure,3452,"def score_trivia(correct, user):
    correct = correct.lower()
    user = user.lower()

    max_score = 10
    score = 0

    if correct == user:
        score = max_score
    elif user in correct or correct in user:
        score = max_score * 0.8

    return score","def score_trivia(correct, user):
    correct = correct.lower()
    user = user.lower()

    max_score = 10
    score = 0

    if correct == user:
        score = max_score
    elif user in correct or correct in user:
        score = max_score * 0.8

    ___"
"Given two strings A and B, construct a Python program to determine if B is a substring of A.","A = ""I am here"" 
B = ""here""","def is_substring(A, B): 
    if B in A: 
        return True 
    else: 
        return False",Control Structure,3498,"def is_substring(A, B): 
    if B in A: 
        return True 
    else: 
        return False","def is_substring(A, B): 
    if B in A: 
    ___
    ___
    ___"
Optimize a Python function for maximum performance.,"def reverse_string(s): 
    return s[::-1]","def reverse_string(s): 
    start = 0 
    end = len(s) 
    string="""" 

    while end > 0: 
        string += s[end-1] 
        end -= 1

    return string",Control Structure,3542,"def reverse_string(s): 
    start = 0 
    end = len(s) 
    string="""" 

    while end > 0: 
        string += s[end-1] 
        end -= 1

    return string","def reverse_string(s): 
    start = 0 
    end = len(s) 
    string="""" 

    while end > 0: 
        string += s[end-1] 
        end -= 1

    ___"
Generate a Python program to find the greatest common divisor (GCD) for two given numbers.,"6, 4","def gcd(number1, number2): 
    if(number2 == 0): 
        return number1 
    return gcd(number2, number1%number2) 

first_num = 6
second_num = 4

print(""The greatest common divisor of 6 and 4 is"", gcd(first_num, second_num))",Control Structure,3555,"def gcd(number1, number2): 
    if(number2 == 0): 
        return number1 
    return gcd(number2, number1%number2) 

first_num = 6
second_num = 4

print(""The greatest common divisor of 6 and 4 is"", gcd(first_num, second_num))","def gcd(number1, number2): 
    if(number2 == 0): 
    ___
    ___

first_num = 6
second_num = 4

print(""The greatest common divisor of 6 and 4 is"", gcd(first_num, second_num))"
Write a Python program that checks if a given number is prime.,7,"def is_prime(n):
    if n == 2 or n == 3:
        return True
    if n < 2 or n%2 == 0:
        return False
    if n < 9:
        return True
    if n%3 == 0:
        return False

    r = int(n**0.5)
    f = 5
    while f <= r:
        if n%f == 0:
            return False
        if n % (f+2) == 0:
            return False
        f += 6
    return True

num = 7
print(""Is"", num, ""prime?: "", is_prime(num))",Control Structure,3595,"def is_prime(n):
    if n == 2 or n == 3:
        return True
    if n < 2 or n%2 == 0:
        return False
    if n < 9:
        return True
    if n%3 == 0:
        return False

    r = int(n**0.5)
    f = 5
    while f <= r:
        if n%f == 0:
            return False
        if n % (f+2) == 0:
            return False
        f += 6
    return True

num = 7
print(""Is"", num, ""prime?: "", is_prime(num))","def is_prime(n):
    if n == 2 or n == 3:
    ___
    if n < 2 or n%2 == 0:
    ___
    if n < 9:
    ___
    if n%3 == 0:
    ___

    r = int(n**0.5)
    f = 5
    while f <= r:
        if n%f == 0:
    ___
        if n % (f+2) == 0:
    ___
        f += 6
    ___

num = 7
print(""Is"", num, ""prime?: "", is_prime(num))"
Improve the following Python code to check if a number is in the range of 1 to 10 (inclusive).,"def check_number(num):
if num >= 1 and num <= 10:
   return True","def check_number(num):
  if (num > 0 and num < 11):
    return True
  else:
    return False",Control Structure,3664,"def check_number(num):
  if (num > 0 and num < 11):
    return True
  else:
    return False","def check_number(num):
  if (num > 0 and num < 11):
    ___
    ___
    ___"
Develop a program in Python for finding the factorial of a given number.,7,"def factorial(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

num = 7
print('factorial of {} is {}'.format(num, factorial(num)))",Control Structure,3665,"def factorial(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

num = 7
print('factorial of {} is {}'.format(num, factorial(num)))","def factorial(n):
    if n < 0:
    ___
    elif n == 0:
    ___
    ___
        result = 1
        for i in range(1, n + 1):
            result *= i
    ___

num = 7
print('factorial of {} is {}'.format(num, factorial(num)))"
Create a python program for the following purpose:,"Create a program that takes a positive integer N and an array A of length N, and outputs the total number of unique pairs of elements in A which sum up to an even number.","def count_even_pairs(N, A):
    n = 0
    for i in range(N):
        for j in range(i+1,N):
            if (A[i] + A[j]) % 2 == 0:
                n += 1
    return n",Control Structure,3678,"def count_even_pairs(N, A):
    n = 0
    for i in range(N):
        for j in range(i+1,N):
            if (A[i] + A[j]) % 2 == 0:
                n += 1
    return n","def count_even_pairs(N, A):
    n = 0
    for i in range(N):
        for j in range(i+1,N):
            if (A[i] + A[j]) % 2 == 0:
                n += 1
    ___"
Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.,"def factorial(n):
 if n < 1:
  return 1
 else:
  return n*factorial(n-1)","def factorial(n):
    if n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n+1):
            result *= i
        return result",Control Structure,3683,"def factorial(n):
    if n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n+1):
            result *= i
        return result","def factorial(n):
    if n == 0:
    ___
    ___
        result = 1
        for i in range(1, n+1):
            result *= i
    ___"
Create a Python program to detect if a number is a prime number.,No input.,"def is_prime(x):
    if x < 2:
        return False
    
    for i in range(2, x):
        if x % i == 0:
            return False
    return True",Control Structure,3745,"def is_prime(x):
    if x < 2:
        return False
    
    for i in range(2, x):
        if x % i == 0:
            return False
    return True","def is_prime(x):
    if x < 2:
    ___
    
    for i in range(2, x):
        if x % i == 0:
    ___
    ___"
Create a Python program to check if two given lists are disjoint.,"list1 = [2, 3, 4, 5]
list2 = [6, 7, 8, 9]","def check_disjoint(list1, list2):
    return not bool(set(list1) & set(list2))

result = check_disjoint(list1, list2)
print(result)",Control Structure,3746,"def check_disjoint(list1, list2):
    return not bool(set(list1) & set(list2))

result = check_disjoint(list1, list2)
print(result)","def check_disjoint(list1, list2):
    ___

result = check_disjoint(list1, list2)
print(result)"
Create a program in Python that takes two lists and checks for common elements between them.,"list1 = [1,2,3,4]
list2 = [3,4,5,6]","list1 = [1,2,3,4]
list2 = [3,4,5,6] 

def check_common(list1, list2): 
    result = False
    for x in list1: 
        for y in list2: 
            if x == y: 
                result = True
                return result  
    return result 
  
print(check_common(list1, list2))",Control Structure,3752,"list1 = [1,2,3,4]
list2 = [3,4,5,6] 

def check_common(list1, list2): 
    result = False
    for x in list1: 
        for y in list2: 
            if x == y: 
                result = True
                return result  
    return result 
  
print(check_common(list1, list2))","list1 = [1,2,3,4]
list2 = [3,4,5,6] 

def check_common(list1, list2): 
    result = False
    for x in list1: 
        for y in list2: 
            if x == y: 
                result = True
    ___
    ___
  
print(check_common(list1, list2))"
Develop a python program that checks if a given word is consonant or not.,"word: ""hello""","def is_consonant(word): 
    # List containing all consonants 
    consonants = [""b"",""c"",""d"",""f"",""g"",""h"",""j"",""k"",""l"",""m"",""n"",""p"",""q"",""r"",""s"",""t"",""v"",""x"",""z""] 
    for char in word: 
        if char in consonants: 
            return True
    return False

# Example
print (is_consonant(""hello"")) # False",Control Structure,3753,"def is_consonant(word): 
    # List containing all consonants 
    consonants = [""b"",""c"",""d"",""f"",""g"",""h"",""j"",""k"",""l"",""m"",""n"",""p"",""q"",""r"",""s"",""t"",""v"",""x"",""z""] 
    for char in word: 
        if char in consonants: 
            return True
    return False

# Example
print (is_consonant(""hello"")) # False","def is_consonant(word): 
    # List containing all consonants 
    consonants = [""b"",""c"",""d"",""f"",""g"",""h"",""j"",""k"",""l"",""m"",""n"",""p"",""q"",""r"",""s"",""t"",""v"",""x"",""z""] 
    for char in word: 
        if char in consonants: 
    ___
    ___

# Example
print (is_consonant(""hello"")) # False"
Create a Python algorithm to check if a given word exists in a dictionary.,"dictionary: {""hello"": ""greeting"", ""car"": ""vehicle""}
word: ""hello""","# Function to test if a word exists in a dictionary 
def wordExists(dictionary, word):
    for key, value in dictionary.items():
        if key == word:
            return True
    
    return False

# Main function
dictionary = {""hello"": ""greeting"", ""car"": ""vehicle""}
word = ""hello""
print(wordExists(dictionary, word))",Control Structure,3763,"# Function to test if a word exists in a dictionary 
def wordExists(dictionary, word):
    for key, value in dictionary.items():
        if key == word:
            return True
    
    return False

# Main function
dictionary = {""hello"": ""greeting"", ""car"": ""vehicle""}
word = ""hello""
print(wordExists(dictionary, word))","# Function to test if a word exists in a dictionary 
def wordExists(dictionary, word):
    for key, value in dictionary.items():
        if key == word:
    ___
    
    ___

# Main function
dictionary = {""hello"": ""greeting"", ""car"": ""vehicle""}
word = ""hello""
print(wordExists(dictionary, word))"
Generate a correct python program for solving the following problem,"Given a list of values, find the indices of all pairs whose sum is equal to a given target","def find_pairs_with_sum(values, target):
    indices_list = []
    for i in range(len(values)):
        x = target - values[i]
        if x in values[i+1:]:
            indices_list.extend([i, values.index(x)])
    return indices_list",Control Structure,3771,"def find_pairs_with_sum(values, target):
    indices_list = []
    for i in range(len(values)):
        x = target - values[i]
        if x in values[i+1:]:
            indices_list.extend([i, values.index(x)])
    return indices_list","def find_pairs_with_sum(values, target):
    indices_list = []
    for i in range(len(values)):
        x = target - values[i]
        if x in values[i+1:]:
            indices_list.extend([i, values.index(x)])
    ___"
Tackle the task of optimizing a given Python program for faster execution.,"# Program to find the sum of two numbers
def add_numbers(a, b):
    return a + b","# Program to find the sum of two numbers
def add_numbers(a, b):
    # Use bitwise operators instead of normal arithmetic operations
    # as they are much faster and more efficient 
    return a ^ b if a <= b else b ^ a if b <= a else a ^ b",Control Structure,3795,"# Program to find the sum of two numbers
def add_numbers(a, b):
    # Use bitwise operators instead of normal arithmetic operations
    # as they are much faster and more efficient 
    return a ^ b if a <= b else b ^ a if b <= a else a ^ b","# Program to find the sum of two numbers
def add_numbers(a, b):
    # Use bitwise operators instead of normal arithmetic operations
    # as they are much faster and more efficient 
    ___"
Create a Python function to identify if a number is divisible by 7.,42,"def is_divisible_by_7(number):
    return number % 7 == 0

result = is_divisible_by_7(42)
print(result) # True",Control Structure,3805,"def is_divisible_by_7(number):
    return number % 7 == 0

result = is_divisible_by_7(42)
print(result) # True","def is_divisible_by_7(number):
    ___

result = is_divisible_by_7(42)
print(result) # True"
Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result.,"URL: http://www.example.com
Keyword: success","import requests

url = 'http://www.example.com'
keyword = 'success'

r = requests.get(url)
if keyword in r.text:
 print('Pass')
else:
 print('Fail')",Control Structure,3809,"import requests

url = 'http://www.example.com'
keyword = 'success'

r = requests.get(url)
if keyword in r.text:
 print('Pass')
else:
 print('Fail')","import requests

url = 'http://www.example.com'
keyword = 'success'

r = requests.get(url)
if keyword in r.text:
 print('Pass')
    ___
 print('Fail')"
"Given two strings s and t, write a Python program to check if t is a substring of s.","s = ""abcabc""
t = ""abc""","def is_substring(s, t):
    if t in s:
        return True
    else:
        return False",Control Structure,3811,"def is_substring(s, t):
    if t in s:
        return True
    else:
        return False","def is_substring(s, t):
    if t in s:
    ___
    ___
    ___"
"Create a function in Python which takes in a number n and returns ""Fizz"" if the number is divisible by 3, ""Buzz"" if the number is divisible by 5, and ""FizzBuzz"" if the number is divisible by both 3 and 5.",Number: 15,"def fizzbuzz(n):
 if n % 3 == 0 and n % 5 == 0:
  return 'FizzBuzz'
 elif n % 3 == 0:
  return 'Fizz'
 elif n % 5 == 0:
  return 'Buzz'
 else:
  return n",Control Structure,3822,"def fizzbuzz(n):
 if n % 3 == 0 and n % 5 == 0:
  return 'FizzBuzz'
 elif n % 3 == 0:
  return 'Fizz'
 elif n % 5 == 0:
  return 'Buzz'
 else:
  return n","def fizzbuzz(n):
 if n % 3 == 0 and n % 5 == 0:
    ___
 elif n % 3 == 0:
    ___
 elif n % 5 == 0:
    ___
    ___
    ___"
Build a function in Python for computing the Hamming Distance between two strings of equal length.,"String 1: python
String 2: perl","def hammingDistance(s1, s2): 

    # initialize with 0
    distance = 0
  
    # Calculate the length of the string 
    length_str1 = len(s1) 
    # Compare adjacent characters and increment the count 
    # if characters are not same 
    for i in range(length_str1): 
        if s1[i] != s2[i]: 
            distance += 1
  
    return distance",Control Structure,3853,"def hammingDistance(s1, s2): 

    # initialize with 0
    distance = 0
  
    # Calculate the length of the string 
    length_str1 = len(s1) 
    # Compare adjacent characters and increment the count 
    # if characters are not same 
    for i in range(length_str1): 
        if s1[i] != s2[i]: 
            distance += 1
  
    return distance","def hammingDistance(s1, s2): 

    # initialize with 0
    distance = 0
  
    # Calculate the length of the string 
    length_str1 = len(s1) 
    # Compare adjacent characters and increment the count 
    # if characters are not same 
    for i in range(length_str1): 
        if s1[i] != s2[i]: 
            distance += 1
  
    ___"
Optimize the Python program below for making the code more efficient.,"def sum_list(list):
    result = 0
    for i in list:
        result += i
    return result","def sum_list(list):
    return sum(list)",Control Structure,3898,"def sum_list(list):
    return sum(list)","def sum_list(list):
    ___"
Design a function in Python for swapping the values of two given integers.,"x = 3, y = 5","def swap_values(x, y):
    temp = x
    x = y
    y = temp
    return x, y

x, y = swap_values(3,5)
print(x, y)",Control Structure,3919,"def swap_values(x, y):
    temp = x
    x = y
    y = temp
    return x, y

x, y = swap_values(3,5)
print(x, y)","def swap_values(x, y):
    temp = x
    x = y
    y = temp
    ___

x, y = swap_values(3,5)
print(x, y)"
Write a Python statement to check if a given number is within a given range,"Number: 3, Range: 0-10","if 0 <= 3 <= 10:
 print('Number is within the range')
else:
 print('Number is not within the range')",Control Structure,3975,"if 0 <= 3 <= 10:
 print('Number is within the range')
else:
 print('Number is not within the range')","if 0 <= 3 <= 10:
 print('Number is within the range')
    ___
 print('Number is not within the range')"
Write a Python program that takes an integer as input and check if the number is prime or not.,45,"def is_prime(n):
    if n < 2: 
        return False

    for i in range(2, int(n**0.5) + 1):  
        if n % i == 0: 
            return False

    return True",Control Structure,4041,"def is_prime(n):
    if n < 2: 
        return False

    for i in range(2, int(n**0.5) + 1):  
        if n % i == 0: 
            return False

    return True","def is_prime(n):
    if n < 2: 
    ___

    for i in range(2, int(n**0.5) + 1):  
        if n % i == 0: 
    ___

    ___"
Write a Python program to check if a given number is divisible by 3 and 5 or not.,10,"def check_divisible_3and5(num):
    if (num % 3 == 0 and num % 5 == 0):
        return True
    else:
        return False

# test given number
num = 10
if check_divisible_3and5(num):
    print(""%d is divisible by 3 and 5"" %num)
else:
    print(""%d is not divisible by 3 and 5"" %num)",Control Structure,4062,"def check_divisible_3and5(num):
    if (num % 3 == 0 and num % 5 == 0):
        return True
    else:
        return False

# test given number
num = 10
if check_divisible_3and5(num):
    print(""%d is divisible by 3 and 5"" %num)
else:
    print(""%d is not divisible by 3 and 5"" %num)","def check_divisible_3and5(num):
    if (num % 3 == 0 and num % 5 == 0):
    ___
    ___
    ___

# test given number
num = 10
if check_divisible_3and5(num):
    print(""%d is divisible by 3 and 5"" %num)
    ___
    print(""%d is not divisible by 3 and 5"" %num)"
"Write a python function to compare two strings and return 1 if the strings are anagrams, 0 if not.","""bob"", ""bob""","def is_anagram(string1, string2):
    string1 = sorted(string1.replace("" "", """").lower())
    string2 = sorted(string2.replace("" "", """").lower())
    
    if string1 == string2:
        return 1
    else:
        return 0",Control Structure,4067,"def is_anagram(string1, string2):
    string1 = sorted(string1.replace("" "", """").lower())
    string2 = sorted(string2.replace("" "", """").lower())
    
    if string1 == string2:
        return 1
    else:
        return 0","def is_anagram(string1, string2):
    string1 = sorted(string1.replace("" "", """").lower())
    string2 = sorted(string2.replace("" "", """").lower())
    
    if string1 == string2:
    ___
    ___
    ___"
Write a Python function to compare two strings and check if they are equal.,Compare 'Hello' and 'World',"def str_compare(str1, str2):
return str1 == str2

str_compare('Hello', 'World')",Control Structure,4097,"def str_compare(str1, str2):
return str1 == str2

str_compare('Hello', 'World')","def str_compare(str1, str2):
    ___

str_compare('Hello', 'World')"
Write a Python program to check if two strings are a rotation of each other.,"Strings:”geeksforgeeks”, “forgeeksgeeks”","if len(string1) == len(string2) and string1 in string2*2:
    print(""The strings are a rotation of each other"")
else:
    print(""The strings are not a rotation of each other"")",Control Structure,4116,"if len(string1) == len(string2) and string1 in string2*2:
    print(""The strings are a rotation of each other"")
else:
    print(""The strings are not a rotation of each other"")","if len(string1) == len(string2) and string1 in string2*2:
    print(""The strings are a rotation of each other"")
    ___
    print(""The strings are not a rotation of each other"")"
Analyze a given Python code and write a function that checks if a given number is prime.,def primeCheck(num):,"def primeCheck(num):
 if num > 1:
 for i in range(2, num):
  if (num % i) == 0:
   return False
 else:
  return False
 return True",Control Structure,4120,"def primeCheck(num):
 if num > 1:
 for i in range(2, num):
  if (num % i) == 0:
   return False
 else:
  return False
 return True","def primeCheck(num):
 if num > 1:
 for i in range(2, num):
  if (num % i) == 0:
    ___
    ___
    ___
    ___"
Create a Python program for calculating the area of a given triangle.,"float a = 5
float b = 10
float c = 8","def triangleArea(a, b, c): 

    # calculate the semi-perimeter 
    s = (a + b + c) / 2

    # calculate the area 
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

    return area",Control Structure,4144,"def triangleArea(a, b, c): 

    # calculate the semi-perimeter 
    s = (a + b + c) / 2

    # calculate the area 
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

    return area","def triangleArea(a, b, c): 

    # calculate the semi-perimeter 
    s = (a + b + c) / 2

    # calculate the area 
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

    ___"
Create a program in Python for ASCII conversion.,String: “Hello World”,"def ascii_conversion(string):
 return ''.join([f'{ord(c):08b}' for c in string])

print(ascii_conversion(""Hello World""))",Control Structure,4161,"def ascii_conversion(string):
 return ''.join([f'{ord(c):08b}' for c in string])

print(ascii_conversion(""Hello World""))","def ascii_conversion(string):
    ___

print(ascii_conversion(""Hello World""))"
"Develop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise.","listen, silent","# anagram checker

def check_anagrams(str1, str2):
    if sorted(str1) == sorted(str2):
        return True 
    else: 
        return False 
  
# Driver code 
str1 = ""listen""
str2 = ""silent""

if(check_anagrams(str1, str2)): 
    print(""The strings are anagrams."")  
else: 
    print(""The strings aren't anagrams."")",Control Structure,4168,"# anagram checker

def check_anagrams(str1, str2):
    if sorted(str1) == sorted(str2):
        return True 
    else: 
        return False 
  
# Driver code 
str1 = ""listen""
str2 = ""silent""

if(check_anagrams(str1, str2)): 
    print(""The strings are anagrams."")  
else: 
    print(""The strings aren't anagrams."")","# anagram checker

def check_anagrams(str1, str2):
    if sorted(str1) == sorted(str2):
    ___
    ___
    ___
  
# Driver code 
str1 = ""listen""
str2 = ""silent""

if(check_anagrams(str1, str2)): 
    print(""The strings are anagrams."")  
    ___
    print(""The strings aren't anagrams."")"
Write a Python code to check if the given number is prime.,Number = 23,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n//2 + 1):
        if n % i == 0:
            return False
    return True

if is_prime(23):
    print('The given number is prime')
else:
    print('The given number is not prime')",Control Structure,4183,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n//2 + 1):
        if n % i == 0:
            return False
    return True

if is_prime(23):
    print('The given number is prime')
else:
    print('The given number is not prime')","def is_prime(n):
    if n <= 1:
    ___
    for i in range(2, n//2 + 1):
        if n % i == 0:
    ___
    ___

if is_prime(23):
    print('The given number is prime')
    ___
    print('The given number is not prime')"
Write a Python program for finding the maximum of 3 numbers.,"4, 7, 6","def max_of_three(a, b, c):
  if (a > b) and (a > c):
    greatest = a
  elif (b > a) and (b > c):
    greatest = b
  else:
    greatest = c
  return greatest

print(""Max is: "", max_of_three(4, 7, 6))",Control Structure,4190,"def max_of_three(a, b, c):
  if (a > b) and (a > c):
    greatest = a
  elif (b > a) and (b > c):
    greatest = b
  else:
    greatest = c
  return greatest

print(""Max is: "", max_of_three(4, 7, 6))","def max_of_three(a, b, c):
  if (a > b) and (a > c):
    greatest = a
  elif (b > a) and (b > c):
    greatest = b
    ___
    greatest = c
    ___

print(""Max is: "", max_of_three(4, 7, 6))"
Create a python code to check if an integer is a power of two,16,"def isPowerOfTwo(number):
    return (number > 0) and ((number & (number - 1)) == 0)

print(isPowerOfTwo(16))",Control Structure,4191,"def isPowerOfTwo(number):
    return (number > 0) and ((number & (number - 1)) == 0)

print(isPowerOfTwo(16))","def isPowerOfTwo(number):
    ___

print(isPowerOfTwo(16))"
Can you write a Python function to determine if a supplied number is prime?,num=20,"def is_prime(num):
    """"""Check if the given number is prime.

    Args:
        num (int): A number to check

    Returns:
        bool: True if num is prime, False otherwise.
    """"""

    if num < 2: 
        return False

    for i in range(2, num):
        if (num % i) == 0:
            return False
    return True

num = 20
result = is_prime(num)
print(f""Is {num} prime? {result}"")",Control Structure,4198,"def is_prime(num):
    """"""Check if the given number is prime.

    Args:
        num (int): A number to check

    Returns:
        bool: True if num is prime, False otherwise.
    """"""

    if num < 2: 
        return False

    for i in range(2, num):
        if (num % i) == 0:
            return False
    return True

num = 20
result = is_prime(num)
print(f""Is {num} prime? {result}"")","def is_prime(num):
    """"""Check if the given number is prime.

    Args:
        num (int): A number to check

    Returns:
        bool: True if num is prime, False otherwise.
    """"""

    if num < 2: 
    ___

    for i in range(2, num):
        if (num % i) == 0:
    ___
    ___

num = 20
result = is_prime(num)
print(f""Is {num} prime? {result}"")"
Create a Python Flask application for solving a linear equation. The application should have an endpoint that receives an equation as input and returns the solution as output.,3x + 2 = 5,"from flask import Flask, request
from sympy import *

app = Flask(name)
x = Symbol('x')

@app.route('/solve', methods=['POST'])
def solve():
 equation = request.json['equation']
 solution = solve(equation, x)
 return {'solution': str(solution[0])}

if name == 'main':
 app.run(debug=True)",Control Structure,4199,"from flask import Flask, request
from sympy import *

app = Flask(name)
x = Symbol('x')

@app.route('/solve', methods=['POST'])
def solve():
 equation = request.json['equation']
 solution = solve(equation, x)
 return {'solution': str(solution[0])}

if name == 'main':
 app.run(debug=True)","from flask import Flask, request
from sympy import *

app = Flask(name)
x = Symbol('x')

@app.route('/solve', methods=['POST'])
def solve():
 equation = request.json['equation']
 solution = solve(equation, x)
    ___

if name == 'main':
 app.run(debug=True)"
Write a Python program to modify a given dataset for a specific task.,"Dataset:
{
    ""name"": ""John"", 
    ""age"": 20, 
    ""height"": 180
}

Task:
Filter the person's records if they are over the age of 18.","def modify_data(dataset, task):
modified_data = []
 if task == ""filter age >18"":
 for d in dataset:
 if d['age'] > 18:
 modified_data.append(d)
 return modified_data",Control Structure,4285,"def modify_data(dataset, task):
modified_data = []
 if task == ""filter age >18"":
 for d in dataset:
 if d['age'] > 18:
 modified_data.append(d)
 return modified_data","def modify_data(dataset, task):
modified_data = []
 if task == ""filter age >18"":
 for d in dataset:
 if d['age'] > 18:
 modified_data.append(d)
    ___"
Generate a Python code for finding the sum and difference of two numbers.,"7, 9","# Function to calculate the sum and difference
def sum_difference(num1, num2):
    sum = num1 + num2
    difference = num1 - num2
    return sum, difference

# Calculating the sum and difference 
x,y = sum_difference(7,9)

# Print the results 
print(""Sum:"", x)
print(""Difference:"", y)",Control Structure,4306,"# Function to calculate the sum and difference
def sum_difference(num1, num2):
    sum = num1 + num2
    difference = num1 - num2
    return sum, difference

# Calculating the sum and difference 
x,y = sum_difference(7,9)

# Print the results 
print(""Sum:"", x)
print(""Difference:"", y)","# Function to calculate the sum and difference
def sum_difference(num1, num2):
    sum = num1 + num2
    difference = num1 - num2
    ___

# Calculating the sum and difference 
x,y = sum_difference(7,9)

# Print the results 
print(""Sum:"", x)
print(""Difference:"", y)"
Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other.,"""python"", ""java""","def is_substring(string1, string2):
    for i in range(len(string1)):
        for j in range(len(string2)):
            if string1[i] == string2[j]:
                return True
    return False

result = is_substring(""python"", ""java"")
print(result)",Control Structure,4310,"def is_substring(string1, string2):
    for i in range(len(string1)):
        for j in range(len(string2)):
            if string1[i] == string2[j]:
                return True
    return False

result = is_substring(""python"", ""java"")
print(result)","def is_substring(string1, string2):
    for i in range(len(string1)):
        for j in range(len(string2)):
            if string1[i] == string2[j]:
    ___
    ___

result = is_substring(""python"", ""java"")
print(result)"
Design a function in Python to test if the given number is a prime or not.,N = 13,"def is_prime(n):
 if n <= 1:
 return False

 for i in range(2, n):
 if n % i == 0:
 return False

 return True

is_prime(13) # True",Control Structure,4351,"def is_prime(n):
 if n <= 1:
 return False

 for i in range(2, n):
 if n % i == 0:
 return False

 return True

is_prime(13) # True","def is_prime(n):
 if n <= 1:
    ___

 for i in range(2, n):
 if n % i == 0:
    ___

    ___

is_prime(13) # True"
"Given two strings, write a Python program to check if one is an anagram of other.",listen and silent,"def isAnagram(str1, str2):
    str1_sorted = sorted(str1)
    str2_sorted = sorted(str2)
    # Compare sorted strings
    if str1_sorted == str2_sorted:
        return True
    else:
        return False

str1 = ""listen""
str2 = ""silent""

print(isAnagram(str1, str2))",Control Structure,4373,"def isAnagram(str1, str2):
    str1_sorted = sorted(str1)
    str2_sorted = sorted(str2)
    # Compare sorted strings
    if str1_sorted == str2_sorted:
        return True
    else:
        return False

str1 = ""listen""
str2 = ""silent""

print(isAnagram(str1, str2))","def isAnagram(str1, str2):
    str1_sorted = sorted(str1)
    str2_sorted = sorted(str2)
    # Compare sorted strings
    if str1_sorted == str2_sorted:
    ___
    ___
    ___

str1 = ""listen""
str2 = ""silent""

print(isAnagram(str1, str2))"
Edit the code to make it in a Python program to check if a number is divisible by 5 and 11.,"def isDivisible(num): 
    if num % 5 == 0: 
        print(""Number is divisible by 5"") 
    if num % 11 == 0:
        print(""Number is divisible by 11"")","def isDivisible(num): 
    if num % 5 == 0 and num % 11 == 0:
        print(""Number is divisible by 5 and 11"") 
    else:
        print(""Number is not divisible by 5 and 11"")",Control Structure,4395,"def isDivisible(num): 
    if num % 5 == 0 and num % 11 == 0:
        print(""Number is divisible by 5 and 11"") 
    else:
        print(""Number is not divisible by 5 and 11"")","def isDivisible(num): 
    if num % 5 == 0 and num % 11 == 0:
        print(""Number is divisible by 5 and 11"") 
    ___
        print(""Number is not divisible by 5 and 11"")"
Write a Python program to generate documentation in HTML format for a given Python solution.,"Solution:
def add_item(item_list, new_item):
 item_list.append(new_item)
 return","def generate_html_doc(solution):
 html = ""<html>\n<head>\n<title>Python Documentation</title>\n</head>\n<body>\n\n<h1>Solution</h1>\n\
<pre>\n""
 html += solution + ""\n</pre>\n\n</body>\n</html>""
 return html",Control Structure,4419,"def generate_html_doc(solution):
 html = ""<html>\n<head>\n<title>Python Documentation</title>\n</head>\n<body>\n\n<h1>Solution</h1>\n\
<pre>\n""
 html += solution + ""\n</pre>\n\n</body>\n</html>""
 return html","def generate_html_doc(solution):
 html = ""<html>\n<head>\n<title>Python Documentation</title>\n</head>\n<body>\n\n<h1>Solution</h1>\n\
<pre>\n""
 html += solution + ""\n</pre>\n\n</body>\n</html>""
    ___"
Create a Python program for finding all combinations of numbers that equal a given target number.,target = 10,"def find_combos(target):
 combos = []
 
 for i in range(int(target/2)+1):
 # increments of two to avoid duplicate results
 for j in range(i, int(target/2)+1, 2):
 if i+j == target:
 combos.append((i,j))
 
 return combos

combos = find_combos(10)
print(combos)",Control Structure,4435,"def find_combos(target):
 combos = []
 
 for i in range(int(target/2)+1):
 # increments of two to avoid duplicate results
 for j in range(i, int(target/2)+1, 2):
 if i+j == target:
 combos.append((i,j))
 
 return combos

combos = find_combos(10)
print(combos)","def find_combos(target):
 combos = []
 
 for i in range(int(target/2)+1):
 # increments of two to avoid duplicate results
 for j in range(i, int(target/2)+1, 2):
 if i+j == target:
 combos.append((i,j))
 
    ___

combos = find_combos(10)
print(combos)"
How would you design a Python program that checks if a number is divisible by three?,45,"def is_divisible(n):
    if n % 3 == 0:
        return True
    else:
        return False

num = 45
check_divisible = is_divisible(num)

if check_divisible:
    print(""Number is divisible by three."")
else:
    print(""Number is not divisible by three."")",Control Structure,4482,"def is_divisible(n):
    if n % 3 == 0:
        return True
    else:
        return False

num = 45
check_divisible = is_divisible(num)

if check_divisible:
    print(""Number is divisible by three."")
else:
    print(""Number is not divisible by three."")","def is_divisible(n):
    if n % 3 == 0:
    ___
    ___
    ___

num = 45
check_divisible = is_divisible(num)

if check_divisible:
    print(""Number is divisible by three."")
    ___
    print(""Number is not divisible by three."")"
Optimize a Python function for computing Fibonacci numbers.,"def fib(n):
    if n == 0 or n == 1:
        return n
    else:
        return fib(n-1) + fib(n-2)","def fibonacci(n): 
    if n <= 1: 
        return n 
    else:
        fibonacci_num=[0,1] #creating a fibonacci list
        i=2
        while i<=n:
            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])
            i+=1
        return fibonacci_num[n]",Control Structure,4522,"def fibonacci(n): 
    if n <= 1: 
        return n 
    else:
        fibonacci_num=[0,1] #creating a fibonacci list
        i=2
        while i<=n:
            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])
            i+=1
        return fibonacci_num[n]","def fibonacci(n): 
    if n <= 1: 
    ___
    ___
        fibonacci_num=[0,1] #creating a fibonacci list
        i=2
        while i<=n:
            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])
            i+=1
    ___"
Develop a python program for the following task,Write a function to calculate the sum of the first n natural numbers.,"def sum_n(n):
    result = (n * (n+1)) / 2
    return result

n = 10

sum = sum_n(n)
print(sum)",Control Structure,4547,"def sum_n(n):
    result = (n * (n+1)) / 2
    return result

n = 10

sum = sum_n(n)
print(sum)","def sum_n(n):
    result = (n * (n+1)) / 2
    ___

n = 10

sum = sum_n(n)
print(sum)"
Write an algorithm for linear search in Python.,"List: [1, 3, 8, 10, 15, 20, 25]
Number to search: 15","def linear_search(list, n):
  i = 0
  while i < len(list):
    if list[i] == n:
      return i
    i = i+1
  return -1

list = [1, 3, 8, 10, 15, 20, 25]
n = 15
index = linear_search(list, n)
print(""Number found at index:"", index)",Control Structure,4565,"def linear_search(list, n):
  i = 0
  while i < len(list):
    if list[i] == n:
      return i
    i = i+1
  return -1

list = [1, 3, 8, 10, 15, 20, 25]
n = 15
index = linear_search(list, n)
print(""Number found at index:"", index)","def linear_search(list, n):
  i = 0
  while i < len(list):
    if list[i] == n:
    ___
    i = i+1
    ___

list = [1, 3, 8, 10, 15, 20, 25]
n = 15
index = linear_search(list, n)
print(""Number found at index:"", index)"
Create a script in Python that automatically generates an emial address for a given name.,Name: John Doe,"import random

def generate_email(name):
 name_words = name.split()
 first_name = name_words[0]
 last_name = name_words[1]
 random_numbers = str(random.randint(1,99))
 
 email = first_name + last_name + random_numbers + ""@example.com""
 return email
 
 print(generate_email(""John Doe""))",Control Structure,4574,"import random

def generate_email(name):
 name_words = name.split()
 first_name = name_words[0]
 last_name = name_words[1]
 random_numbers = str(random.randint(1,99))
 
 email = first_name + last_name + random_numbers + ""@example.com""
 return email
 
 print(generate_email(""John Doe""))","import random

def generate_email(name):
 name_words = name.split()
 first_name = name_words[0]
 last_name = name_words[1]
 random_numbers = str(random.randint(1,99))
 
 email = first_name + last_name + random_numbers + ""@example.com""
    ___
 
 print(generate_email(""John Doe""))"
Design a logic in Python to check if two numbers are divisible by each other.,"15, 30","def isDivisible(a, b):
    return a % b == 0",Control Structure,4648,"def isDivisible(a, b):
    return a % b == 0","def isDivisible(a, b):
    ___"
Write a Python program to generate recurrence equation for a given sequence and initial condition.,"[2, 4, 6, 8], 2","def generate_recurrence(sequence, initial_condition): 
 if len(sequence) <= 1: 
 return initial_condition 
 
 a_i = sequence[-1] 
 a_i_1 = sequence[-2] 
 recurrence = a_i + initial_condition - a_i_1 
 return recurrence

result = generate_recurrence([2, 4, 6, 8], 2)
print(result)",Control Structure,4655,"def generate_recurrence(sequence, initial_condition): 
 if len(sequence) <= 1: 
 return initial_condition 
 
 a_i = sequence[-1] 
 a_i_1 = sequence[-2] 
 recurrence = a_i + initial_condition - a_i_1 
 return recurrence

result = generate_recurrence([2, 4, 6, 8], 2)
print(result)","def generate_recurrence(sequence, initial_condition): 
 if len(sequence) <= 1: 
    ___
 
 a_i = sequence[-1] 
 a_i_1 = sequence[-2] 
 recurrence = a_i + initial_condition - a_i_1 
    ___

result = generate_recurrence([2, 4, 6, 8], 2)
print(result)"
Write a code in Python to evaluate the expression 3x + 5 for any given x,x = 7,"def expression(x):
    return 3 * x + 5

print(expression(7))",Control Structure,4671,"def expression(x):
    return 3 * x + 5

print(expression(7))","def expression(x):
    ___

print(expression(7))"
Create a Python program to check if a number is an Armstrong number.,number = 153,"def isArmstrong(number): 
	
	num = number 
	length = len(str(number)) 
	sum_of_the_power_of_digits = 0 

	while num > 0:
		rem = num % 10 
		sum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)
		num //= 10
		
	if (sum_of_the_power_of_digits == number) : 
		return True 
	else : 
		return False",Control Structure,4698,"def isArmstrong(number): 
	
	num = number 
	length = len(str(number)) 
	sum_of_the_power_of_digits = 0 

	while num > 0:
		rem = num % 10 
		sum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)
		num //= 10
		
	if (sum_of_the_power_of_digits == number) : 
		return True 
	else : 
		return False","def isArmstrong(number): 
	
	num = number 
	length = len(str(number)) 
	sum_of_the_power_of_digits = 0 

	while num > 0:
		rem = num % 10 
		sum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)
		num //= 10
		
	if (sum_of_the_power_of_digits == number) : 
    ___
    ___
    ___"
Design an algorithm in Python to check if an integer is even or odd.,n = 5,"def check_number(n):
    if n%2==0:
        return ""Even""
    else:
        return ""Odd""

check_number(5) 
# Output: Odd",Control Structure,4752,"def check_number(n):
    if n%2==0:
        return ""Even""
    else:
        return ""Odd""

check_number(5) 
# Output: Odd","def check_number(n):
    if n%2==0:
    ___
    ___
    ___

check_number(5) 
# Output: Odd"
Create an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.,Year: 2018,"import datetime

def day_of_week(year): 
 date = datetime.datetime(year, 1, 1)
 return date.strftime(""%A"")

print(day_of_week(2018)) # Output: Monday",Control Structure,4756,"import datetime

def day_of_week(year): 
 date = datetime.datetime(year, 1, 1)
 return date.strftime(""%A"")

print(day_of_week(2018)) # Output: Monday","import datetime

def day_of_week(year): 
 date = datetime.datetime(year, 1, 1)
    ___

print(day_of_week(2018)) # Output: Monday"
Generate a python code for an algorithmic solution for the following problem:,"Given a list A and a number X, determine whether or not there exist two elements in A whose sum is exactly X.","def is_sum_possible(A, X): 
    n = len(A) 
    # create an empty hash set
    s = set() 
  
    for i in range(n): 
        temp = X - A[i]  
        if temp >= 0 and temp in s: 
            return True 
        s.add(A[i])  
  
    return False",Control Structure,4848,"def is_sum_possible(A, X): 
    n = len(A) 
    # create an empty hash set
    s = set() 
  
    for i in range(n): 
        temp = X - A[i]  
        if temp >= 0 and temp in s: 
            return True 
        s.add(A[i])  
  
    return False","def is_sum_possible(A, X): 
    n = len(A) 
    # create an empty hash set
    s = set() 
  
    for i in range(n): 
        temp = X - A[i]  
        if temp >= 0 and temp in s: 
    ___
        s.add(A[i])  
  
    ___"
Build a Python generator that yields the next power of 2 for a given number.,4,"def nextPowerOf2Generator(n): 
    power = 1
    while True: 
        pow_val = power * 2
        yield pow_val 
        power = pow_val 
  
n = 4

for i in nextPowerOf2Generator(n):
    if i > n:
        print(i)
        break",Control Structure,4902,"def nextPowerOf2Generator(n): 
    power = 1
    while True: 
        pow_val = power * 2
        yield pow_val 
        power = pow_val 
  
n = 4

for i in nextPowerOf2Generator(n):
    if i > n:
        print(i)
        break","def nextPowerOf2Generator(n): 
    power = 1
    while True: 
        pow_val = power * 2
        yield pow_val 
        power = pow_val 
  
n = 4

for i in nextPowerOf2Generator(n):
    if i > n:
        print(i)
    ___"
Generate a Python program that takes an input of a number and checks if it is prime.,7,"def is_prime(num):
    if num == 2:
        return True
    elif num < 2 or not all(num % i for i in range(2, num)):
        return False
    return True

num = 7
result = is_prime(num)
print(result)",Control Structure,4916,"def is_prime(num):
    if num == 2:
        return True
    elif num < 2 or not all(num % i for i in range(2, num)):
        return False
    return True

num = 7
result = is_prime(num)
print(result)","def is_prime(num):
    if num == 2:
    ___
    elif num < 2 or not all(num % i for i in range(2, num)):
    ___
    ___

num = 7
result = is_prime(num)
print(result)"
Suggest an implementation for the following class declaration in Python.,class Profile:,"class Profile:
    def __init__(self, first_name, last_name, occupation):
        self.first_name = first_name 
        self.last_name = last_name 
        self.occupation = occupation 
        
    def full_name(self): 
        return self.first_name + "" "" + self.last_name",Control Structure,4999,"class Profile:
    def __init__(self, first_name, last_name, occupation):
        self.first_name = first_name 
        self.last_name = last_name 
        self.occupation = occupation 
        
    def full_name(self): 
        return self.first_name + "" "" + self.last_name","class Profile:
    def __init__(self, first_name, last_name, occupation):
        self.first_name = first_name 
        self.last_name = last_name 
        self.occupation = occupation 
        
    def full_name(self): 
    ___"
Create a web application in Python that displays a directory structure tree for a given path.,/home/myUser/myFolder,"import os

def make_tree(path): 
 files = os.listdir(path) 
 for f in files: 
     full_path = os.path.join(path, f) 
     if os.path.isdir(full_path): 
         print(f) 
         make_tree(full_path) 
     else: 
         print("" -"" + f) 
  
path = '/home/myUser/myFolder' 
make_tree(path)",Control Structure,5047,"import os

def make_tree(path): 
 files = os.listdir(path) 
 for f in files: 
     full_path = os.path.join(path, f) 
     if os.path.isdir(full_path): 
         print(f) 
         make_tree(full_path) 
     else: 
         print("" -"" + f) 
  
path = '/home/myUser/myFolder' 
make_tree(path)","import os

def make_tree(path): 
 files = os.listdir(path) 
 for f in files: 
     full_path = os.path.join(path, f) 
     if os.path.isdir(full_path): 
         print(f) 
         make_tree(full_path) 
    ___
         print("" -"" + f) 
  
path = '/home/myUser/myFolder' 
make_tree(path)"
Write a Python code to determine if the user has enough money in the account for a given transaction.,"balance = 200
amount = 50","def enough_balance(balance, amount):
    if amount > balance:
        return False
    return True

if __name__ == '__main__':
    print(enough_balance(balance, amount))",Control Structure,5070,"def enough_balance(balance, amount):
    if amount > balance:
        return False
    return True

if __name__ == '__main__':
    print(enough_balance(balance, amount))","def enough_balance(balance, amount):
    if amount > balance:
    ___
    ___

if __name__ == '__main__':
    print(enough_balance(balance, amount))"
"Use the inputs provided, write Python code to check if two integers are equal.","First Integer: 10
Second Integer: 10","if int(10) == int(10):
    print(""The two integers are equal"")
else:
    print(""The two integers are not equal"")",Control Structure,5097,"if int(10) == int(10):
    print(""The two integers are equal"")
else:
    print(""The two integers are not equal"")","if int(10) == int(10):
    print(""The two integers are equal"")
    ___
    print(""The two integers are not equal"")"
Generate a Python program that can verify if a given sentence is correct or misspelled.,"The sentence: ""This is my new computer""","import re

def spell_check(sentence):
  words = re.findall(r'\w+', sentence)
  for word in words:
    if not word.lower() in dict:
        return False
  return True

sentence = ""This is my new computer""
result = spell_check(sentence)
if result:
    print('Correct spelling')
else:
    print('Incorrect spelling')",Control Structure,5106,"import re

def spell_check(sentence):
  words = re.findall(r'\w+', sentence)
  for word in words:
    if not word.lower() in dict:
        return False
  return True

sentence = ""This is my new computer""
result = spell_check(sentence)
if result:
    print('Correct spelling')
else:
    print('Incorrect spelling')","import re

def spell_check(sentence):
  words = re.findall(r'\w+', sentence)
  for word in words:
    if not word.lower() in dict:
    ___
    ___

sentence = ""This is my new computer""
result = spell_check(sentence)
if result:
    print('Correct spelling')
    ___
    print('Incorrect spelling')"
Generate a Python program which takes two strings as input and returns true if they are anagrams of each other.,"""listen"", ""silent""","def is_anagram(a, b):
  return sorted(a) == sorted(b)

result = is_anagram(""listen"", ""silent"")
print(result)",Control Structure,5201,"def is_anagram(a, b):
  return sorted(a) == sorted(b)

result = is_anagram(""listen"", ""silent"")
print(result)","def is_anagram(a, b):
    ___

result = is_anagram(""listen"", ""silent"")
print(result)"
Write a Python code snippet for comparing two strings regardless of their case. You should use regular expressions.,"String 1: ""Hello""
String 2: ""heLLo""","import re

string1 = ""Hello""
string2 = ""heLLo""

if re.search(string1.lower(), string2.lower()):
 print(""Strings are equal regardless of case."")",Control Structure,5222,"import re

string1 = ""Hello""
string2 = ""heLLo""

if re.search(string1.lower(), string2.lower()):
 print(""Strings are equal regardless of case."")","import re

string1 = ""Hello""
string2 = ""heLLo""

if re.search(string1.lower(), string2.lower()):
    ___"
Code an algorithm in Python to check if two given sets are equal.,"A = {1, 2, 3, 4, 5}
B = {4, 1, 2, 3, 5}","def is_equal(A, B):
    if len(A) != len(B):
        return False
    for el in A:
        if el not in B:
            return False
    return True",Control Structure,5229,"def is_equal(A, B):
    if len(A) != len(B):
        return False
    for el in A:
        if el not in B:
            return False
    return True","def is_equal(A, B):
    if len(A) != len(B):
    ___
    for el in A:
        if el not in B:
    ___
    ___"
"Given two strings s and t, create a new Python function to check if s is an anagram of t.","s = ""anagram""
t = ""nagaram""","def is_anagram(s, t):
 s_list = list(s)
 t_list = list(t)
 s_list.sort()
 t_list.sort()
 if s_list == t_list:
 return True
 else:
 return False",Control Structure,5231,"def is_anagram(s, t):
 s_list = list(s)
 t_list = list(t)
 s_list.sort()
 t_list.sort()
 if s_list == t_list:
 return True
 else:
 return False","def is_anagram(s, t):
 s_list = list(s)
 t_list = list(t)
 s_list.sort()
 t_list.sort()
 if s_list == t_list:
    ___
    ___
    ___"
Write a Python program to check if a number is prime by eliminating the multiples of all numbers from 2 to the square root of the number.,n = 99,"import math

def is_prime(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return False
    return True

print(is_prime(n))",Control Structure,5384,"import math

def is_prime(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return False
    return True

print(is_prime(n))","import math

def is_prime(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
    ___
    ___

print(is_prime(n))"
Modify the following code in Python to check if a number is prime or not.,"def checkPrime(n):
    for i in range(2,n):
        if n%i==0:
            return False
    return True","def checkPrime(n):
    if n <= 1:
        return False

    for i in range(2,n):
        if n % i == 0:
            return False
    
    return True",Control Structure,5403,"def checkPrime(n):
    if n <= 1:
        return False

    for i in range(2,n):
        if n % i == 0:
            return False
    
    return True","def checkPrime(n):
    if n <= 1:
    ___

    for i in range(2,n):
        if n % i == 0:
    ___
    
    ___"
Program a Python class for handling employee data.,class Employee:,"class Employee:
    def __init__(self, name, age, salary, company):
        self.name = name
        self.age = age
        self.salary = salary
        self.company = company
    def get_details(self):
        return ""{}, {}, {}, {}"".format(self.name, self.age, self.salary, self.company)",Control Structure,5404,"class Employee:
    def __init__(self, name, age, salary, company):
        self.name = name
        self.age = age
        self.salary = salary
        self.company = company
    def get_details(self):
        return ""{}, {}, {}, {}"".format(self.name, self.age, self.salary, self.company)","class Employee:
    def __init__(self, name, age, salary, company):
        self.name = name
        self.age = age
        self.salary = salary
        self.company = company
    def get_details(self):
    ___"
Suggest a completion for the following python code to merge two given dictionaries into one.,"def merge_dict(dict1, dict2):","def merge_dict(dict1, dict2):
 result = dict1.copy()
 result.update(dict2)
 return result",Control Structure,5480,"def merge_dict(dict1, dict2):
 result = dict1.copy()
 result.update(dict2)
 return result","def merge_dict(dict1, dict2):
 result = dict1.copy()
 result.update(dict2)
    ___"
Write a function in Python that takes two strings as input and return true if one is a rotation of the other.,"""listen"",""enlist""","def is_rotation(s1, s2):
  # edge case check
  if len(s1) != len(s2):
    return False

  # concatenate s2 to itself
  concat_s2 = s2 + s2

  #search s1 in concat_s2
  return s1 in concat_s2",Control Structure,5512,"def is_rotation(s1, s2):
  # edge case check
  if len(s1) != len(s2):
    return False

  # concatenate s2 to itself
  concat_s2 = s2 + s2

  #search s1 in concat_s2
  return s1 in concat_s2","def is_rotation(s1, s2):
    ___
  if len(s1) != len(s2):
    ___

  # concatenate s2 to itself
  concat_s2 = s2 + s2

  #search s1 in concat_s2
    ___"
Create a Python function for computing the Factorial of a number.,6,"def factorial(n):
   if n == 0:
      return 1
   else:
      return n * factorial(n-1)

print(factorial(6))",Control Structure,5520,"def factorial(n):
   if n == 0:
      return 1
   else:
      return n * factorial(n-1)

print(factorial(6))","def factorial(n):
   if n == 0:
    ___
    ___
    ___

print(factorial(6))"
Create a Python function that uses a given dictionary to calculate the sum of all the values for each key.,"{'a': 4, 'b': 2, 'c': 1}","def sum_dict_values(dict):
  result = 0
  for key in dict:
    result += dict[key]

  return result

dict = {'a': 4, 'b': 2, 'c': 1}
sum = sum_dict_values(dict)
print(sum) # 7",Control Structure,5551,"def sum_dict_values(dict):
  result = 0
  for key in dict:
    result += dict[key]

  return result

dict = {'a': 4, 'b': 2, 'c': 1}
sum = sum_dict_values(dict)
print(sum) # 7","def sum_dict_values(dict):
  result = 0
  for key in dict:
    result += dict[key]

    ___

dict = {'a': 4, 'b': 2, 'c': 1}
sum = sum_dict_values(dict)
print(sum) # 7"
Design an algorithm to check if a number is a perfect square in Python.,25,"import math 
  
def isPerfectSquare(n): 
    # Find floating point value of 
    # square root of x. 
    sqr = math.sqrt(n) 
   
    # If square root is an integer 
    return (sqr - math.floor(sqr) == 0) 
  
# Driver program 
x = 25
if(isPerfectSquare(x)): 
    print(x, ""is a perfect square"") 
else: 
    print(x, ""is not a perfect square"")",Control Structure,5553,"import math 
  
def isPerfectSquare(n): 
    # Find floating point value of 
    # square root of x. 
    sqr = math.sqrt(n) 
   
    # If square root is an integer 
    return (sqr - math.floor(sqr) == 0) 
  
# Driver program 
x = 25
if(isPerfectSquare(x)): 
    print(x, ""is a perfect square"") 
else: 
    print(x, ""is not a perfect square"")","import math 
  
def isPerfectSquare(n): 
    # Find floating point value of 
    # square root of x. 
    sqr = math.sqrt(n) 
   
    # If square root is an integer 
    ___
  
# Driver program 
x = 25
if(isPerfectSquare(x)): 
    print(x, ""is a perfect square"") 
    ___
    print(x, ""is not a perfect square"")"
You need to write a program in Python that checks if a given number is a perfect square or not.,36,"def isPerfectSquare(n):
    root =  n ** 0.5
    return root == int(root)

result = isPerfectSquare(36)
print(result)",Control Structure,5565,"def isPerfectSquare(n):
    root =  n ** 0.5
    return root == int(root)

result = isPerfectSquare(36)
print(result)","def isPerfectSquare(n):
    root =  n ** 0.5
    ___

result = isPerfectSquare(36)
print(result)"
Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word.,This is an example text.,"def parse_text(text, word):
  word_count = 0
  words = text.split()
  for w in words:
    if w == word:
      word_count += 1
  return word_count
  
text = 'This is an example text.'
word = 'example'
word_count = parse_text(text, word)
print('The word ""{}"" appears {} times in the text.'.format(word, word_count))",Control Structure,5620,"def parse_text(text, word):
  word_count = 0
  words = text.split()
  for w in words:
    if w == word:
      word_count += 1
  return word_count
  
text = 'This is an example text.'
word = 'example'
word_count = parse_text(text, word)
print('The word ""{}"" appears {} times in the text.'.format(word, word_count))","def parse_text(text, word):
  word_count = 0
  words = text.split()
  for w in words:
    if w == word:
      word_count += 1
    ___
  
text = 'This is an example text.'
word = 'example'
word_count = parse_text(text, word)
print('The word ""{}"" appears {} times in the text.'.format(word, word_count))"
Generate a linear regression program for Python,This program should return the coefficient of determination (R2) of a linear regression model.,"import numpy as np

def calculateR2(x, y):
    # Calculate the mean of x and y vectors
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    # Calculate the sums
    SS_tot = np.sum((y - y_mean)**2)
    SS_res = np.sum((y - x)**2)
    
    # Calculate R2
    r2 = 1 - (SS_res / SS_tot)
    
    return r2",Control Structure,5629,"import numpy as np

def calculateR2(x, y):
    # Calculate the mean of x and y vectors
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    # Calculate the sums
    SS_tot = np.sum((y - y_mean)**2)
    SS_res = np.sum((y - x)**2)
    
    # Calculate R2
    r2 = 1 - (SS_res / SS_tot)
    
    return r2","import numpy as np

def calculateR2(x, y):
    # Calculate the mean of x and y vectors
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    # Calculate the sums
    SS_tot = np.sum((y - y_mean)**2)
    SS_res = np.sum((y - x)**2)
    
    # Calculate R2
    r2 = 1 - (SS_res / SS_tot)
    
    ___"
Write a Python program to predict the class label for a given data sample.,"X = [[2.2, 3.5], [2.7, 3.2]]
y = [1, 0]","from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
    pred = model.predict([X])
    return pred",Control Structure,5663,"from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
    pred = model.predict([X])
    return pred","from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
    pred = model.predict([X])
    ___"
Create a python function for calculating the total cost of an item after tax and discounts are applied.,"Price: 150
Discount: 20
Tax Rate: 0.1","def calculate_cost(price, discount, tax_rate):
    discount_amount = price * (discount / 100.0)
    total = price - discount_amount
    tax = total * (tax_rate / 100.0)
    final_cost = total + tax
    return final_cost

price = 150
discount = 20
tax_rate = 0.1
final_cost = calculate_cost(price, discount, tax_rate)
print(final_cost)",Control Structure,5719,"def calculate_cost(price, discount, tax_rate):
    discount_amount = price * (discount / 100.0)
    total = price - discount_amount
    tax = total * (tax_rate / 100.0)
    final_cost = total + tax
    return final_cost

price = 150
discount = 20
tax_rate = 0.1
final_cost = calculate_cost(price, discount, tax_rate)
print(final_cost)","def calculate_cost(price, discount, tax_rate):
    discount_amount = price * (discount / 100.0)
    total = price - discount_amount
    tax = total * (tax_rate / 100.0)
    final_cost = total + tax
    ___

price = 150
discount = 20
tax_rate = 0.1
final_cost = calculate_cost(price, discount, tax_rate)
print(final_cost)"
Implement a solutions for the Tower of Hanoi problem using Python.,int n = 4,"def hanoi(n, source, aux, dest):
 if n == 1:
  print('Move disk 1 from {0} to {1}'.format(source, dest))
 else:
  hanoi(n-1, source, dest, aux)
  print('Move disk {0} from {1} to {2}'.format(n, source, dest))
  hanoi(n-1, aux, source, dest)

# Driver program
n = 4
hanoi(n, 'a', 'b', 'c')",Control Structure,5742,"def hanoi(n, source, aux, dest):
 if n == 1:
  print('Move disk 1 from {0} to {1}'.format(source, dest))
 else:
  hanoi(n-1, source, dest, aux)
  print('Move disk {0} from {1} to {2}'.format(n, source, dest))
  hanoi(n-1, aux, source, dest)

# Driver program
n = 4
hanoi(n, 'a', 'b', 'c')","def hanoi(n, source, aux, dest):
 if n == 1:
  print('Move disk 1 from {0} to {1}'.format(source, dest))
    ___
  hanoi(n-1, source, dest, aux)
  print('Move disk {0} from {1} to {2}'.format(n, source, dest))
  hanoi(n-1, aux, source, dest)

# Driver program
n = 4
hanoi(n, 'a', 'b', 'c')"
Write a Python program to test if the inputs are equal and return a boolean value.,"28, 48","def equals(a, b):
    return a == b

equal = equals(28, 48)
print(equal)",Control Structure,5756,"def equals(a, b):
    return a == b

equal = equals(28, 48)
print(equal)","def equals(a, b):
    ___

equal = equals(28, 48)
print(equal)"
Convert the following pseudocode into Python code to check if a number is even or odd:,if num MOD 2 == 0,"def is_even(num):
 return num % 2 == 0",Control Structure,5774,"def is_even(num):
 return num % 2 == 0","def is_even(num):
    ___"
Generate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.,Hello,"user_input = input(""User: "")

if user_input == ""Hello"":
 print(""Chatbot: Hi there!"")
else:
 print(""Chatbot: I'm not sure what you mean, please try again."")",Control Structure,5781,"user_input = input(""User: "")

if user_input == ""Hello"":
 print(""Chatbot: Hi there!"")
else:
 print(""Chatbot: I'm not sure what you mean, please try again."")","user_input = input(""User: "")

if user_input == ""Hello"":
 print(""Chatbot: Hi there!"")
    ___
 print(""Chatbot: I'm not sure what you mean, please try again."")"
You need to optimize a given Python code for improving speed.,"def find_corresponding_nums(nums1, nums2):
  result = []
  for num1 in nums1:
    for num2 in nums2:
      if num1 == num2:
        result.append(num1)
  return result","def find_corresponding_nums(nums1, nums2):
    result = []
    seen = set(nums2) 
    for num1 in nums1:
        if num1 in seen:
            result.append(num1)
    return result",Control Structure,5796,"def find_corresponding_nums(nums1, nums2):
    result = []
    seen = set(nums2) 
    for num1 in nums1:
        if num1 in seen:
            result.append(num1)
    return result","def find_corresponding_nums(nums1, nums2):
    result = []
    seen = set(nums2) 
    for num1 in nums1:
        if num1 in seen:
            result.append(num1)
    ___"
"Analyse the given Python code and identify the errors, if any.","def set_variable(name, value):
    variable = name
    variable_value = value
    return variable_name","Error 1: The function definition is missing the closing parenthesis.
Error 2: The variable ""variable_name"" is not defined.
Error 3: The function does not return the value of ""variable"".",Control Structure,5797,"Error 1: The function definition is missing the closing parenthesis.
Error 2: The variable ""variable_name"" is not defined.
Error 3: The function does not return the value of ""variable"".","Error 1: The function definition is missing the closing parenthesis.
Error 2: The variable ""variable_name"" is not defined.
    ___"
Write a Python program to optimize the given code for speed and reduce memory usage.,"def func(a):
    result = []
    for x in range(len(a)):
        result.append(a[x] + 5)
    return result","def func(a):
    result = [x + 5 for x in a]
    return result",Control Structure,5828,"def func(a):
    result = [x + 5 for x in a]
    return result","def func(a):
    result = [x + 5 for x in a]
    ___"
Generate a function in Python that displays the Fibonacci sequence for a given value.,n = 10,"def fibonacci(n):
 a, b = 0, 1
 result = []
 
 while a < n:
 result.append(a)
 a, b = b, a + b

 return result

print(fibonacci(n))",Control Structure,5941,"def fibonacci(n):
 a, b = 0, 1
 result = []
 
 while a < n:
 result.append(a)
 a, b = b, a + b

 return result

print(fibonacci(n))","def fibonacci(n):
 a, b = 0, 1
 result = []
 
 while a < n:
 result.append(a)
 a, b = b, a + b

    ___

print(fibonacci(n))"
Write a function in Python that takes in two strings and returns true if both strings have the same letter counts.,"'abc', 'cba'","def isPermutation(s1, s2):
 s1_dict = {}
 s2_dict = {}
 for c in s1:
  if c in s1_dict:
   s1_dict[c] += 1
  else:
   s1_dict[c] = 1
 for c in s2:
  if c in s2_dict:
   s2_dict[c] += 1
  else:
   s2_dict[c] = 1
 
 return s1_dict == s2_dict",Control Structure,5999,"def isPermutation(s1, s2):
 s1_dict = {}
 s2_dict = {}
 for c in s1:
  if c in s1_dict:
   s1_dict[c] += 1
  else:
   s1_dict[c] = 1
 for c in s2:
  if c in s2_dict:
   s2_dict[c] += 1
  else:
   s2_dict[c] = 1
 
 return s1_dict == s2_dict","def isPermutation(s1, s2):
 s1_dict = {}
 s2_dict = {}
 for c in s1:
  if c in s1_dict:
   s1_dict[c] += 1
    ___
   s1_dict[c] = 1
 for c in s2:
  if c in s2_dict:
   s2_dict[c] += 1
    ___
   s2_dict[c] = 1
 
    ___"
Create a Python script to check if a given word or phrase is a palindrome.,madam,"def is_palindrome(word):
    word_list = list(word)
    if word_list == word_list[::-1]:
        return True
    else:
        return False

result = is_palindrome('madam')
print(result)",Control Structure,6002,"def is_palindrome(word):
    word_list = list(word)
    if word_list == word_list[::-1]:
        return True
    else:
        return False

result = is_palindrome('madam')
print(result)","def is_palindrome(word):
    word_list = list(word)
    if word_list == word_list[::-1]:
    ___
    ___
    ___

result = is_palindrome('madam')
print(result)"
Suggest a completion for the following python funtion which calculates the sum of two numbers.,"def sum_of_nums(num1, num2):","def sum_of_nums(num1, num2):
    return num1 + num2

example_sum = sum_of_nums(2, 3)
print(""Sum of two numbers is:"", example_sum)",Control Structure,6004,"def sum_of_nums(num1, num2):
    return num1 + num2

example_sum = sum_of_nums(2, 3)
print(""Sum of two numbers is:"", example_sum)","def sum_of_nums(num1, num2):
    ___

example_sum = sum_of_nums(2, 3)
print(""Sum of two numbers is:"", example_sum)"
Implement an algorithm in Python to check for palindromes.,noon,"def isPalindrome(text):
    n = len(text)
    for i in range(n // 2):
        if text[i] != text[n - i - 1]:
            return False
    return True

print(isPalindrome('noon'))",Control Structure,6032,"def isPalindrome(text):
    n = len(text)
    for i in range(n // 2):
        if text[i] != text[n - i - 1]:
            return False
    return True

print(isPalindrome('noon'))","def isPalindrome(text):
    n = len(text)
    for i in range(n // 2):
        if text[i] != text[n - i - 1]:
    ___
    ___

print(isPalindrome('noon'))"
Optimize a given code in Python for higher efficiency.,"def power(base, exponent):
    answer = 1
    for _ in range(exponent):
        answer *= base
    return answer","def power(base, exponent):
    answer = 1
    while exponent > 0:
        if exponent & 1:
            answer *= base
        base *= base
        exponent >>= 1
    return answer",Control Structure,6037,"def power(base, exponent):
    answer = 1
    while exponent > 0:
        if exponent & 1:
            answer *= base
        base *= base
        exponent >>= 1
    return answer","def power(base, exponent):
    answer = 1
    while exponent > 0:
        if exponent & 1:
            answer *= base
        base *= base
        exponent >>= 1
    ___"
Develop an algorithm in Python for generating the nth Fibonacci number.,N: 5,"def fibonacci(n):
 # base case
 if n == 1:
  return 0
 elif n == 2:
  return 1
 # recursive case
 else:
  return fibonacci(n-1) + fibonacci(n-2)

# testing
print(fibonacci(5)) # Output: 3",Control Structure,6049,"def fibonacci(n):
 # base case
 if n == 1:
  return 0
 elif n == 2:
  return 1
 # recursive case
 else:
  return fibonacci(n-1) + fibonacci(n-2)

# testing
print(fibonacci(5)) # Output: 3","def fibonacci(n):
    ___
 if n == 1:
    ___
 elif n == 2:
    ___
    ___
    ___
    ___

# testing
print(fibonacci(5)) # Output: 3"
Optimize the following Python code for calculating the Fibonacci numbers up to n.,"def fibonacci(n):
 if n <= 1:
 return n
 return fibonacci(n-1) + fibonacci(n-2)","def fibonacci(n):
 # Initialize a memoization dictionary
 memo = {
 0: 0,
 1: 1
 }
 
 # If n is in the memoization dictionary, return the value
 if n in memo:
 return memo[n]
 
 # Calculate the Fibonacci number
 if n > 1:
 memo[n] = fibonacci(n-1) + fibonacci(n-2)
 
 return memo[n]

print(fibonacci(10))",Control Structure,6054,"def fibonacci(n):
 # Initialize a memoization dictionary
 memo = {
 0: 0,
 1: 1
 }
 
 # If n is in the memoization dictionary, return the value
 if n in memo:
 return memo[n]
 
 # Calculate the Fibonacci number
 if n > 1:
 memo[n] = fibonacci(n-1) + fibonacci(n-2)
 
 return memo[n]

print(fibonacci(10))","def fibonacci(n):
 # Initialize a memoization dictionary
 memo = {
 0: 0,
 1: 1
 }
 
    ___
 if n in memo:
    ___
 
 # Calculate the Fibonacci number
 if n > 1:
 memo[n] = fibonacci(n-1) + fibonacci(n-2)
 
    ___

print(fibonacci(10))"
A number is said to be abundant if its proper divisors sum to more than the number itself. Create a python program to identify if a given number is abundant or not.,21,"def is_abundant(num):
    divisor_sum = 0
    for i in range(1, int(num/2)+1):
        if num % i == 0:
            divisor_sum += i

    return divisor_sum > num

num = 21

if is_abundant(num):
    print(f""{num} is abundant"")
else:
    print(f""{num} is not abundant"")",Control Structure,6058,"def is_abundant(num):
    divisor_sum = 0
    for i in range(1, int(num/2)+1):
        if num % i == 0:
            divisor_sum += i

    return divisor_sum > num

num = 21

if is_abundant(num):
    print(f""{num} is abundant"")
else:
    print(f""{num} is not abundant"")","def is_abundant(num):
    divisor_sum = 0
    for i in range(1, int(num/2)+1):
        if num % i == 0:
            divisor_sum += i

    ___

num = 21

if is_abundant(num):
    print(f""{num} is abundant"")
    ___
    print(f""{num} is not abundant"")"
Create a python program for checking whether a number is a palindrome or not.,12321,"def is_palindrome(num):
  rev = 0
  tmp = num
  
  while tmp > 0:
    rev = rev * 10
    rev = rev + (tmp % 10)
    tmp = tmp // 10

  return num == rev
  
num = 12321
if (is_palindrome(num)):
  print(""Number is a palindrome"")
else:
  print(""Number is not a palindrome"")",Control Structure,6086,"def is_palindrome(num):
  rev = 0
  tmp = num
  
  while tmp > 0:
    rev = rev * 10
    rev = rev + (tmp % 10)
    tmp = tmp // 10

  return num == rev
  
num = 12321
if (is_palindrome(num)):
  print(""Number is a palindrome"")
else:
  print(""Number is not a palindrome"")","def is_palindrome(num):
  rev = 0
  tmp = num
  
  while tmp > 0:
    rev = rev * 10
    rev = rev + (tmp % 10)
    tmp = tmp // 10

    ___
  
num = 12321
if (is_palindrome(num)):
  print(""Number is a palindrome"")
    ___
  print(""Number is not a palindrome"")"
Optimize the Python code snippet (below) for performance efficiency.,"def process_data(data):
    processed_data = []
    for item in data:
        if item % 10 == 0:
            processed_data.append(item)
    return processed_data","def process_data(data):
    processed_data = []
    for item in data:
        if (item % 10) == 0:
            processed_data.append(item)
    return processed_data

def process_data_fast(data):
    return [item for item in data if item % 10 == 0]",Control Structure,6105,"def process_data(data):
    processed_data = []
    for item in data:
        if (item % 10) == 0:
            processed_data.append(item)
    return processed_data

def process_data_fast(data):
    return [item for item in data if item % 10 == 0]","def process_data(data):
    processed_data = []
    for item in data:
        if (item % 10) == 0:
            processed_data.append(item)
    ___

def process_data_fast(data):
    ___"
Create a python program for searching for a word in a text document.,"The quick brown fox jumped over the lazy dog
search: fox","import re

text = 'The quick brown fox jumped over the lazy dog'
search = 'fox'

result = re.findall(search, text)

if result:
    print('Found!');
else:
    print('Not Found!')",Control Structure,6139,"import re

text = 'The quick brown fox jumped over the lazy dog'
search = 'fox'

result = re.findall(search, text)

if result:
    print('Found!');
else:
    print('Not Found!')","import re

text = 'The quick brown fox jumped over the lazy dog'
search = 'fox'

result = re.findall(search, text)

if result:
    print('Found!');
    ___
    print('Not Found!')"
Write a function in Python to check if an integer is prime or not.,37,"def is_prime(number):
  if number < 2:
    return False
  else:
    for x in range(2, number):
      if number % x == 0:
        return False
    return True

n = 37
print (is_prime(n)) # Output: True",Control Structure,6165,"def is_prime(number):
  if number < 2:
    return False
  else:
    for x in range(2, number):
      if number % x == 0:
        return False
    return True

n = 37
print (is_prime(n)) # Output: True","def is_prime(number):
  if number < 2:
    ___
    ___
    for x in range(2, number):
      if number % x == 0:
    ___
    ___

n = 37
print (is_prime(n)) # Output: True"
Create a Python program to calculate the grade for a student.,"Maths = 85
English = 70
Science = 90","Maths = 85
English = 70
Science = 90

# Calculate the average 
average = (Maths + English + Science) / 3

# Check the grade
if average >= 80:
    grade = 'A'
elif average >= 70:
    grade = 'B'
elif average >= 60:
    grade = 'C'
elif average >= 50:
    grade = 'D'
else:
    grade = 'F'

# Print the grade
print(grade)",Control Structure,6244,"Maths = 85
English = 70
Science = 90

# Calculate the average 
average = (Maths + English + Science) / 3

# Check the grade
if average >= 80:
    grade = 'A'
elif average >= 70:
    grade = 'B'
elif average >= 60:
    grade = 'C'
elif average >= 50:
    grade = 'D'
else:
    grade = 'F'

# Print the grade
print(grade)","Maths = 85
English = 70
Science = 90

# Calculate the average 
average = (Maths + English + Science) / 3

# Check the grade
if average >= 80:
    grade = 'A'
elif average >= 70:
    grade = 'B'
elif average >= 60:
    grade = 'C'
elif average >= 50:
    grade = 'D'
    ___
    grade = 'F'

# Print the grade
print(grade)"
Develop an algorithm using Python that determines if a number is a prime number or not.,12,"def is_prime(n):
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True",Control Structure,6290,"def is_prime(n):
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True","def is_prime(n):
    if n <= 1: 
    ___
    for i in range(2, n): 
        if n % i == 0: 
    ___
    ___"
Optimize the following Python code for runtime and memory performance.,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)","def factorial(n):
    if n == 0:
        return 1

    res = 1
    for i in range(2, n+1):
        res *= i
    return res",Control Structure,6309,"def factorial(n):
    if n == 0:
        return 1

    res = 1
    for i in range(2, n+1):
        res *= i
    return res","def factorial(n):
    if n == 0:
    ___

    res = 1
    for i in range(2, n+1):
        res *= i
    ___"
Create a Python function to check if a given number is abundant or not. An abundant number is a number which is less than the sum of its proper divisors.,number = 24,"def is_abundant(number):
    sum = 0
    for i in range(1, number):
        if number % i == 0:
            sum += i
    return sum > number",Control Structure,6317,"def is_abundant(number):
    sum = 0
    for i in range(1, number):
        if number % i == 0:
            sum += i
    return sum > number","def is_abundant(number):
    sum = 0
    for i in range(1, number):
        if number % i == 0:
            sum += i
    ___"
Create a program in Python for finding the greatest common divisor of two numbers.,"Number1: 20
Number2: 45","def gcd(a, b):
    while b != 0:
        temp = a
        a = b
        b = temp % b
    return a

print(gcd(20,45))",Control Structure,6330,"def gcd(a, b):
    while b != 0:
        temp = a
        a = b
        b = temp % b
    return a

print(gcd(20,45))","def gcd(a, b):
    while b != 0:
        temp = a
        a = b
        b = temp % b
    ___

print(gcd(20,45))"
Design an algorithm in Python for linear search.,"[3, 1, 5, 8], 8","def linear_search(arr, target):    
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1",Control Structure,6349,"def linear_search(arr, target):    
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1","def linear_search(arr, target):    
    for i in range(len(arr)):
        if arr[i] == target:
    ___
    ___"
Write a Python program for a program that checks if two strings are palindromes.,"Input strings: “radar”, “dad”","def is_palindrome(str1, str2):
 # Reverse str1
 reverse_str1 = str1[::-1]

 # Check if str1 is the same as the reversed version of str2
 if reverse_str1 == str2:
 return True
 else:
 return False

# Sample input
str1 = 'radar'
str2 = 'dad'

# Check if the strings are palindromes
print(is_palindrome(str1, str2)) # Output: True",Control Structure,6379,"def is_palindrome(str1, str2):
 # Reverse str1
 reverse_str1 = str1[::-1]

 # Check if str1 is the same as the reversed version of str2
 if reverse_str1 == str2:
 return True
 else:
 return False

# Sample input
str1 = 'radar'
str2 = 'dad'

# Check if the strings are palindromes
print(is_palindrome(str1, str2)) # Output: True","def is_palindrome(str1, str2):
 # Reverse str1
 reverse_str1 = str1[::-1]

 # Check if str1 is the same as the reversed version of str2
 if reverse_str1 == str2:
    ___
    ___
    ___

# Sample input
str1 = 'radar'
str2 = 'dad'

# Check if the strings are palindromes
print(is_palindrome(str1, str2)) # Output: True"
Write a Python program to calculate the Root Mean Square Error (RMSE) error value for a given prediction.,"y_predicted = [1, 2, 3] 
y_actual = [2, 3, 4]","from sklearn.metrics import mean_squared_error

def calculate_rmse(y_predicted, y_actual):
    error = mean_squared_error(y_predicted, y_actual)
    rmse = error**0.5
    return rmse

y_predicted = [1, 2, 3]
y_actual = [2, 3, 4]
rmse = calculate_rmse(y_predicted, y_actual)
print(rmse) # Output: 1.0",Control Structure,6443,"from sklearn.metrics import mean_squared_error

def calculate_rmse(y_predicted, y_actual):
    error = mean_squared_error(y_predicted, y_actual)
    rmse = error**0.5
    return rmse

y_predicted = [1, 2, 3]
y_actual = [2, 3, 4]
rmse = calculate_rmse(y_predicted, y_actual)
print(rmse) # Output: 1.0","from sklearn.metrics import mean_squared_error

def calculate_rmse(y_predicted, y_actual):
    error = mean_squared_error(y_predicted, y_actual)
    rmse = error**0.5
    ___

y_predicted = [1, 2, 3]
y_actual = [2, 3, 4]
rmse = calculate_rmse(y_predicted, y_actual)
print(rmse) # Output: 1.0"
Create a function in Python to determine if a number is divisible by another number.,"6, 3","def isDivisible(num1, num2):
    # check if num1 is divisible by num2
    if (num1 % num2) == 0:
        return True
    else:
        return False

num1 = 6
num2 = 3

result = isDivisible(num1, num2)
print(result)",Control Structure,6521,"def isDivisible(num1, num2):
    # check if num1 is divisible by num2
    if (num1 % num2) == 0:
        return True
    else:
        return False

num1 = 6
num2 = 3

result = isDivisible(num1, num2)
print(result)","def isDivisible(num1, num2):
    # check if num1 is divisible by num2
    if (num1 % num2) == 0:
    ___
    ___
    ___

num1 = 6
num2 = 3

result = isDivisible(num1, num2)
print(result)"
Modify the following Python code for calculating the factorial of a number.,"def factorial(n):
    fact = 1
    for i in range(1,n+1):
        fact = fact*i
    return fact","def factorial(n):
    if n == 0:
        return 1
    else:
        fact = 1
        for i in range(1,n+1):
            fact = fact*i
        return fact",Control Structure,6575,"def factorial(n):
    if n == 0:
        return 1
    else:
        fact = 1
        for i in range(1,n+1):
            fact = fact*i
        return fact","def factorial(n):
    if n == 0:
    ___
    ___
        fact = 1
        for i in range(1,n+1):
            fact = fact*i
    ___"
Optimize the following Python code for improved performance.,"def factorial(n):
 if n == 0:
   return 1
 else:
   return n * factorial(n - 1)","def factorial(n):
 fact = 1
 for i in range(1, n+1):
   fact *= i
  return fact",Control Structure,6585,"def factorial(n):
 fact = 1
 for i in range(1, n+1):
   fact *= i
  return fact","def factorial(n):
 fact = 1
 for i in range(1, n+1):
   fact *= i
    ___"
Design a python class for a shopping cart.,No input,"class ShoppingCart:
    def __init__(self):
        self.items = []
    
    def add_item(self, item):
        self.items.append(item)
    
    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)
    
    def get_total_amount(self):
        total_amount = 0
        for item in self.items:
            total_amount += item.price
        return total_amount",Control Structure,6593,"class ShoppingCart:
    def __init__(self):
        self.items = []
    
    def add_item(self, item):
        self.items.append(item)
    
    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)
    
    def get_total_amount(self):
        total_amount = 0
        for item in self.items:
            total_amount += item.price
        return total_amount","class ShoppingCart:
    def __init__(self):
        self.items = []
    
    def add_item(self, item):
        self.items.append(item)
    
    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)
    
    def get_total_amount(self):
        total_amount = 0
        for item in self.items:
            total_amount += item.price
    ___"
Construct a function in Python to compare the two given dictionaries and return true if both of them contains the same elements.,"dict1 = {'A':1, 'B':2, 'C':3 }
dict2 = {'A':1, 'C':3, 'B':2 }","def compare_dicts(dict1, dict2):
  # Iterate through keys in both dictionaries and compare values
  for key, value in dict1.items():
    if key not in dict2 or dict2[key] != value:
      return False
 
  # If all elements matched
  return True",Control Structure,6603,"def compare_dicts(dict1, dict2):
  # Iterate through keys in both dictionaries and compare values
  for key, value in dict1.items():
    if key not in dict2 or dict2[key] != value:
      return False
 
  # If all elements matched
  return True","def compare_dicts(dict1, dict2):
  # Iterate through keys in both dictionaries and compare values
  for key, value in dict1.items():
    if key not in dict2 or dict2[key] != value:
    ___
 
  # If all elements matched
    ___"
Write a Python program to compare two dictionaries to check if they are equal.,"d1 = {'a':1, 'b':2, 'c':3}
d2 = {'a':1, 'b':2, 'c':4}","def compare_dicts(dict1, dict2):
    if dict1 == dict2:
        return True
    return False

result = compare_dicts(d1, d2)
print(result)",Control Structure,6683,"def compare_dicts(dict1, dict2):
    if dict1 == dict2:
        return True
    return False

result = compare_dicts(d1, d2)
print(result)","def compare_dicts(dict1, dict2):
    if dict1 == dict2:
    ___
    ___

result = compare_dicts(d1, d2)
print(result)"
You need to write a Python program for computing the factorial of a number.,5,"def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)

print(factorial(5))",Control Structure,6701,"def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)

print(factorial(5))","def factorial(num):
    if num == 0:
    ___
    ___
    ___

print(factorial(5))"
write a python program for its purpose,Compute the factorial of a given number,"""""""
Compute the factorial of a given number
""""""

def factorial(n): 
	if n == 1: 
		return 1
	else: 
		return n * factorial(n-1) 

if __name__ == '__main__': 
	num = int(input()) 
	print(factorial(num))",Control Structure,6707,"""""""
Compute the factorial of a given number
""""""

def factorial(n): 
	if n == 1: 
		return 1
	else: 
		return n * factorial(n-1) 

if __name__ == '__main__': 
	num = int(input()) 
	print(factorial(num))","""""""
Compute the factorial of a given number
""""""

def factorial(n): 
	if n == 1: 
    ___
    ___
    ___

if __name__ == '__main__': 
	num = int(input()) 
	print(factorial(num))"
Compare two strings to check if they are anagrams or not in Python.,"“silent”, “listen”","def is_anagram(w1, w2):
    # Check if lengths are equal
    if len(w1) == len(w2):
        # Sort the strings
        s1 = sorted(w1)
        s2 = sorted(w2)
        # Check if sorted strings are equal
        if s1 == s2:
            return True
    return False

# Example
w1 = ""silent""
w2 = ""listen""

print(is_anagram(w1, w2)) #Output: True",Control Structure,6710,"def is_anagram(w1, w2):
    # Check if lengths are equal
    if len(w1) == len(w2):
        # Sort the strings
        s1 = sorted(w1)
        s2 = sorted(w2)
        # Check if sorted strings are equal
        if s1 == s2:
            return True
    return False

# Example
w1 = ""silent""
w2 = ""listen""

print(is_anagram(w1, w2)) #Output: True","def is_anagram(w1, w2):
    # Check if lengths are equal
    if len(w1) == len(w2):
        # Sort the strings
        s1 = sorted(w1)
        s2 = sorted(w2)
        # Check if sorted strings are equal
        if s1 == s2:
    ___
    ___

# Example
w1 = ""silent""
w2 = ""listen""

print(is_anagram(w1, w2)) #Output: True"
Develop a Python script for calculating the Fibonacci numbers for a given input.,8,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 
  
print(Fibonacci(8))",Control Structure,6729,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 
  
print(Fibonacci(8))","def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
    ___
    # Second Fibonacci number is 1 
    elif n==2: 
    ___
    ___
    ___

# Driver Program 
  
print(Fibonacci(8))"
Optimize this Python program for better efficiency.,"def add_two_lists(l1, l2):
    res = []
    for i in range(len(l1)):
        res.append(l1[i] + l2[i])
    return res","def add_two_lists(l1, l2):
    return [x + y for x, y in zip(l1, l2)]",Control Structure,6738,"def add_two_lists(l1, l2):
    return [x + y for x, y in zip(l1, l2)]","def add_two_lists(l1, l2):
    ___"
Create a Python program to calculate the electric bill for a customer based on kilowatt hour of electricity used.,x = 500,"def calculate_electric_bill(kw_usage):
  rate = 0.15
  bill = kw_usage * rate
  return bill

x = 500
bill = calculate_electric_bill(x)
print(""Your bill is:"", str(bill))",Control Structure,6743,"def calculate_electric_bill(kw_usage):
  rate = 0.15
  bill = kw_usage * rate
  return bill

x = 500
bill = calculate_electric_bill(x)
print(""Your bill is:"", str(bill))","def calculate_electric_bill(kw_usage):
  rate = 0.15
  bill = kw_usage * rate
    ___

x = 500
bill = calculate_electric_bill(x)
print(""Your bill is:"", str(bill))"
Create a function in Python for evaluating a given polynomial expression.,Expression: 4x4 + 7x3 + 5x2 + 8x,"def evaluate_polynomial(expression):
  expression = expression.strip()
  tokens  = expression.split(""+"")
  result = 0
  for term in tokens:
    term = term.strip()
    coefficient, exponent = term.split(""x"")
    result += float(coefficient) * float(expoent)

  return result",Control Structure,6787,"def evaluate_polynomial(expression):
  expression = expression.strip()
  tokens  = expression.split(""+"")
  result = 0
  for term in tokens:
    term = term.strip()
    coefficient, exponent = term.split(""x"")
    result += float(coefficient) * float(expoent)

  return result","def evaluate_polynomial(expression):
  expression = expression.strip()
  tokens  = expression.split(""+"")
  result = 0
  for term in tokens:
    term = term.strip()
    coefficient, exponent = term.split(""x"")
    result += float(coefficient) * float(expoent)

    ___"
Create an algorithm to check if a sentence is a palindrome in Python.,"Sentence: ""Rise to vote, Sir""","def is_sentence_palindrome(sentence):
    sentence = sentence.lower().replace("" "", """")
    return sentence == sentence[::-1]

is_sentence_palindrome(""Rise to vote, Sir"")  # False",Control Structure,6847,"def is_sentence_palindrome(sentence):
    sentence = sentence.lower().replace("" "", """")
    return sentence == sentence[::-1]

is_sentence_palindrome(""Rise to vote, Sir"")  # False","def is_sentence_palindrome(sentence):
    sentence = sentence.lower().replace("" "", """")
    ___

is_sentence_palindrome(""Rise to vote, Sir"")  # False"
Find the number of ways to reach nth step in a staircase if a person can take 1 or 2 steps at a time in Python.,n = 6,"def stairs(n): 
    step = [0] * (n + 2) 
    step[1] = 1
    step[2] = 2
  
    for i in range(3, n + 2): 
        step[i] = step[i - 1] + step[i - 2] 
  
    return step[n] 
      
n = 6
print(stairs(n))",Control Structure,6854,"def stairs(n): 
    step = [0] * (n + 2) 
    step[1] = 1
    step[2] = 2
  
    for i in range(3, n + 2): 
        step[i] = step[i - 1] + step[i - 2] 
  
    return step[n] 
      
n = 6
print(stairs(n))","def stairs(n): 
    step = [0] * (n + 2) 
    step[1] = 1
    step[2] = 2
  
    for i in range(3, n + 2): 
        step[i] = step[i - 1] + step[i - 2] 
  
    ___
      
n = 6
print(stairs(n))"
Develop a Python Program to determine if two given strings are an anagram or not.,"string1 = ""abcd""
string2 = ""cbad""","def is_anagram(string1, string2):
    # check if strings have equal length 
    if len(string1) != len(string2): 
        return False 
    sorted1 = sorted(string1); 
    sorted2 = sorted(string2); 
    # check if sorted strings are the same 
    if sorted1 == sorted2:
        return True 
    return False",Control Structure,6867,"def is_anagram(string1, string2):
    # check if strings have equal length 
    if len(string1) != len(string2): 
        return False 
    sorted1 = sorted(string1); 
    sorted2 = sorted(string2); 
    # check if sorted strings are the same 
    if sorted1 == sorted2:
        return True 
    return False","def is_anagram(string1, string2):
    # check if strings have equal length 
    if len(string1) != len(string2): 
    ___
    sorted1 = sorted(string1); 
    sorted2 = sorted(string2); 
    # check if sorted strings are the same 
    if sorted1 == sorted2:
    ___
    ___"
Write a Python program to compare two integers and prints if one is greater then another.,"int1=1, int2=2","# compare two integers
int1=1
int2=2
if int1 > int2:
    print(""int1 is greater than int2"")
elif int2 > int1:
    print(""int2 is greater than int1"")
else:
    print(""int1 and int2 are equal"")",Control Structure,6873,"# compare two integers
int1=1
int2=2
if int1 > int2:
    print(""int1 is greater than int2"")
elif int2 > int1:
    print(""int2 is greater than int1"")
else:
    print(""int1 and int2 are equal"")","# compare two integers
int1=1
int2=2
if int1 > int2:
    print(""int1 is greater than int2"")
elif int2 > int1:
    print(""int2 is greater than int1"")
    ___
    print(""int1 and int2 are equal"")"
"Given two strings, write a Python function to check if they are anagrams of each other.","""schoolmaster"", ""the classroom""","def is_anagram(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")
    return sorted(s1) == sorted(s2)

result = is_anagram(""schoolmaster"", ""the classroom"")
print(result)",Control Structure,6879,"def is_anagram(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")
    return sorted(s1) == sorted(s2)

result = is_anagram(""schoolmaster"", ""the classroom"")
print(result)","def is_anagram(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")
    ___

result = is_anagram(""schoolmaster"", ""the classroom"")
print(result)"
Create functions in Python for validating if a number is prime or not.,n = 12,"def is_prime(n):
    if n == 1:
        return False
    for i in range(2,int(n**(1/2))+1):
        if n%i == 0:
            return False
    return True

if is_prime(12):
    print(""Prime"")
else:
    print(""Not Prime"")",Control Structure,6922,"def is_prime(n):
    if n == 1:
        return False
    for i in range(2,int(n**(1/2))+1):
        if n%i == 0:
            return False
    return True

if is_prime(12):
    print(""Prime"")
else:
    print(""Not Prime"")","def is_prime(n):
    if n == 1:
    ___
    for i in range(2,int(n**(1/2))+1):
        if n%i == 0:
    ___
    ___

if is_prime(12):
    print(""Prime"")
    ___
    print(""Not Prime"")"
Create an algorithm in Python for the classification of numbers into even or odd.,3,"def classifyNumber(num): 
    if num % 2 == 0: 
        return ""even""
    else: 
        return ""odd"" 
  
print(classifyNumber(3))",Control Structure,6930,"def classifyNumber(num): 
    if num % 2 == 0: 
        return ""even""
    else: 
        return ""odd"" 
  
print(classifyNumber(3))","def classifyNumber(num): 
    if num % 2 == 0: 
    ___
    ___
    ___
  
print(classifyNumber(3))"
"Refactor the following code to use the most Pythonic approach:

```
for i in range(0, list_items_len):
    if list_items[i] == target_item:
        index = i
        break
```","list_items = ['a', 'b', 'c', 'd', 'e']
target_item = 'c'","list_items = ['a', 'b', 'c', 'd', 'e']
target_item = 'c'

index = list_items.index(target_item) if target_item in list_items else None",Control Structure,6933,"list_items = ['a', 'b', 'c', 'd', 'e']
target_item = 'c'

index = list_items.index(target_item) if target_item in list_items else None","list_items = ['a', 'b', 'c', 'd', 'e']
target_item = 'c'

    ___"
Write a Python program to check if it contains the specified substring.,"my_string = ""Hello World""","my_string = ""Hello World""
if ""World"" in my_string:
    print(""Yes, the specified substring is found."")
else:
    print(""No, the substring is not found."")",Control Structure,6956,"my_string = ""Hello World""
if ""World"" in my_string:
    print(""Yes, the specified substring is found."")
else:
    print(""No, the substring is not found."")","my_string = ""Hello World""
if ""World"" in my_string:
    print(""Yes, the specified substring is found."")
    ___
    print(""No, the substring is not found."")"
Create a Python program to check if two strings are anagrams.,"leg, gel","def is_anagram(s1, s2): 
    # Convert both strings to lower case 
    s1 = s1.lower() 
    s2 = s2.lower() 

    # Sort both strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 

    if s1 == s2: 
        return True 
    else: 
        return False",Control Structure,6989,"def is_anagram(s1, s2): 
    # Convert both strings to lower case 
    s1 = s1.lower() 
    s2 = s2.lower() 

    # Sort both strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 

    if s1 == s2: 
        return True 
    else: 
        return False","def is_anagram(s1, s2): 
    ___
    s1 = s1.lower() 
    s2 = s2.lower() 

    # Sort both strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 

    if s1 == s2: 
    ___
    ___
    ___"
Create a Python program to calculate the sum of the digits for a number that is provided as input.,num = 1234,"# Function to find the sum of digits
def sum_digits(num):
 # Variable to store the sum of digits
 sum = 0
 
 while num > 0:
  digit = num % 10
  sum = sum + digit
  num = num // 10
 
 return sum
 
num = 1234
sum = sum_digits(num)
print(""Sum of digits of %d is %d"" % (num, sum))
# Output: Sum of digits of 1234 is 10",Control Structure,7008,"# Function to find the sum of digits
def sum_digits(num):
 # Variable to store the sum of digits
 sum = 0
 
 while num > 0:
  digit = num % 10
  sum = sum + digit
  num = num // 10
 
 return sum
 
num = 1234
sum = sum_digits(num)
print(""Sum of digits of %d is %d"" % (num, sum))
# Output: Sum of digits of 1234 is 10","# Function to find the sum of digits
def sum_digits(num):
 # Variable to store the sum of digits
 sum = 0
 
 while num > 0:
  digit = num % 10
  sum = sum + digit
  num = num // 10
 
    ___
 
num = 1234
sum = sum_digits(num)
print(""Sum of digits of %d is %d"" % (num, sum))
# Output: Sum of digits of 1234 is 10"
"Write a Python program to calculate the sum of two given integers, if the two values are equal then return the triple of their sum.","2, 2","def calculate_sum(a, b):
    if a == b:
        return (a + b) * 3
    else:
        return a + b
    
a = 2
b = 2
result = calculate_sum(a, b)
print(result)",Control Structure,7037,"def calculate_sum(a, b):
    if a == b:
        return (a + b) * 3
    else:
        return a + b
    
a = 2
b = 2
result = calculate_sum(a, b)
print(result)","def calculate_sum(a, b):
    if a == b:
    ___
    ___
    ___
    
a = 2
b = 2
result = calculate_sum(a, b)
print(result)"
Generate a Python program which determines if a given number is divisible by 7,28,"def is_divisible_by_7(num):
    if num % 7 == 0:
        return True
    else:
        return False

result = is_divisible_by_7(28)
print(result)",Control Structure,7059,"def is_divisible_by_7(num):
    if num % 7 == 0:
        return True
    else:
        return False

result = is_divisible_by_7(28)
print(result)","def is_divisible_by_7(num):
    if num % 7 == 0:
    ___
    ___
    ___

result = is_divisible_by_7(28)
print(result)"
Design an algorithm in Python to check if an integer is a power of two.,Number: 16,"def isPowerOfTwo(n):
  if(n == 0): 
    return False
  while(n != 1): 
    if(n % 2 != 0): 
      return False
    n = n // 2
    
  return True
  
# The following call will return True
isPowerOfTwo(16)",Control Structure,7152,"def isPowerOfTwo(n):
  if(n == 0): 
    return False
  while(n != 1): 
    if(n % 2 != 0): 
      return False
    n = n // 2
    
  return True
  
# The following call will return True
isPowerOfTwo(16)","def isPowerOfTwo(n):
  if(n == 0): 
    ___
  while(n != 1): 
    if(n % 2 != 0): 
    ___
    n = n // 2
    
    ___
  
    ___
isPowerOfTwo(16)"
Write a Python program to determine if a number provided by the user is prime or not.,17,"# Ask the user for a number
num = int(input('Enter a number: '))

# Set initial values
is_prime = True

# Check for prime
for i in range(2, num):
 if num % i == 0:
 is_prime = False
 break

# Output result
if is_prime:
 print(f'{num} is a prime number.')
else:
 print(f'{num} is not a prime number.')",Control Structure,7164,"# Ask the user for a number
num = int(input('Enter a number: '))

# Set initial values
is_prime = True

# Check for prime
for i in range(2, num):
 if num % i == 0:
 is_prime = False
 break

# Output result
if is_prime:
 print(f'{num} is a prime number.')
else:
 print(f'{num} is not a prime number.')","# Ask the user for a number
num = int(input('Enter a number: '))

# Set initial values
is_prime = True

# Check for prime
for i in range(2, num):
 if num % i == 0:
 is_prime = False
    ___

# Output result
if is_prime:
 print(f'{num} is a prime number.')
    ___
 print(f'{num} is not a prime number.')"
Write a Python program to check if two strings are isomorphic.,"s1 = ""foo"", s2 = ""app""","def is_isomorphic(s1, s2):
    if len(s1) != len(s2):
        return False

    s1_dict = dict()
    for i, char in enumerate(s1):
        if char in s1_dict:
            if s1_dict[char] != s2[i]:
                return False
        else:
            s1_dict[char] = s2[i]

    return True",Control Structure,7184,"def is_isomorphic(s1, s2):
    if len(s1) != len(s2):
        return False

    s1_dict = dict()
    for i, char in enumerate(s1):
        if char in s1_dict:
            if s1_dict[char] != s2[i]:
                return False
        else:
            s1_dict[char] = s2[i]

    return True","def is_isomorphic(s1, s2):
    if len(s1) != len(s2):
    ___

    s1_dict = dict()
    for i, char in enumerate(s1):
        if char in s1_dict:
            if s1_dict[char] != s2[i]:
    ___
    ___
            s1_dict[char] = s2[i]

    ___"
Implement a python program to check if a number is powerful. A powerful number is one who has a power of 2 as any of its prime divisors.,number = 18,"def is_power(number):
    flag = False
    if number > 2:
        for i in range(2, number // 2 + 1):
            while number % i == 0:
                if number % (i ** 2) == 0:
                    flag = True
                number = number / i
    
    return flag

print(is_power(18))",Control Structure,7185,"def is_power(number):
    flag = False
    if number > 2:
        for i in range(2, number // 2 + 1):
            while number % i == 0:
                if number % (i ** 2) == 0:
                    flag = True
                number = number / i
    
    return flag

print(is_power(18))","def is_power(number):
    flag = False
    if number > 2:
        for i in range(2, number // 2 + 1):
            while number % i == 0:
                if number % (i ** 2) == 0:
                    flag = True
                number = number / i
    
    ___

print(is_power(18))"
Write a Python code for converting a given sentence into pig latin.,The quick brown fox,"def convert_string_to_pig_latin(sentence):
    words = sentence.split()
    pig_latin_words = []
    for word in words:
        if word[0] in 'aeiou':
            pig_word = word + 'way'
        else:
            pig_word = word[1:] + word[0] + 'ay'
        pig_latin_words.append(pig_word)
    return ' '.join(pig_latin_words)",Control Structure,7188,"def convert_string_to_pig_latin(sentence):
    words = sentence.split()
    pig_latin_words = []
    for word in words:
        if word[0] in 'aeiou':
            pig_word = word + 'way'
        else:
            pig_word = word[1:] + word[0] + 'ay'
        pig_latin_words.append(pig_word)
    return ' '.join(pig_latin_words)","def convert_string_to_pig_latin(sentence):
    words = sentence.split()
    pig_latin_words = []
    for word in words:
        if word[0] in 'aeiou':
            pig_word = word + 'way'
    ___
            pig_word = word[1:] + word[0] + 'ay'
        pig_latin_words.append(pig_word)
    ___"
Build a program in Python for finding the largest prime number in a given range.,1-100,"def largest_prime(num):
    largest_prime = 0
    for n in range (num):
        if(isPrime(n)):
            largest_prime = n
    return largest_prime

def isPrime(n):
    if(n == 1):
        return False
    elif(n == 2):
        return True
    else:
        for x in range(2,n//2+1):
            if(n % x == 0):
                return False
        return True

print(largest_prime(100))",Control Structure,7214,"def largest_prime(num):
    largest_prime = 0
    for n in range (num):
        if(isPrime(n)):
            largest_prime = n
    return largest_prime

def isPrime(n):
    if(n == 1):
        return False
    elif(n == 2):
        return True
    else:
        for x in range(2,n//2+1):
            if(n % x == 0):
                return False
        return True

print(largest_prime(100))","def largest_prime(num):
    largest_prime = 0
    for n in range (num):
        if(isPrime(n)):
            largest_prime = n
    ___

def isPrime(n):
    if(n == 1):
    ___
    elif(n == 2):
    ___
    ___
        for x in range(2,n//2+1):
            if(n % x == 0):
    ___
    ___

print(largest_prime(100))"
Construct a Python program for finding the intersection of two arrays.,"Array 1: [1, 2, 3, 4]
Array 2: [3, 4, 5, 6]","def intersection(arr1, arr2):
  result = [i for i in arr1 if i in arr2]
  return result

arr1 = [1, 2, 3, 4]
arr2 = [3, 4, 5, 6]
result = intersection(arr1, arr2)
print(result)  # [3, 4]",Control Structure,7230,"def intersection(arr1, arr2):
  result = [i for i in arr1 if i in arr2]
  return result

arr1 = [1, 2, 3, 4]
arr2 = [3, 4, 5, 6]
result = intersection(arr1, arr2)
print(result)  # [3, 4]","def intersection(arr1, arr2):
  result = [i for i in arr1 if i in arr2]
    ___

arr1 = [1, 2, 3, 4]
arr2 = [3, 4, 5, 6]
result = intersection(arr1, arr2)
print(result)  # [3, 4]"
Create a python program to calculate Fibonacci sequence for a given number.,n = 8,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    n = 8
    print(fibonacci(n))",Control Structure,7237,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    n = 8
    print(fibonacci(n))","def fibonacci(n):
    if n == 0:
    ___
    elif n == 1:
    ___
    ___
    ___

if __name__ == '__main__':
    n = 8
    print(fibonacci(n))"
"Optimize a given Python program for speed, memory usage and readability.","def factorial(n):
    f =1
    for i in range(2,n+1):
        f *=i
    return f","def factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result",Control Structure,7260,"def factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result","def factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    ___"
"Develop an algorithm for calculating the sum of two numbers, in Python.","2, 20","def add_numbers(a, b):
    return a + b

print(""The sum of 2 and 20 is: "", add_numbers(2, 20))",Control Structure,7304,"def add_numbers(a, b):
    return a + b

print(""The sum of 2 and 20 is: "", add_numbers(2, 20))","def add_numbers(a, b):
    ___

print(""The sum of 2 and 20 is: "", add_numbers(2, 20))"
Create a Python function for encrypting strings using a “Vigenere Cipher”.,"""HELLO""","def encrypt_vigenere(plaintext, key):
 ciphertext = """"
 index = 0
 for c in plaintext:
     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)
     index = (index + 1) % len(key)
 return ciphertext",Control Structure,7328,"def encrypt_vigenere(plaintext, key):
 ciphertext = """"
 index = 0
 for c in plaintext:
     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)
     index = (index + 1) % len(key)
 return ciphertext","def encrypt_vigenere(plaintext, key):
 ciphertext = """"
 index = 0
 for c in plaintext:
     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)
     index = (index + 1) % len(key)
    ___"
Develop a program in Python for converting a base 10 number to binary.,17,"def decimalToBinary(n):
    binary = 0
    power = 1
    
    while (n != 0):
        last_bit = n % 2
        binary = binary + last_bit * power
        n = n // 2
        power = power * 10
 
    return binary

n = 17
print('Binary Representation of', n, 'is', decimalToBinary(n))",Control Structure,7348,"def decimalToBinary(n):
    binary = 0
    power = 1
    
    while (n != 0):
        last_bit = n % 2
        binary = binary + last_bit * power
        n = n // 2
        power = power * 10
 
    return binary

n = 17
print('Binary Representation of', n, 'is', decimalToBinary(n))","def decimalToBinary(n):
    binary = 0
    power = 1
    
    while (n != 0):
        last_bit = n % 2
        binary = binary + last_bit * power
        n = n // 2
        power = power * 10
 
    ___

n = 17
print('Binary Representation of', n, 'is', decimalToBinary(n))"
Create a Python program to mark a character as asterisk (*) if it's the same as the previous one?,"test_string = ""SSSSSSSSSShellllllllllllooooooooo""","def mark_asterisk(input):
    res = """"
    temp = input[0]
    for char in input:
        if char == temp:
            res += '*'
        else:
            res += char
            temp = char
    return res",Control Structure,7354,"def mark_asterisk(input):
    res = """"
    temp = input[0]
    for char in input:
        if char == temp:
            res += '*'
        else:
            res += char
            temp = char
    return res","def mark_asterisk(input):
    res = """"
    temp = input[0]
    for char in input:
        if char == temp:
            res += '*'
    ___
            res += char
            temp = char
    ___"
Optimize a simple Python program for finding the sum of two numbers. The program should take two numbers as an input and return the sum as an output.,15 and 7,"def add_numbers(num1, num2):
 '''
 Function to add two numbers 
 '''
 return num1 + num2 

# Driver code 
print(add_numbers(15, 7))",Control Structure,7389,"def add_numbers(num1, num2):
 '''
 Function to add two numbers 
 '''
 return num1 + num2 

# Driver code 
print(add_numbers(15, 7))","def add_numbers(num1, num2):
 '''
 Function to add two numbers 
 '''
    ___

# Driver code 
print(add_numbers(15, 7))"
Create a Python script to break the given sentence into words.,"sentence = ""This is an example sentence.""","def break_sentence(sentence):  
    return sentence.split("" "")",Control Structure,7402,"def break_sentence(sentence):  
    return sentence.split("" "")","def break_sentence(sentence):  
    ___"
Generate a python program to determine if two objects are mutually exclusive or not.,"Input objects are ([1,2,3], [4,5,6]).","def mutually_exclusive(object1, object2):
    if len(object1.intersection(object2)) > 0:
        return False
    else:
        return True
    
object1 = set([1, 2, 3])
object2 = set([4, 5, 6])

result = mutually_exclusive(object1, object2)
print(result) # Outputs True as objects don't share elements.",Control Structure,7404,"def mutually_exclusive(object1, object2):
    if len(object1.intersection(object2)) > 0:
        return False
    else:
        return True
    
object1 = set([1, 2, 3])
object2 = set([4, 5, 6])

result = mutually_exclusive(object1, object2)
print(result) # Outputs True as objects don't share elements.","def mutually_exclusive(object1, object2):
    if len(object1.intersection(object2)) > 0:
    ___
    ___
    ___
    
object1 = set([1, 2, 3])
object2 = set([4, 5, 6])

result = mutually_exclusive(object1, object2)
print(result) # Outputs True as objects don't share elements."
Design a Python function to check if two given strings are anagrams or not.,"""abc"", ""cab""","def check_anagram(str1, str2):
 
    if sorted(str1) == sorted(str2):
        return True
    else:
        return False",Control Structure,7405,"def check_anagram(str1, str2):
 
    if sorted(str1) == sorted(str2):
        return True
    else:
        return False","def check_anagram(str1, str2):
 
    if sorted(str1) == sorted(str2):
    ___
    ___
    ___"
Suggest a completion for the following python function in order to generate a random number between 0 and 1.,"import random

def generate_random():
    # Your code here","import random

def generate_random():
    return random.random()",Control Structure,7427,"import random

def generate_random():
    return random.random()","import random

def generate_random():
    ___"
Compose a function in Python to check if a given number is a power of two.,10,"def is_power_two(num):
    if num == 0:
        return False
    
    while num != 1:
        if num % 2 != 0:
            return False
        num = num // 2
    return True",Control Structure,7438,"def is_power_two(num):
    if num == 0:
        return False
    
    while num != 1:
        if num % 2 != 0:
            return False
        num = num // 2
    return True","def is_power_two(num):
    if num == 0:
    ___
    
    while num != 1:
        if num % 2 != 0:
    ___
        num = num // 2
    ___"
Write a Python function that will calculate the average temperature for the past week.,"[64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]","def calc_avg_temperature(temperatures):
  total = 0
  for temp in temperatures:
    total += temp
  avg = total / len(temperatures)
  return avg

print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))

# Output: 71.17142857142857",Control Structure,7447,"def calc_avg_temperature(temperatures):
  total = 0
  for temp in temperatures:
    total += temp
  avg = total / len(temperatures)
  return avg

print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))

# Output: 71.17142857142857","def calc_avg_temperature(temperatures):
  total = 0
  for temp in temperatures:
    total += temp
  avg = total / len(temperatures)
    ___

print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))

# Output: 71.17142857142857"
Create a Python script to detect if a number is prime.,10,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

if __name__ == ""__main__"":
    n = 10
    if is_prime(n):
        print(""{} is a prime number"".format(n))
    else:
        print(""{} is not a prime number"".format(n))",Control Structure,7511,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

if __name__ == ""__main__"":
    n = 10
    if is_prime(n):
        print(""{} is a prime number"".format(n))
    else:
        print(""{} is not a prime number"".format(n))","def is_prime(n):
    if n <= 1:
    ___
    for i in range(2, n):
        if n % i == 0:
    ___
    ___

if __name__ == ""__main__"":
    n = 10
    if is_prime(n):
        print(""{} is a prime number"".format(n))
    ___
        print(""{} is not a prime number"".format(n))"
Construct an algorithm for factoring a large number in Python.,Number = 600851475143,"def get_factor(n):
    factors = []
   
    for i in range(2, n + 1):
        if n % i == 0:
            factors.append(i)
            n //= i
    return factors

number = 600851475143
print(get_factor(number))",Control Structure,7525,"def get_factor(n):
    factors = []
   
    for i in range(2, n + 1):
        if n % i == 0:
            factors.append(i)
            n //= i
    return factors

number = 600851475143
print(get_factor(number))","def get_factor(n):
    factors = []
   
    for i in range(2, n + 1):
        if n % i == 0:
            factors.append(i)
            n //= i
    ___

number = 600851475143
print(get_factor(number))"
Suggest a code improvement for the following python code to ensure that all input is valid.,"def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = {}'.format(username)
    result = Database.execute_query(query)
    return result","def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = %s'
    result = Database.execute_query(query, (username,))
    return result",Control Structure,7545,"def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = %s'
    result = Database.execute_query(query, (username,))
    return result","def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = %s'
    result = Database.execute_query(query, (username,))
    ___"
Modify the following Python code to raise an exception if the input value is not an integer,"def square_root(x):
    return x**0.5","def square_root(x):
    if not isinstance(x, int):
        raise TypeError('Input must be an integer')
    return x**0.5",Control Structure,7547,"def square_root(x):
    if not isinstance(x, int):
        raise TypeError('Input must be an integer')
    return x**0.5","def square_root(x):
    if not isinstance(x, int):
        raise TypeError('Input must be an integer')
    ___"
Design an algorithm in Python for finding and printing all prime numbers between 1 and a given number.,100,"def find_all_primes(n): 
  for num in range(2,n + 1):
    for i in range(2,num):
      if (num % i) == 0:
        break 
    else:
      print(num)

find_all_primes(100)",Control Structure,7556,"def find_all_primes(n): 
  for num in range(2,n + 1):
    for i in range(2,num):
      if (num % i) == 0:
        break 
    else:
      print(num)

find_all_primes(100)","def find_all_primes(n): 
  for num in range(2,n + 1):
    for i in range(2,num):
      if (num % i) == 0:
    ___
    ___
      print(num)

find_all_primes(100)"
