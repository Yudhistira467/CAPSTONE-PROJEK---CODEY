{
    "quiz": [
        {
            "question_id": 12,
            "material": "Lainnya",
            "instruction": "Write a python program to successfully insert a row into a table named 'students' with the given values.",
            "question": "import ___\n\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\nc.execute(\"INSERT INTO students VALUES ('John Doe', 20)\")\nconn.commit()\nconn.close()",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 20,
            "material": "Lainnya",
            "instruction": "Create a web server in Python.",
            "question": "import ___.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Server running at http://localhost:{}/\".format(PORT))\n    httpd.serve_forever()",
            "correct_answer": "http",
            "duration": 20
        },
        {
            "question_id": 57,
            "material": "Lainnya",
            "instruction": "Write a Python program that takes a sentence as an argument and removes all punctuations from it.",
            "question": "import ___\n\ndef removePunctuations(sentence):\n    return sentence.translate(str.maketrans('', '', string.punctuation))\n\nprint(removePunctuations(\"This, is a?! test* sentence.\"))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 93,
            "material": "Lainnya",
            "instruction": "Write a Python program to solve a quadratic equation.",
            "question": "import ___\n\n# Solve the quadratic equation ax**2 + bx + c = 0 \n# ax**2 + bx + c = 0 \n# find x\n\na = 1\nb = - 5\nc = 6\n\nd = (b**2) - (4*a*c)\n \n# find two solutions\nsol1 = (-b-math.sqrt(d))/(2*a)\nsol2 = (-b+math.sqrt(d))/(2*a)\n \nprint('The solution are {0} and {1}'.format(sol1,sol2))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 99,
            "material": "Lainnya",
            "instruction": "Write a Python code to tokenize the given sentence.",
            "question": "import ___\n\nsentence = \"This is a sample sentence\"\n\ntokenized_words = nltk.word_tokenize(sentence)\n\nprint(tokenized_words)",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 103,
            "material": "Lainnya",
            "instruction": "Edit the given Python code to make it asynchronous.",
            "question": "\"\"\"\nimport ___\nimport re\n\nasync def find_files(files, pattern):\n    result = []\n    for f in files:\n        if re.search(pattern,f):\n            result.append(f)\n    return result\n\"\"\"",
            "correct_answer": "asyncio",
            "duration": 20
        },
        {
            "question_id": 109,
            "material": "Lainnya",
            "instruction": "Train a machine learning model in Python using a given dataset and generate a confusion matrix.",
            "question": "from sklearn.model_selection import ___\nfrom sklearn.metrics import confusion_matrix\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) \nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nconfusion_matrix(y_test, predictions)",
            "correct_answer": "train_test_split",
            "duration": 20
        },
        {
            "question_id": 147,
            "material": "Lainnya",
            "instruction": "Create a translation model in python which takes a sentence as input and returns its translation in Khmer.",
            "question": "import ___ \nfrom googletrans import Translator \n \ndef translate_sentence(sentence): \n    translator = Translator()\n    translated_sentence = translator.translate(sentence, dest='km')\n    return translated_sentence.text\n\nresult = translate_sentence(\"Hello world\")\nprint(result)",
            "correct_answer": "googletrans",
            "duration": 20
        },
        {
            "question_id": 148,
            "material": "Lainnya",
            "instruction": "Create a \u2018Find and Replace\u2019 Script in Python.",
            "question": "import ___\n\ntext = 'This is a sentence with words'\nfind = 'words'\nreplace = 'letters'\n\nnew_text = re.sub(find, replace, text)\nprint(new_text)\n# Output: This is a sentence with letters",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 151,
            "material": "Lainnya",
            "instruction": "Formulate a python program to calculate the roots of a quadratic equation with given coefficients.",
            "question": "import ___\n \ndef quadratic_roots(a, b, c):\n \n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n  \n  # calculate the two roots\n  root1 = (-b + math.sqrt(d)) / (2*a)\n  root2 = (-b - math.sqrt(d)) / (2*a)\n   \n  print(\"The roots of x^2 - 5x - 6 are\",root1,\"and\",root2)\n  \n# Driver Code\na = 2\nb = -5\nc = -3\nquadratic_roots(a, b, c)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 155,
            "material": "Lainnya",
            "instruction": "Find the most common word in a sentence using Python.",
            "question": "from collections import ___\n \ndef most_frequent(sentence):\n    words = sentence.split()\n    counter = Counter(words)\n    return counter.most_common(1)[0][0]\n\nsentence = \"this is a sentence with several words in it\"\nprint(most_frequent(sentence))\n// Outputs: \"a\"",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 157,
            "material": "Lainnya",
            "instruction": "Write a Python program that displays the current status of a given stock quote.",
            "question": "import ___ \n\nAAPL_url = \"https://api.iextrading.com/1.0/stock/AAPL/quote?filter=symbol,latestPrice,latestSource,latestTime\"\n\nres = requests.get(AAPL_url)\ndata = res.json()\n\nprint(\"Symbol: \" + data['symbol']) \nprint(\"Price: \" + str(data['latestPrice'])) \nprint(\"Source: \" + data['latestSource']) \nprint(\"Time: \" + data['latestTime'])",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 185,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python that extracts the titles and summary from the reviews on a certain web page.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \u201chttps://www.example.com/reviews\u201d\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \u201chtml.parser\u201d)\n\ntitles = []\nsummaries = []\n\nfor review in soup.find_all(\u2018div\u2019, {\u2018class\u2019: \u2018review\u2019}):\n titles.append(review.find(\u2018h3\u2019).text)\n summaries.append(review.find(\u2018p\u2019).text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 224,
            "material": "Lainnya",
            "instruction": "Optimize a Python program containing a matrix addition operation.",
            "question": "import ___ as np \n\nX = np.array([[2, 3], \n     [1, 4]]) \n\nY = np.array([[5, 6], \n     [7, 8]])\n\nZ = X + Y \n\nprint(\"Matrix addition result:\") \nprint(Z)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 248,
            "material": "Lainnya",
            "instruction": "Create a command line tool in Python that takes a numerical input (e.g. from user input) and prints out all prime numbers up to that number.",
            "question": "import ___\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main()",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 256,
            "material": "Lainnya",
            "instruction": "Generate a Python program to extract the domain name from a given URL.",
            "question": "import ___\n\ndef extract_domain_name(url):\n    pattern = r\"([a-z0-9][a-z0-9\\-]*?\\.(com|org|net|edu|co))(\\/|$)\"\n    result = re.search(pattern, url)\n    return result[1]\n\nprint(extract_domain_name(url))",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 263,
            "material": "Lainnya",
            "instruction": "Use pandas in Python to aggregate a given dataset with 4 columns (A, B, C, D) into a single column.",
            "question": "import ___ as pd\n\ndata = [[0, 34, 2, 6], [1, 21, 9, 0]]\ndf = pd.DataFrame(data, columns = ['A', 'B', 'C', 'D'])\n\ndf['Aggregate'] = df.apply(lambda row: row.A + row.B + row.C + row.D, axis=1)\n\nprint(df)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 295,
            "material": "Lainnya",
            "instruction": "Modify the following Python code to generate more random numbers.",
            "question": "import ___\n\nx = random.randint(1, 10)\ny = random.randint(1, 10)\nz = random.randint(1, 10)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 304,
            "material": "Lainnya",
            "instruction": "Edit the following Python program to make a correct API request and parse the response.",
            "question": "import ___\n\nurl = 'https://api.example.com/users'\n\nheaders = {\n 'Authorization': 'Bearer YOUR_API_TOKEN',\n 'Content-Type': 'application/json',\n}\n\nresponse = requests.get(url, headers=headers).json()\n\nfor user in response['data']:\n print(user)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 322,
            "material": "Lainnya",
            "instruction": "Write a Python program to encrypt a plaintext using Advanced Encryption Standard (AES).",
            "question": "from Crypto.Cipher import ___ \n\nplaintext = \"This is a secret message\"\nkey = b\"Sixteen Byte Key\"\n\ncipher = AES.new(key, AES.MODE_ECB) \nencrypted_text = cipher.encrypt(plaintext.encode('utf-8')) \n\nprint(encrypted_text.hex())\n\n# Output\nc3a40f3dce503efa1f00561d60e579b9",
            "correct_answer": "AES",
            "duration": 20
        },
        {
            "question_id": 363,
            "material": "Lainnya",
            "instruction": "Automate this Excel task using Python.",
            "question": "import ___ as pd\n\n# Read data\ndf = pd.read_csv(\"data.csv\")\n\n# Perform tasks\ndf['result'] = df['column2'] + df['column2']\n\n# Write the result\ndf.to_csv(\"result.csv\", index=False)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 376,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python to scrape the content from a website",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\ndef scraper(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    for article in soup.find_all('article'):\n        print(article.text)\n\nif __name__ == \"__main__\":\n    scraper(\"https://www.example.com\")",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 397,
            "material": "Lainnya",
            "instruction": "Create a Python program to multiply a matrix by its inverse.",
            "question": "import ___ as np\n\ndef inverse_multiplication(matrix):\n    inverseM = np.linalg.inv(matrix) \n    result = np.matmul(matrix, inverseM) \n    return result\n\nmatrix = [[3, 4],\n          [2, 16]]\n\nresult = inverse_multiplication(matrix)\nprint(result)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 428,
            "material": "Lainnya",
            "instruction": "Develop a program in Python to extract the substring between two given strings",
            "question": "import ___\n\ninput_string = \"This is an example string\"\nstart_string = \"an\"\nend_string = \"string\"\n\n regex = re.compile(start_string + '(.*?)' + end_string)\nresult = re.search(regex, input_string) \nif result: \n    print(result.group(1))",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 462,
            "material": "Lainnya",
            "instruction": "Write a Python code snippet to create a shallow copy of the following dictionary: {\u2018a\u2019: 1, \u2018b\u2019: 2}.",
            "question": "import ___\n\noriginal_dict = {'a': 1, 'b': 2}\n\nshallow_copy_dict = copy.copy(original_dict)",
            "correct_answer": "copy",
            "duration": 20
        },
        {
            "question_id": 487,
            "material": "Lainnya",
            "instruction": "Create a Python script that prints the top three words from a given sentence.",
            "question": "import ___\n\nsentence = \"This is a really long sentence with many words.\"\n\n# Split the given sentence into a list of words\nwords = sentence.split(\" \")\n\n# Count the occurrence of each word\nword_freq = collections.Counter(words)\n\n# Print out the top three words\nfor word, count in word_freq.most_common(3):\n    print(f'{word}: {count}')",
            "correct_answer": "collections",
            "duration": 20
        },
        {
            "question_id": 500,
            "material": "Lainnya",
            "instruction": "Build a web scraper in Python to extract data from a given webpage.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# Make a request to the website and get the HTML\nurl = \"https://www.example.com\"\nresponse = requests.get(url)\nhtml = response.content\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract data from tags which contain specific class names\ndata = soup.find_all('div', {\"class\": \"example-class\"})",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 508,
            "material": "Lainnya",
            "instruction": "Write a Python program optimize the following code using functional programming.",
            "question": "from functools import ___\n\n# initialize the loop\nnum = 5\n\n# call reduce()\nsolution = reduce(lambda i, _: i - 1, range(num + 1))\n\n# print the result\nprint(solution)",
            "correct_answer": "reduce",
            "duration": 20
        },
        {
            "question_id": 514,
            "material": "Lainnya",
            "instruction": "Modify the following Python program to generate random numbers between 1 and 10 instead of 1 and 100.",
            "question": "import ___\n\nfor i in range(10):\n num = random.randint(1,10)\n print(num)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 528,
            "material": "Lainnya",
            "instruction": "Convert the following JSON to a python dictionary.",
            "question": "\"\"\"\nConvert the following JSON to a python dictionary.\n\"\"\"\nimport ___\n\njson_data = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"hobbies\": [\n        \"soccer\",\n        \"playing guitar\"\n    ]\n}\n\npython_dict =  json.loads(json.dumps(json_data))\nprint(python_dict)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 535,
            "material": "Lainnya",
            "instruction": "Develop a Python script to calculate the cosine similarity between two word vectors.",
            "question": "import ___ as np \n  \na = np.array([0.5, 0.2, 0.7, 0.8]) \nb = np.array([0.9, 0.6, 0.1, 0.2]) \n  \ndef cos_sim(a, b): \n    dot_product = np.dot(a, b) \n    norm_a = np.linalg.norm(a) \n    norm_b = np.linalg.norm(b) \n    return dot_product / (norm_a * norm_b) \n  \nresult = cos_sim(a, b) \nprint(result)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 571,
            "material": "Lainnya",
            "instruction": "Generate 3 random numbers within the specified range using Python.",
            "question": "import ___\n\nrandom_numbers = random.sample(range(0, 10), 3) \nprint(random_numbers)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 586,
            "material": "Lainnya",
            "instruction": "Generate a Python program that takes a sentence as input and prints out only the verbs.",
            "question": "import ___\n\ndef extract_verbs(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n    verbs = [word for word, pos in tags if pos.startswith('V')]\n    return verbs\n\nsentence = \"The cat jumped over the moon.\"\nverbs = extract_verbs(sentence)\nprint(verbs)",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 612,
            "material": "Lainnya",
            "instruction": "Convert a given SQL statement into a Python Pandas DataFrame.",
            "question": "import ___ as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book;\", conn)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 616,
            "material": "Lainnya",
            "instruction": "Construct a Python program that computes the area of a circle with the given radius.",
            "question": "import ___\n\ndef area_circle(radius):\n return math.pi * (radius ** 2)\n\narea = area_circle(radius)\nprint('The area of the circle is %.2f' % area)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 617,
            "material": "Lainnya",
            "instruction": "Improve the following Python script to load the data in the absence or presence of the header.",
            "question": "import ___ as pd\n\n#Variable to indicate presence of Header\nhas_header = False\n\n#Read CSV\ndata = pd.read_csv('mydata.csv',header=None) \n\n#Check for presence of Header\nif data.iloc[0,0] != 'Column1':\n  has_header = True\n\n#Read again with header\nif has_header:\n  data = pd.read_csv('mydata.csv')",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 694,
            "material": "Lainnya",
            "instruction": "Using Regular Expressions, create a Python program that finds all the words in a given sentence that end with 'ing'.",
            "question": "import ___\n \nsentence = \"This is a sentence containing a lot of words ending in 'ing'.\"\npattern = r\"\\w+ing\\b\"\n \nwords = re.findall(pattern, sentence)\n \nprint(words)\n \n# Output: ['containing', 'ending']",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 707,
            "material": "Lainnya",
            "instruction": "Generate a syntax to input random numbers into a python program",
            "question": "import ___\n\n# Generates N random numbers\nnumbers = [random.randint(0, N) for i in range(N)]",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 716,
            "material": "Lainnya",
            "instruction": "Modify the given Python program so that it checks the spelling of the given word using an external library.",
            "question": "import ___\n\nword = \"Hello\"\n\ncorrect_word = spellchecker.correction(word)\nif word != correct_word:\n print(\"Did you mean\", correct_word, \"?\")",
            "correct_answer": "spellchecker",
            "duration": 20
        },
        {
            "question_id": 728,
            "material": "Lainnya",
            "instruction": "Write a Python program to calculate the standard deviation of given data.",
            "question": "import ___\ndef calculate_std_dev(arr):\n\treturn statistics.stdev(arr)",
            "correct_answer": "statistics",
            "duration": 20
        },
        {
            "question_id": 747,
            "material": "Lainnya",
            "instruction": "Create a Python script to detect when a song has ended.",
            "question": "import ___\n \n# Define a song length\nsong_length = 300\n\n# Start the progress bar\nprogress_bar = 0\nfor x in range(0, song_length):\n    # Update the progress bar\n    progress_bar += 1\n    # Sleep a second\n    time.sleep(1)\n    print(\"Progress Bar: {}%\".format(progress_bar/song_length * 100))\n\n# Song has ended\nprint(\"Song Ended!\")",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 762,
            "material": "Lainnya",
            "instruction": "Develop a web scraper in Python that visits a website and retrieves the contents of the web page.",
            "question": "import ___\n\nurl = \"https://www.example.com\"\n\nresponse = requests.get(url)\nif response.status_code == 200:\n html = response.content\n print(html)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 796,
            "material": "Lainnya",
            "instruction": "Develop a python script that extracts the titles of all articles from a given website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# specify url\nurl = 'www.example.com'\n\n# fetch the page\nresponse = requests.get(url)\nhtml = response.content\n\n# parse page content\nsoup = BeautifulSoup(html)\n\n# extract titles\ntitles = []\nfor title in soup.find_all('title'):\n titles.append(title.text)\n\n# print titles\nprint(titles)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 797,
            "material": "Lainnya",
            "instruction": "Create a Python program to tokenize a sentence and calculate the frequency of each word in the sentence.",
            "question": "import ___\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\nwords = nltk.word_tokenize(sentence)\n\nword_freq = {}\n\nfor word in words:\n if word in word_freq:\n  word_freq[word] += 1\n else:\n  word_freq[word] = 1\n\nprint(word_freq)",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 811,
            "material": "Lainnya",
            "instruction": "Create a Python program to remove punctuation from a block of text.",
            "question": "import ___\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans(\"\",\"\", string.punctuation))\n\ntext = \"Wel,come to the wo,rld of 'programming'.\"\nprint(remove_punctuation(text))\nOutput:\nWelcome to the world of programming",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 823,
            "material": "Lainnya",
            "instruction": "Create a program that makes an HTTP request using Python and parses the response.",
            "question": "import ___\n\n# make HTTP request\nr = requests.get(\"https://www.example.com/userdata?query=example\")\nif r.status_code == 200:\n    # parse response\n    data = r.json()\n    # do something with the data\n    # ...",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 843,
            "material": "Lainnya",
            "instruction": "Write a Python program to calculate the roots of a quadratic equation.",
            "question": "import ___\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 851,
            "material": "Lainnya",
            "instruction": "Generate a Python program to generate random passwords of length n.",
            "question": "import ___\nimport random\n \ndef random_password(length):\n chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n random_password = ''.join(random.choice(chars) for i in range(length))\n return random_password\n  \nlength = 8\nprint(random_password(length))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 895,
            "material": "Lainnya",
            "instruction": "Design an API in Python to compare two strings and provide an output/ match score.",
            "question": "import ___\n\ndef compare_strings(string1, string2):\n    # Convert strings to lowercase\n    string1 = string1.lower()\n    string2 = string2.lower()\n\n    # Compute match score\n    score = difflib.SequenceMatcher(None, string1, string2).ratio()\n\n    # Return the match score\n    return score",
            "correct_answer": "difflib",
            "duration": 20
        },
        {
            "question_id": 924,
            "material": "Lainnya",
            "instruction": "Write some Python code to detect bias in text using the Gender Bias Detection software?",
            "question": "from gender_bias_detection import ___\n\ntext = \"The software requires a text string to query.\"\n\nbias_signal = detect_bias(text)\n\n# Checking is the detected bias is positive\nif bias_signal > 0:\n  print(\"The text contains gender bias.\")\nelse:\n  print(\"The text does not contain gender bias.\")",
            "correct_answer": "detect_bias",
            "duration": 20
        },
        {
            "question_id": 929,
            "material": "Lainnya",
            "instruction": "Utilize ajax to send a request to a given web page and write a Python script to parse the response.",
            "question": "import ___\n\nurl = \"www.example.com\"\n\ntry:\n    request = requests.get(url)  # Send ajax request\n    response = request.json()  # Get response in JSON\n    for data in response['data']:\n        # Do something with data  # Parse JSON response\nexcept Exception as e:\n    print(e)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 955,
            "material": "Lainnya",
            "instruction": "Generate a graphical representation of a network using Python and matplotlib.",
            "question": "import ___.pyplot as plt\n\nnode_list = []\nfor i in range(10):\n    node_list.append(i)\n\nG = nx.Graph()\nG.add_nodes_from(node_list)\n\nnx.draw(G, with_labels=True)\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 967,
            "material": "Lainnya",
            "instruction": "Create an algorithm in Python to generate random numbers between 1 and 10 without repetition.",
            "question": "import ___\n\ndef generate_random_numbers(n):\n result = random.sample(range(1, 11), n)\n return result\n\nrandom_numbers = generate_random_numbers(5)\nprint(random_numbers) # Example output: [4, 9, 2, 6, 8]",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 986,
            "material": "Lainnya",
            "instruction": "Implement a Python module that converts a given date to ISO format",
            "question": "import ___\n\ndef convertToISO(dateString):\n date = datetime.datetime.strptime(dateString, \"%d %B %Y\").isoformat()\n return date\n\n# test\ndateString = '25 December 2024'\nprint(convertToISO(dateString))\n\n# Output: 2024-12-25T00:00:00",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 1040,
            "material": "Lainnya",
            "instruction": "Write a Python script to perform linear regression on a given dataset.",
            "question": "import ___ as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[5, 6], [3, 4], [7, 9], [4, 5]])\ny = np.array([7, 5, 11, 7])\n\nmodel = LinearRegression().fit(x, y)\n\nprint(model.coef_)\nprint(model.intercept_)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 1052,
            "material": "Lainnya",
            "instruction": "Create a web service in Python that takes in a temperature value as input in Celsius and returns the equivalent value in Fahrenheit.",
            "question": "import ___\n\napp = flask.Flask(__name__)\n\n@app.route('/celsius-to-fahrenheit/<int:celsius>', methods=['GET'])\ndef celsius_to_fahrenheit(celsius):\n fahrenheit = celsius * 9/5 + 32\n return flask.jsonify({'celsius': celsius, 'fahrenheit': fahrenheit})\n \nif __name__ == '__main__':\n app.run()",
            "correct_answer": "flask",
            "duration": 20
        },
        {
            "question_id": 1072,
            "material": "Lainnya",
            "instruction": "Produce a Python script to convert a given Unix timestamp into human readable date format.",
            "question": "import ___\n\n# Unix timestamp in seconds\nunix_timestamp = 1545732721\n\n# Convert to readable date format\ntimestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(unix_timestamp))\n\nprint('Human readable date format:', timestamp)",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 1090,
            "material": "Lainnya",
            "instruction": "Find the 5 most frequent words in the given text.",
            "question": "from collections import ___\n\ntext = \" Python is a high-level programming language.\"\nwords = text.split()\n\nfrequencies = Counter(words)\n\n# printing five most frequent words \nfrequent_words = frequencies.most_common(5)\n\nprint(frequent_words)",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 1099,
            "material": "Lainnya",
            "instruction": "Develop a Python script which extracts data from a given website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract all Anchor Tags\nlinks = soup.find_all('a')\n\n# Extract all the contents of Anchors\nfor link in links:\n    print(link.text, link.get('href'))",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1109,
            "material": "Lainnya",
            "instruction": "Write code to establish a connection between a Python backend and a MySQL database.",
            "question": "import ___.connector \n  \n#Create MySQL Connection \nconnection = mysql.connector.connect(host = Host, database = Database, user = Username, password = Password) \n\n#Check whether connection is established or not\nif connection.is_connected(): \n    print(\"Connection established successfully\")",
            "correct_answer": "mysql",
            "duration": 20
        },
        {
            "question_id": 1112,
            "material": "Lainnya",
            "instruction": "Replace the given SQL query with a Python program to calculate the sum of all the column values.",
            "question": "import ___ as pd\n\ndata = pd.read_sql\n\n  query = \"SELECT * FROM table\"\n\ndf = pd.read_sql(query, conn)\n\nsum_column = df['column'].sum()\n\nprint(sum_column)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 1114,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate N random numbers.",
            "question": "import ___\n\nrandom_numbers = []\n\nfor _ in range(5):\n  random_numbers.append(random.random()) \n\nprint(random_numbers)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 1182,
            "material": "Lainnya",
            "instruction": "Develop a Python solution to identify parts of speech of a given sentence.",
            "question": "import ___\n\nsentence = \"I like apples.\"\nwords = nltk.word_tokenize(sentence)\ntagged_words = nltk.pos_tag(words)\n\nparts_of_speech = dict()\nfor word, tag in tagged_words:\n  parts_of_speech[word] = tag\n\nprint(parts_of_speech)\n# Output: {'I': 'PRP', 'like': 'VBP', 'apples': 'NNS'}",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 1211,
            "material": "Lainnya",
            "instruction": "Create a python program to convert a date from one format to another.",
            "question": "import ___\n\ndef convert_date_format(date_str, old_format, new_format): \n  dt_obj = datetime.datetime.strptime(date_str, old_format) \n  return dt_obj.strftime(new_format) \n\nprint(convert_date_format(\"May 14, 2020\", \"%b %d, %Y\", \" %d-%m-%Y\"))",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 1226,
            "material": "Lainnya",
            "instruction": "Develop a Python script to scrape all HTML elements from a given website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# Request the HTML page\nurl = 'https://www.example.com/'\npage = requests.get(url)\n\n# Create the Beautiful Soup object\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Fetch all HTML elements\nelements = soup.find_all()\n\n# Output elements\nfor element in elements:\n    print(element)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1227,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a password with a given length and characters.",
            "question": "import ___\n\ndef generate_password(length, characters):\n    password = ''\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nprint(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 1238,
            "material": "Lainnya",
            "instruction": "Implement a decision tree model in Python to classify given data.",
            "question": "#importing necessary libraries\nfrom sklearn import ___\nimport numpy as np\n\n#data\nX = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]])\ny = np.array([0, 1])\n\n#model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n#predicting\nx_test = np.array([[1, 0, 0, 0, 1]])\nprediction = clf.predict(x_test)\n\n#result\nprint(prediction)",
            "correct_answer": "tree",
            "duration": 20
        },
        {
            "question_id": 1240,
            "material": "Lainnya",
            "instruction": "Given the following data, adjust the Python code so that it outputs a JSON representation of the data.",
            "question": "import ___\n\ndata = [\n  {\n    \"id\": 5,\n    \"name\": \"John\"\n  },\n  {\n    \"id\": 7,\n    \"name\": \"Jack\"\n  },\n  {\n    \"id\": 9,\n    \"name\": \"James\"\n  }\n]\n\ndata_json = json.dumps(data, indent=4)\nprint(data_json)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 1292,
            "material": "Lainnya",
            "instruction": "Understand the meaning of the given data and create a classification model in Python.",
            "question": "# Import necessary library \nfrom sklearn import ___\n\n# Create a feature and label array \nX = [[1], [2], [3], [4], [5]] \nY = [1,2,1,2,1]\n\n# Set up the svm model \nclf = svm.SVC(kernel='linear')\n\n# Train the model \nclf.fit(X, Y)\n\n# Test the model \npredictions = clf.predict([[3]])\nprint(predictions)",
            "correct_answer": "svm",
            "duration": 20
        },
        {
            "question_id": 1297,
            "material": "Lainnya",
            "instruction": "Convert the following SQL query into a python pandas dataframe.",
            "question": "import ___ as pd\n\n# read the books table\ndf = pd.read_sql(\"SELECT * from books\", connection)\n\n# filter for rows with matching author\ndf_filtered = df[df['author'].str.contains(\"Rowling\")]\n\n# print the results\nprint(df_filtered)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 1300,
            "material": "Lainnya",
            "instruction": "Generate a voltage signal with random noise using a Python script.",
            "question": "import ___ as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 1327,
            "material": "Lainnya",
            "instruction": "Write a Python script to download the source code of a website.",
            "question": "import ___\n\n# send the request \nresponse = requests.get(\"http://example.com\")\n\n# get the source code of the website\ndata = response.text \n\n# write the source code into a file\nwith open('example_source.txt', 'w') as file:\n file.write(data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1351,
            "material": "Lainnya",
            "instruction": "Create a Python program that uses regular expression to find and extract certain information from a text.",
            "question": "import ___\n\ntext = \"The customer's address is 123 Main Street, Anytown, USA.\"\n\naddress_pattern = re.compile(r'(\\d+\\s*(?:[A-Za-z]+\\s*)+),\\s*([A-Za-z\\s]+),\\s*([A-Z]{2})')\n\nmatch = address_pattern.search(text)\n\nif match:\n street = match[1]\n city = match[2]\n state = match[3]\n\nprint(f'{street}, {city}, {state}')",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 1357,
            "material": "Lainnya",
            "instruction": "Using Python, make a program which will generate a random password of a given length.",
            "question": "import ___\nimport random\n\ndef get_password(length):\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(length))\n    print (password)\n\nget_password(7)",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 1360,
            "material": "Lainnya",
            "instruction": "Translate the following SQL query into Python code.",
            "question": "import ___ as pd\n\ndf = pd.read_sql_query(\"SELECT Customer_Name, COUNT(Order_Id) AS Number_of_Orders FROM Orders GROUP BY Customer_Name\", con)\nresult = df.to_dict('records')",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 1361,
            "material": "Lainnya",
            "instruction": "Generate a Python program to calculate the amount of time the user has been working on a specific task, given the start time and the current time.",
            "question": "import ___\n\ndef get_time_difference(start_time, current_time):\n    start_time = datetime.datetime.strptime(start_time, \"%H:%M%p\")\n    current_time = datetime.datetime.strptime(current_time, \"%H:%M%p\")\n    return current_time - start_time",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 1367,
            "material": "Lainnya",
            "instruction": "Complete this Python code to to generate a random password using a given length.",
            "question": "import ___\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation \n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nprint(generate_password(length))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 1372,
            "material": "Lainnya",
            "instruction": "Edit the given Python code to format the output as a table using tabulate.",
            "question": "import ___\n\nfruits = [\"apple\", \"orange\", \"pineapple\", \"melon\"] \ntable = [(fruit,) for fruit in fruits] \nprint(tabulate.tabulate(table, headers=[\"Fruits\"])) \n# Output: \n# Fruits\n# apple\n# orange\n# pineapple\n# melon",
            "correct_answer": "tabulate",
            "duration": 20
        },
        {
            "question_id": 1382,
            "material": "Lainnya",
            "instruction": "Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.",
            "question": "import ___ as np\nfrom sklearn import linear_model\n\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\ny = np.array([75000, 43000, 59000, 32000, 85000])\n\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y)\n\nprediction = model.predict([[2200, 3]])",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 1388,
            "material": "Lainnya",
            "instruction": "Complete the Python program to automatically add 3 months to a date.",
            "question": "import ___\ndate_str = '2020-01-31'\n\ndef add_three_months(date_str):\n    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n    d = d + datetime.timedelta(days=90)\n    date_str = d.strftime('%Y-%m-%d')\n    return date_str",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 1390,
            "material": "Lainnya",
            "instruction": "Write a machine learning algorithm in Python to find the nearest neighbors of a given point.",
            "question": "from sklearn.neighbors import ___\n\ndef nearest_neighbors(point):\n    neighbors = NearestNeighbors(n_neighbors=1).fit(point) \n    return neighbors.kneighbors([point], return_distance=False)[0]",
            "correct_answer": "NearestNeighbors",
            "duration": 20
        },
        {
            "question_id": 1408,
            "material": "Lainnya",
            "instruction": "Write a Python program to create a bar chart from a given dataset.",
            "question": "import ___.pyplot as plt \n\n# Data to plot \ndata = [5, 8, 10, 12, 3, 6] \n\n# Plot the data \nplt.bar(data, data) \n\n# Set labels \nplt.xlabel('Data') \nplt.ylabel('Values') \n\n# Title \nplt.title('Bar Chart of Data Set') \n\n# Show the plot \nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 1433,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python to scrape product prices from a given URL.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# make the request\nURL = \"https://example.com/product-list\"\nresponse = requests.get(URL)\n\n# parse the HTML\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# find all product prices on the page\nprices = soup.find_all('span', class_=\"price\")\n\n# print out all the prices\nfor price in prices:\n print(price.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1445,
            "material": "Lainnya",
            "instruction": "Modify the following Python program to explore and retrieve data from a dataset using Pandas.",
            "question": "import ___ as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head())\nprint(df.info())\nprint(\"Average age of passengers:\", df['Age'].mean())\nprint(\"Number of female passengers:\", df[df['Sex'] == 'female'].shape[0])\nprint(\"Oldest passenger:\", df.loc[df['Age'].idxmax()])",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 1457,
            "material": "Lainnya",
            "instruction": "Create a WebScraper in Python that extracts the titles and links from a given URL.",
            "question": "from bs4 import ___\nimport requests\n\nurl = 'https://www.example.com'\nr = requests.get(url)\n\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Extract titles and links\ntitles = []\nlinks = []\nfor link in soup.find_all('a'):\n titles.append(link.get('title'))\n links.append(link.get('href'))\n\nprint(titles, links)",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 1471,
            "material": "Lainnya",
            "instruction": "Propose a solution to fetch an online catalog of products and display them in a tabular format using Python.",
            "question": "import ___\nimport pandas as pd\n\n# Set the request URL\nurl = \"http://example.com/products\"\n\n# Send the request and retrieve the data\ndata = requests.get(url).json()\n\n# Convert the data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Print the resulting table\nprint(df)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1486,
            "material": "Lainnya",
            "instruction": "Generate a python script that plans a route from point A to point B.",
            "question": "# import ___\nimport math\n\n# function to calculate the distance\ndef route_distance(A, B):\n    dX = B[0] - A[0]\n    dY = B[1] - A[1]\n    return math.sqrt(dX * dX + dY * dY)\n\n# Driver code \nA = (1.2, -2.6) \nB = (7.9, 5.3)\n\ndist = route_distance(A, B)\n\nprint(\"Distance from A to B is:\", dist)",
            "correct_answer": "modules",
            "duration": 20
        },
        {
            "question_id": 1496,
            "material": "Lainnya",
            "instruction": "Develop a Python script to extract the specific keyword from the given URL.",
            "question": "import ___\n\nurl = \"https://www.test.com/where-is-the-key\"\nkeyword = \"key\"\n\nmatch = re.search(f'{keyword}', url)\nif match:\n    print(f'{keyword} found at starting index: {match.start()}')\nelse:\n    print(f'{keyword} not found')",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 1505,
            "material": "Lainnya",
            "instruction": "Develop a Python program to fetch the website users of an online store.",
            "question": "import ___\n\nurl = 'https://www.example.com/users'\nresponse = requests.get(url)\ndata = response.json()\n\nfor user in data:\n    print(user['name'])",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1541,
            "material": "Lainnya",
            "instruction": "Construct a parser in Python to identify the parts of speech in a given sentence.",
            "question": "import ___\n\nnlp = spacy.load('en_core_web_sm')\n\n# Define the sentence to be parsed\nsentence = 'This is a great day.'\n\n# Create a Doc object\ndoc = nlp(sentence)\n\n# Print the parts of speech\nfor token in doc:\n    print(token.text, token.pos_)\n\n# Output:\n# This DET\n# is VERB\n# a DET\n# great ADJ\n# day NOUN\n# . PUNCT",
            "correct_answer": "spacy",
            "duration": 20
        },
        {
            "question_id": 1546,
            "material": "Lainnya",
            "instruction": "Write a Python program to retrieve binary data from a given URL.",
            "question": "import ___ \n  \ndef getFileData(url):\n  # Get binary data\n  r = requests.get(url)\n  return r.content\n\nurl = \"https://example.com/sample.txt\"\ndata = getFileData(url)\n\nprint(data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1568,
            "material": "Lainnya",
            "instruction": "Write a Python program to parse an XML document.",
            "question": "\"\"\"\nParse an XML document\n\"\"\"\n\nimport ___.etree.ElementTree as ET\n\n# Parse the XML file\nroot = ET.parse('note.xml').getroot()\n\n# Print out the XML elements\nfor item in root:\n    print(f\"{item.tag}: {item.text}\")",
            "correct_answer": "xml",
            "duration": 20
        },
        {
            "question_id": 1592,
            "material": "Lainnya",
            "instruction": "Create a program in Python to calculate the Euclidean distance between two points.",
            "question": "import ___\n\nx1 = 2\ny1 = 3\nx2 = 6\ny2 = 8\ndistance = math.sqrt( (x2 - x1)**2 + (y2 - y1)**2 )\n\nprint(distance)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 1596,
            "material": "Lainnya",
            "instruction": "Change the following Pythoncode to display \"Hello, World!\" on the web page:",
            "question": "from flask import ___\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n\treturn \"Hello, World!\"\n\nif __name__ == \"__main__\":\n\tapp.run()",
            "correct_answer": "Flask",
            "duration": 20
        },
        {
            "question_id": 1606,
            "material": "Lainnya",
            "instruction": "Create a Python script to read data from a database.",
            "question": "import ___\n\nconnection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432')\n\ncursor = connection.cursor()\n\ncursor.execute('SELECT * FROM customers')\n\nrows = cursor.fetchall()\n\nfor row in rows:\n    print(row)\n    \ncursor.close()",
            "correct_answer": "psycopg2",
            "duration": 20
        },
        {
            "question_id": 1616,
            "material": "Lainnya",
            "instruction": "Create a Python script to extract the title of a web page.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# Function to extract the title of a web page\ndef extract_title(url):\n    response = requests.get(url)\n    html = response.text\n\n    soup = BeautifulSoup(html, 'html.parser')\n    return soup.title.string\n\nurl = 'https://www.example.com'\ntitle = extract_title(url)\nprint(title)  # Output 'Example Domain'",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1621,
            "material": "Lainnya",
            "instruction": "Create a program to convert a text document to an HTML webpage using Python.",
            "question": "from bs4 import ___\n\n# Read and parse the document\nwith open('sample.txt', 'r') as file:\n  content = file.read()\n\n# Create the HTML\nsoup = BeautifulSoup(content, 'html.parser')\nhtml_content = soup.prettify()\n\n# Write to the file\nwith open('sample.html', 'w') as file:\n  file.write(html_content)",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 1626,
            "material": "Lainnya",
            "instruction": "Write a Python program that will calculate the correlation between two different datasets.",
            "question": "import ___ as np\n\ndata1 = [1,2,3,4,5]\ndata2 = [2,4,6,8,10]\n\ncorrelation = np.corrcoef(data1, data2)[0][1]\nprint(correlation)\n\n# Output\n0.98198050606",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 1643,
            "material": "Lainnya",
            "instruction": "Generate a Python program that requests a movie title and prints the synopsis of the movie.",
            "question": "import ___\n\n# Get the movie title from user input\ntitle = input(\"Enter a movie title: \")\n\n# Make a request to the OMDb API\nurl = \"http://www.omdbapi.com/?t=\" + title + \"&plot=full&apikey=<YOUR_API_KEY>\n\nresponse = requests.get(url)\ndata = response.json()\n\n# Print the synopsis\nprint(\"Synopsis: \" + data[\"Plot\"])",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1644,
            "material": "Lainnya",
            "instruction": "Create a script in Python to find the square root of a number.",
            "question": "import ___\nx = 81.0\n# calculate the square root\nprint('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 1650,
            "material": "Lainnya",
            "instruction": "Generate a Python script that will extract all URLs from the given text.",
            "question": "import ___\n\ntext = \"The websites I like to visit are https://www.google.com and https://www.facebook.com\"\n\nurl_list = re.findall(r'(https?://\\S+)', text)\n\nprint(url_list)",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 1668,
            "material": "Lainnya",
            "instruction": "Create a script in Python that checks that a given URL is active and responding.",
            "question": "import ___\n\nurl = \"http://www.example.com\"\n\ntry:\n request = requests.get(url)\n if request.status_code == 200:\n print(\"URL is active and responding\")\nexcept Exception as e:\n print(f\"Error: {e}\")",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 1670,
            "material": "Lainnya",
            "instruction": "Convert the given JSON data into python dictionary.",
            "question": "import ___ \n\njson_data = '{\"key\": \"value\"}'\n\npydict = json.loads(json_data) \nprint (\"Python dictionary:\", pydict)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 1672,
            "material": "Lainnya",
            "instruction": "Construct a Python program to perform principal component analysis",
            "question": "from sklearn.decomposition import ___\n\ndef pca_transformation(X):\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    return X_pca",
            "correct_answer": "PCA",
            "duration": 20
        },
        {
            "question_id": 1681,
            "material": "Lainnya",
            "instruction": "Create a python program to remove the python comments from a text",
            "question": "import ___\n\ndef remove_comments(text):\n    regex = r\"(\\\".*?\\\"|\\'.*?\\')|(/\\*.*?\\*/|\\#[^\\r\\n]*$)\"\n    clean_text = re.sub(regex, \"\", text, 0, re.MULTILINE).strip()\n    return clean_text\n\nremove_comments(\"# This is a python comment\\nprint(\\\"Hello world\\\") # This is another comment\")\n#output:\nprint(\"Hello world\")",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 1717,
            "material": "Lainnya",
            "instruction": "Compute a matrix multiplication of two given matrices A and B in Python.",
            "question": "import ___ as np \n\nA = np.array([[1,2,3], [4,5,6]])\nB = np.array([[1,2], [3,4], [5,6]])\n\nC = np.matmul(A, B)\n\nprint(C)\n# Output \n# [[22 28], \n#  [49 64]]",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 1737,
            "material": "Lainnya",
            "instruction": "Write a Python program to create a random password of length 10.",
            "question": "import ___ \nimport random\n\ndef generate_password(length): \n    password = \"\" \n    for i in range(length): \n        character = random.choice(\n            string.ascii_letters + \n            string.digits + \n            string.punctuation)\n        password += character\n    return password\n\npassword = generate_password(10) \nprint(password)",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 1766,
            "material": "Lainnya",
            "instruction": "Create a visualization using the Python library matplotlib that compares the sales of two products.",
            "question": "import ___.pyplot as plt\n\nproduct1 = [10, 15, 12, 18, 20]\nproduct2 = [5, 8, 9, 10, 15]\n\nplt.plot(product1, marker='o', label='Product 1')\nplt.plot(product2, marker='o', label='Product 2')\n\nplt.title('Comparing sales of two products')\nplt.xlabel('Products')\nplt.ylabel('Sales')\nplt.legend()\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 1773,
            "material": "Lainnya",
            "instruction": "Develop a Python program to output the most common elements in a given collection",
            "question": "from collections import ___ \n\ndef most_common (collection): \n\tdata = Counter(collection) \n\treturn data.most_common(1)[0] \n\ncollection = [1, 4, 5, 3, 4, 6, 5, 3, 4]\nassert most_common(collection) == (4, 3) \nprint (\"Most Common element is: \",most_common(collection))",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 1805,
            "material": "Lainnya",
            "instruction": "Write a Python program to parse a web page and extract text from its HTML tags.",
            "question": "from bs4 import ___\ndef parse_web_html(html):\n soup = BeautifulSoup(html, 'html.parser')\n text = soup.get_text()\n return text",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 1815,
            "material": "Lainnya",
            "instruction": "Given the following data points, generate a polynomial equation using Python.",
            "question": "import ___ as np\n\nx = np.array([-2, 0, 2])\ny = np.array([1, 4, 9])\n\nz = np.polyfit(x, y, 2)\nequation = np.poly1d(z)\n\nprint(equation)\n\n# Output: \n#       2\n# -6.66 x + 5.0 x + 1.0",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 1825,
            "material": "Lainnya",
            "instruction": "Create a Python script to identify the frequency of words in a sentence.",
            "question": "from collections import ___\n\nsentence = \"This is a test sentence\"\n\n#split the sentence into words\nwords = sentence.split()\n\n#count the frequency of each word\nword_frequency = Counter(words)\n\n#print the results\nprint(word_frequency)",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 1829,
            "material": "Lainnya",
            "instruction": "Write a Python program to display a histogram of the frequencies of words in a given sentence.",
            "question": "import ___.pyplot as plt \n  \n# Data to plot \nlabels = 'My', 'name', 'is', 'John'\nsizes = [1, 1, 1, 1]\n\n# Plot\nplt.pie(sizes, labels=labels, \n        autopct='%1.1f%%', shadow=True, startangle=90) \n\nplt.axis('equal') \n\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 1835,
            "material": "Lainnya",
            "instruction": "Automate the following UNIX command using  python.",
            "question": "import ___\n\npassword = 'password'\nos.system('echo ' + password + ' | sudo -S apt-get install vim')",
            "correct_answer": "os",
            "duration": 20
        },
        {
            "question_id": 1862,
            "material": "Lainnya",
            "instruction": "Transform the following shell script into a python program.",
            "question": "import ___\nimport os\n\nfor filename in os.listdir('.'):\n    if filename.endswith('.txt'):\n        print('Processing ' + filename + ' file...')\n        with open(filename, 'r') as f:\n            print(f.read())",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 1866,
            "material": "Lainnya",
            "instruction": "Can you provide a machine learning algorithm in Python that performs sentiment analysis on a given text?",
            "question": "from nltk.sentiment.vader import ___\n\nsentences = [\"This product is simply incredible!\"]\n\nanalyzer = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    scores = analyzer.polarity_scores(sentence)\n    print(\"{:-<40} {}\".format(sentence, str(scores)))",
            "correct_answer": "SentimentIntensityAnalyzer",
            "duration": 20
        },
        {
            "question_id": 1872,
            "material": "Lainnya",
            "instruction": "Create a Python NLTK program to tokenize a given English text.",
            "question": "import ___\n\n# Input text\ntext = \"This is a sample sentence for tokenizing.\"\n\n# Tokenize sentences\ntokens = nltk.word_tokenize(text)\n\n# Print tokens\nprint(tokens)\n\n# Output\n['This', 'is', 'a', 'sample', 'sentence', 'for', 'tokenizing', '.']",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 1882,
            "material": "Lainnya",
            "instruction": "Develop a program to remove all the comments from a Python code.",
            "question": "import ___\n\ndef main():\n    print(\"Hello World!\")",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 1912,
            "material": "Lainnya",
            "instruction": "Create a command line Python script to generate random numbers within a given range.",
            "question": "import ___\n\nmin_num = 10\nmax_num = 25\n \n# Generate a random number\nrand_num = random.randint(min_num, max_num)\n \n# Print the random number\nprint(rand_num)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 1970,
            "material": "Lainnya",
            "instruction": "Create a DataFrame in Python Pandas using given dates, numbers, and strings.",
            "question": "import ___ as pd\n\n# Create the dataframe\ndf = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})\n\ndf\n   date  number string\n0  2013-01-01       1      a\n1  2013-01-02       2      b\n2  2013-01-03       3      c",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 1975,
            "material": "Lainnya",
            "instruction": "Optimize a Python program using multiprocessing.",
            "question": "from multiprocessing import ___\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_numbers(n):\n    primes = []\n    with Pool(processes=4) as pool:\n        primes = list(pool.map(is_prime, range(2, n)))\n    return primes",
            "correct_answer": "Pool",
            "duration": 20
        },
        {
            "question_id": 1988,
            "material": "Lainnya",
            "instruction": "Create a Python program to parse a domain name and extract important information.",
            "question": "import ___\n\ndef parse_domain_name(name):\n    \"\"\"Parses a domain name and extracts information such as the subdomain and the root domain.\"\"\"\n    extract = tldextract.extract(name)\n    subdomain = extract.subdomain\n    root_domain = extract.domain + '.' + extract.suffix\n \n    return subdomain, root_domain",
            "correct_answer": "tldextract",
            "duration": 20
        },
        {
            "question_id": 1989,
            "material": "Lainnya",
            "instruction": "Create a Python code to decode an URL.",
            "question": "import ___.parse\n\ndef decode_url(url):\n parsed_url = urllib.parse.urlparse(url)\n return urllib.parse.parse_qs(parsed_url.query)\n\ndecode_url(\"http://www.example.com/?param1=hello&param2=world\")",
            "correct_answer": "urllib",
            "duration": 20
        },
        {
            "question_id": 1995,
            "material": "Lainnya",
            "instruction": "Construct a python visualization to display a bar chart of the results of some data.",
            "question": "import ___.pyplot as plt\n\nwords = [\"word1\", \"word2\", \"word3\", \"word4\"]\nfrequencies = [5, 8, 3, 2]\n\nplt.bar(words, frequencies)\nplt.title(\"Word Frequency Chart\")\nplt.xlabel(\"Words\")\nplt.ylabel(\"Frequency\")\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 2007,
            "material": "Lainnya",
            "instruction": "Write a Python program to classify a given sentence based on its sentiment.",
            "question": "from textblob import ___\n\ninput_sentence = \"I hate Mondays\"\nsentiment = TextBlob(input_sentence).sentiment.polarity\n\nif sentiment > 0:\n    print(\"The sentiment is 'positive'\")\nelif sentiment == 0:\n    print(\"The sentiment is 'neutral'\")\nelse:\n    print(\"The sentiment is 'negative'\")",
            "correct_answer": "TextBlob",
            "duration": 20
        },
        {
            "question_id": 2015,
            "material": "Lainnya",
            "instruction": "Write a Python program to implement a decision tree using a given dataset.",
            "question": "import ___ as np\nfrom sklearn import tree\n\n# Load the data\nX = np.loadtxt('data.txt', delimiter=',')\n\n# Create a decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# print the model tree \ntree.export_graphviz(clf, out_file=\"model.dot\")",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 2018,
            "material": "Lainnya",
            "instruction": "Implement webscraping with Python to extract content from a given website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# Fetch the website content\nlink = \"https://example.com\"\ndata = requests.get(link)\n\n# Parse the HTML content\nsoup = BeautifulSoup(data.text, 'html.parser')\n\n# Extract all the <p> tags\ncontent = soup.find_all('p')\n\n# Print the content\nfor item in content:\n    print(item.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2062,
            "material": "Lainnya",
            "instruction": "Convert the given JSON data into Python dictionary.",
            "question": "import ___\n\ndata = '{\"name\": \"John\", \"age\": 30, \"hobby\": \"running\"}'\ndict_data = json.loads(data)\n\nprint(dict_data)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 2093,
            "material": "Lainnya",
            "instruction": "Can you create a web scraper in Python to extract the titles of articles from a newspaper website?",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com/newspaper\"\n\n# fetch data from the given URL\nr = requests.get(url)\n\n# create a BeautifulSoup object\nsoup = BeautifulSoup(r.content, \"lxml\")\n\n# extract the title of all articles\nfor article_title in soup.find_all('h3', class_='title'):\n    print(article_title.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2111,
            "material": "Lainnya",
            "instruction": "Create a web scraper with Python that collects all the titles of posts from a website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\npost_titles = [title.text for title in soup.find_all('h2', class_='post-title')]\n\nfor post_title in post_titles:\n print(post_title)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2117,
            "material": "Lainnya",
            "instruction": "Generate a Python program that creates a word cloud from a given text.",
            "question": "import ___.pyplot as plt\nfrom wordcloud import WordCloud\n \n# Read the whole text.\ntext = 'The quick brown fox jumps over the lazy dog.'\n \n# Generate a word cloud image\nwordcloud = WordCloud().generate(text)\n \n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 2124,
            "material": "Lainnya",
            "instruction": "Generate a python program to create a Pandas DataFrame using the following input data.",
            "question": "import ___ as pd\n\n# Create the data frame\ndata_frame = pd.DataFrame(data)\n  \n# Print the data frame\nprint(data_frame)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2136,
            "material": "Lainnya",
            "instruction": "Generate Python code to tokenize the given text.",
            "question": "import ___\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2151,
            "material": "Lainnya",
            "instruction": "Create a Python script to scrape the HTML of a given web page and extract all of its headings and paragraphs.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n\nurl = 'url'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nheadings = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\nfor heading in headings:\n print(heading.text)\n\nparagraphs = soup.find_all('p')\nfor paragraph in paragraphs:\n print(paragraph.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2155,
            "material": "Lainnya",
            "instruction": "Create a Python program to extract the top 10 words from a text.",
            "question": "import ___\nfrom collections import Counter\n\ndef get_top_words(txt):\n    words = re.findall(r'\\w+', txt.lower())\n    return Counter(words).most_common(10)\n\nprint(get_top_words('My name is John and I work as a software engineer.'))\n# Output: [('i', 2), ('a', 1), ('as', 1), ('engineer', 1), ('john', 1), ('name', 1), ('software', 1), ('work', 1)]",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2161,
            "material": "Lainnya",
            "instruction": "Design a Python script to generate a report containing summaries of the data in a table.",
            "question": "import ___ as pd \n\n# Load data from the orders table \norders = pd.read_csv('orders.csv')\n\n# Generate summary statistics for the orders table \nsummary_stats = orders.describe()\n\n# Generate a report containing summary statistics \nreport = open('report.html', 'w') \nreport.write(summary_stats.to_html()) \nreport.close()",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2170,
            "material": "Lainnya",
            "instruction": "Write a python script to get the filename from the given path",
            "question": "import ___\n\ndef get_filename_from_path(path):\n    return os.path.basename(path)\n\nfilename = get_filename_from_path('/Users/john/Documents/Github/myproject/myfile.py')\nprint(filename)",
            "correct_answer": "os",
            "duration": 20
        },
        {
            "question_id": 2172,
            "material": "Lainnya",
            "instruction": "Update the following Python program to validate a phone number.",
            "question": "import ___\n\nphone = \"404-999-9999\"\n\npattern = r\"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\"\n\nresult = re.match(pattern, phone)\n\nif result and len(phone) == 12:\n print(\"Valid phone number\")\nelse:\n print(\"Invalid phone number\")",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2177,
            "material": "Lainnya",
            "instruction": "Optimize an existing Python script by improving its runtime performance.",
            "question": "import ___ \n\nstart = time.time()\n\ndef foo(): \n for i in range(1000): \n  print('Hello World', i)\n\nfoo()\n\nend = time.time()\n\nprint('Time Taken:', end - start)",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 2179,
            "material": "Lainnya",
            "instruction": "Write a python program to create a connection to a given database.",
            "question": "import ___\n\n# Create connection to database\nconn = pymysql.connect(host=\"localhost\",\n                       user=\"admin\",\n                       passwd=\"admin123\",\n                       db=\"test\")\n\n# Create a cursor and execute a query\ncur = conn.cursor()",
            "correct_answer": "pymysql",
            "duration": 20
        },
        {
            "question_id": 2204,
            "material": "Lainnya",
            "instruction": "Write a Python script to download the html content of a given webpage",
            "question": "import ___\n\nurl = 'https://www.example.com/'\nresp = requests.get(url)\nhtml = resp.content",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2229,
            "material": "Lainnya",
            "instruction": "Write a command line script to calculate the total number of people who attended a concert.",
            "question": "#!/usr/bin/env python\n\nimport ___\n\ntotal_attendees = 0\nwith open('attendance.csv', 'r') as csv_file:\n    csv_reader = csv.reader(csv_file)\n    for row in csv_reader:\n        total_attendees += 1\n\nprint(f'Total Attendees: {total_attendees}')",
            "correct_answer": "csv",
            "duration": 20
        },
        {
            "question_id": 2234,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a dataframe from a given JSON response.",
            "question": "import ___ as pd\n\njson_data = {\"name\": \"John\", \"age\": 30, \"job\": \"Engineer\", \"salary\": 5000}\n\n# Convert the data into a dataframe\ndf = pd.DataFrame(json_data, index=[0])\n\nprint(df)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2288,
            "material": "Lainnya",
            "instruction": "Write a Python code that gives the output of all possible combinations of given elements.",
            "question": "from itertools import ___\n\ninput_list = [1, 2, 3]\nresult = list(combinations(input_list, 3))\n\nfor combination in result:\n    print(combination)",
            "correct_answer": "combinations",
            "duration": 20
        },
        {
            "question_id": 2308,
            "material": "Lainnya",
            "instruction": "Create a machine learning algorithm in Python to classify a given dataset.",
            "question": "from sklearn.model_selection import ___\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(x_train, y_train)\npredictions = clf.predict(x_test)",
            "correct_answer": "train_test_split",
            "duration": 20
        },
        {
            "question_id": 2334,
            "material": "Lainnya",
            "instruction": "Write a Python script to fetch the sale price of a product from an online store.",
            "question": "import ___\nurl = f'https://www.productstore.com/ProductID={ProductID}&format=json'\n\nresp = requests.get(url)\ndata = resp.json()\nsales_price = data['salesPrice']\nprint('The sale price of the product is {}'.format(sales_price))",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2343,
            "material": "Lainnya",
            "instruction": "Create a histogram of the following data using Python.",
            "question": "import ___.pyplot as plt\n\ndata = [2, 3, 4, 6, 7, 8, 9, 10]\n\nplt.hist(data)\nplt.title('Histogram of Wind Direction')\nplt.xlabel('Direction (degrees)')\nplt.ylabel('Frequency')\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 2358,
            "material": "Lainnya",
            "instruction": "Write a Python program to classify a dataset with 6 classes.",
            "question": "import ___ as pd\n\n# Load the dataset \ndf = pd.read_csv('dataset.csv')\n\n# Split the dataset into features and labels\nX = df.drop('label', axis=1).values\ny = df['label'].values\n\n# Train the model\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Make predictions on the dataset\npredictions = model.predict(X)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2373,
            "material": "Lainnya",
            "instruction": "Develop a biopython program which counts the number of occurrences of a given DNA sequence.",
            "question": "from Bio.Seq import ___\nfrom Bio import SeqIO\n\nseq = Seq(\"ATGGGCTAG\")\n\n# Count the occurrence of the DNA sequence\ncount = seq.count_overlap(seq)\n\nprint(count)",
            "correct_answer": "Seq",
            "duration": 20
        },
        {
            "question_id": 2378,
            "material": "Lainnya",
            "instruction": "Design a python program to extract URLs from a website.",
            "question": "from bs4 import ___\nimport requests\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nlinks = soup.select('a[href]')\nfor link in links:\n    print(link['href'])",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 2379,
            "material": "Lainnya",
            "instruction": "Modify a Python program to generate output in JSON format.",
            "question": "import ___\n\ndictionary = {\n   \"name\": \"John\",\n   \"age\": 30,\n   \"car\": [\"Ford\", \"BMW\", \"Fiat\"]\n}\n\njson_data = json.dumps(dictionary)\nprint(json_data) // Output: {\"name\": \"John\", \"age\": 30, \"car\": [\"Ford\", \"BMW\", \"Fiat\"]}",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 2387,
            "material": "Lainnya",
            "instruction": "Add Python logging capabilities to a given Flask application.",
            "question": "import ___\nimport sys\nfrom flask import Flask\n\napp = Flask(name)\n\n# Set up logging\napp.logger.addHandler(logging.StreamHandler(sys.stdout))\napp.logger.setLevel(logging.DEBUG)\n\n@app.route('/')\ndef index():\n app.logger.info('Processing request to index')\n return 'Hello World!'",
            "correct_answer": "logging",
            "duration": 20
        },
        {
            "question_id": 2392,
            "material": "Lainnya",
            "instruction": "Write a Python program to collect data from an API and store the data in a SQL database.",
            "question": "import ___\nimport requests\n\n# Connect to the database\ndb = sqlite3.connect('api_data.db')\n\n# Create the statement\nstmt = 'INSERT INTO api_data (data) VALUES (?)'\n\n# Collect and save the data\ndata = requests.get(url).json()\ndb.execute(stmt, (data,))\ndb.commit()\ndb.close()",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 2394,
            "material": "Lainnya",
            "instruction": "Create an alternate version of a given program that produces the same output.",
            "question": "import ___\nmyString = \"Python Rocks!\"\nnumRounds = math.floor(len(myString) / 2)\nfor i in reversed(range(1, numRounds+1)):\n    print(myString[i-1::-1] + myString[i::])",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 2414,
            "material": "Lainnya",
            "instruction": "Create a program in Python to generate a random 2D matrix of size NxN containing integers between 1 and 10.",
            "question": "import ___\n\nn = 10\n\nmatrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n\nprint(matrix)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 2427,
            "material": "Lainnya",
            "instruction": "Update the below Python code to run in multiprocess mode.",
            "question": "import ___\nimport time\n\ndef add(a, b):\n return a + b\n\nif __name__ == '__main__':\n pool = multiprocessing.Pool()\n start = time.time()\n result = pool.apply_async(add, (2, 3))\n pool.close()\n pool.join()\n end = time.time()\n print(result.get())\n print(end-start)",
            "correct_answer": "multiprocessing",
            "duration": 20
        },
        {
            "question_id": 2430,
            "material": "Lainnya",
            "instruction": "Automate the process of pulling data from a website using Python.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\n\n# Use requests to get website HTML\nresp = requests.get(url)\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(resp.text, 'lxml')\n\n# Extract data from HTML\ndata = []\nfor item in soup.find_all('div'):\n data.append(item.text)\n\n# Print the data\nfor d in data:\n print(d)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2437,
            "material": "Lainnya",
            "instruction": "Write a Python script to identify the words that contain more than one vowel in a given sentence.",
            "question": "import ___\n\nsentence = \"The quick brown fox jumped over the lazy dog.\"\npattern = r\"\\b(\\w*[aeiou]\\w*){2,}\\b\"\n\nmatch = re.findall(pattern, sentence)\nprint(match)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2460,
            "material": "Lainnya",
            "instruction": "You need to optimise a given Python code, which takes a  3x3 matrix as input and outputs the inverse.",
            "question": "import ___ as np\n\ndef inverse_matrix(matrix):\n    det = np.linalg.det(matrix)\n    if det == 0:\n        return None \n    return np.dot(np.linalg.inv(matrix), 1/det)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 2492,
            "material": "Lainnya",
            "instruction": "Write a Python code to find the RMSE (root mean squared error) of two given lists.",
            "question": "import ___ \n\ndef rmse(list1, list2): \n    mean_square = 0\n    for i in range(len(list1)):\n        mean_square += math.pow((list1[i] - list2[i]), 2)\n    return math.sqrt(mean_square/len(list1))\n\nrmse_value = rmse(list1, list2)\nprint(\"Root Mean Square Error is:\", rmse_value)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 2510,
            "material": "Lainnya",
            "instruction": "Design a Python program that analyses the sentiment of a given text.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"I love programming\"\n\nsid = SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(text)\n\nif scores['compound'] > 0.0:\n print(\"Positive sentiment\")\nelif scores['compound'] == 0.0:\n print(\"Neutral sentiment\")\nelse:\n print(\"Negative sentiment\")\n\n# Output: Positive sentiment",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 2530,
            "material": "Lainnya",
            "instruction": "Create a Python script that processes a sentence and classifies it as positive or negative.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"The food was really bad.\"\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscore = sentiment_analyzer.polarity_scores(sentence)\n\nif score['compound'] > 0:\n sentiment = 'positive'\nelif score['compound'] < 0:\n sentiment = 'negative'\n\nprint(f'The sentence is {sentiment}.')",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 2536,
            "material": "Lainnya",
            "instruction": "Create a web API in Python Flask that returns the factorial of the provided number.",
            "question": "from flask import ___, request\n\napp = Flask(__name__)\n\n@app.route('/factorial', methods=['POST'])\ndef factorial():\n num = request.json['num']\n result = 1\n for i in range(2, num + 1):\n  result *= i\n return { 'factorial': result }\n\nif __name__ == '__main__':\n app.run(debug=True)",
            "correct_answer": "Flask",
            "duration": 20
        },
        {
            "question_id": 2545,
            "material": "Lainnya",
            "instruction": "Design a Python program to find the difference between two provided times. The two times should be provided as strings in the format \"[HH:mm:ss]\".",
            "question": "from datetime import ___\n\ndef time_diff(time1, time2):\n t1 = datetime.strptime(time1, \"%H:%M:%S\")\n t2 = datetime.strptime(time2, \"%H:%M:%S\")\n return (t2 - t1).total_seconds()\n\nprint(time_diff('08:30:15', '10:20:20')) // 7200.0",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 2549,
            "material": "Lainnya",
            "instruction": "Write a Python program to get all the information associated with an IPv4 address.",
            "question": "import ___\nip =  \"8.8.8.8\"\naddress_info = socket.getaddrinfo(ip, None)\n\nfor info in address_info:\n    print(\"IP version :\", info[0])\n    print(\"IP address as string:\", info[4][0])\n    print(\"IP address as tuple:\", info[4])\n    print(\"IP protocol:\", info[6])",
            "correct_answer": "socket",
            "duration": 20
        },
        {
            "question_id": 2562,
            "material": "Lainnya",
            "instruction": "Generate a python program that create a pandas dataframe from a dictionary column.",
            "question": "import ___ as pd\n\ndf = pd.DataFrame(data_dict)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2597,
            "material": "Lainnya",
            "instruction": "Generate a random number in Python between 2 inclusive numbers.",
            "question": "import ___\n\nnum = random.randint(min, max)\nprint(num)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 2599,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a bar chart visualizing a dataset.",
            "question": "import ___.pyplot as plt\n\n#create data\ndata = [3, 5, 2, 8, 9, 10]\n\n#set plot size\nplt.figure(figsize=(5, 2))\n\n#generate the bar chart\nplt.bar([str(i) for i in range(1, len(data)+1)], data)\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 2602,
            "material": "Lainnya",
            "instruction": "Create a hierarchical clustering algorithm in Python to group data points into clusters.",
            "question": "import ___ as np\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\n# define the data points\ndata_points = np.array([1,2,3,4,5])\n\n# create the linkage matrix\nlinkage_matrix = linkage(data_points, 'ward')\n\n# generate the dendrogram\ndendrogram(linkage_matrix)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 2616,
            "material": "Lainnya",
            "instruction": "Update a given MongoDB document using Python.",
            "question": "import ___\n\n# Open connection\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\n\n# Update document\ndb.collection.update_one(\n    {\"name\": \"John Doe\"},\n    {\"$set\": {\"age\": 28}}\n)\n\n# Close connection\nclient.close()",
            "correct_answer": "pymongo",
            "duration": 20
        },
        {
            "question_id": 2632,
            "material": "Lainnya",
            "instruction": "Create a web scraper using Python that collects data from the given URL - http://example.com/",
            "question": "import ___\nfrom lxml import html\n\n# Get the response\nresp = requests.get('http://example.com/')\n\n# Parse the response\ndoc = html.fromstring(resp.text)\n\n# Extract the data\ndata = doc.xpath('//div/span/text()')\n\n# Print out the data\nprint(data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2637,
            "material": "Lainnya",
            "instruction": "Write a Python code to handle this data loading task.",
            "question": "import ___ as pd\n\ndef load_data(csv_file):\n    '''This function will load the CSV file and store the data in a DataFrame'''\n    \n    data = pd.read_csv(csv_file, sep=',', encoding='utf-8')\n    return pd.DataFrame(data)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2645,
            "material": "Lainnya",
            "instruction": "Create a python script that extracts the first ten words from a given text.",
            "question": "import ___\n\ntext = \"The quick brown fox jumps over the lazy dog\"\n\n# Extract words using a regular expression\nwords_list = re.findall(r\"[\\w']+\", text)\n\n# Print the first ten words\nprint(words_list[:10])",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2653,
            "material": "Lainnya",
            "instruction": "Rewrite the code in Python to improve its readability.",
            "question": "import ___\n\ndef calculate_area(radius):\n    return math.pi * (radius ** 2)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 2663,
            "material": "Lainnya",
            "instruction": "Convert the following Regular Expression matching code to a Regular Expression replacement code in Python.",
            "question": "import ___\n\nre_match = \"\\w+@\\w+\\.\\w+\"\nre_replace = \"<valid email>\"\n\nprint(re.sub(re_match, re_replace, \"my_email@example.com\"))",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2670,
            "material": "Lainnya",
            "instruction": "Create a program in Python that prints out the first 10 prime numbers.",
            "question": "import ___\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprime_nums = []\n\nfor i in range(2, 1000):  \n    if is_prime(i):\n        prime_nums.append(i)\n        if len(prime_nums) == 10:\n            break\n\nfor item in prime_nums:\n    print(item)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 2689,
            "material": "Lainnya",
            "instruction": "Create a Python program to find all the solutions to a given equation.",
            "question": "import ___\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\n\n#calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find two solutions\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1,sol2))",
            "correct_answer": "cmath",
            "duration": 20
        },
        {
            "question_id": 2692,
            "material": "Lainnya",
            "instruction": "Can you create a Python script to extract email addresses from a raw text?",
            "question": "import ___\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\",\n                    text)\n\nprint(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2700,
            "material": "Lainnya",
            "instruction": "Design a Python program to generate a random password containing both lowercase and uppercase characters.",
            "question": "import ___\nimport string\n\ndef generate_random_password():\n  charset = string.ascii_letters + string.digits\n  return ''.join(random.sample(charset, 8))\n\nprint(generate_random_password())",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 2704,
            "material": "Lainnya",
            "instruction": "Create a Python program that takes an email message as input and prints the sender's email address.",
            "question": "import ___\n\nemail_message = \"\"\" \nFrom: \"John Doe\" <john.doe@example.com>\nTo: \"Jane Doe\" <jane.doe@example.com>\nSubject: Example Email\n\"\"\"\n\nsender_email = re.findall(r'From: .+?<(.+?)>', email_message)\n\nprint('Sender\\'s email address:', sender_email[0])",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2720,
            "material": "Lainnya",
            "instruction": "Create a Python script to scrape a website and extract the main content of any webpage.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\nhtml = requests.get(url).content\nsoup = BeautifulSoup(html, 'html.parser')\n\ncontent = soup.find(\"div\", {\"class\": \"main-content\"}).text\n\nprint(content)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2737,
            "material": "Lainnya",
            "instruction": "Write a Python program to convert a unix timestamp to UTC time.",
            "question": "import ___\n\ntimestamp = 1594842400\nutc_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))\n\nprint(utc_time) # Output: 2020-07-17 02:00:00",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 2768,
            "material": "Lainnya",
            "instruction": "Create a Python script to create a data visualisation of the data provided.",
            "question": "import ___.pyplot as plt \ndata = [5, 10, 15, 20, 25, 30, 35, 40, 45]\nplt.plot(data) \n\n# formatting the text\nplt.title('Data Visualisation') \nplt.xlabel('Data Points') \nplt.ylabel('Value') \n\n# function to show the plot \nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 2778,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a random permutation of a given sequence.",
            "question": "from random import ___\n\nsequence = [1, 2, 3]\nshuffle(sequence)\nprint(sequence)",
            "correct_answer": "shuffle",
            "duration": 20
        },
        {
            "question_id": 2793,
            "material": "Lainnya",
            "instruction": "Create a Python program to log the current time (in the given timezone) every 20 minutes.",
            "question": "import ___\nimport datetime\nfrom pytz import timezone\n\ndef logtime(tz):\n while True:\n currtime = datetime.datetime.now(tz)\n print(\"The current time is\", currtime.strftime(\"%H:%M:%S\"))\n time.sleep(60 * 20)\n\nlogtime(timezone('America/Los_Angeles'))",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 2799,
            "material": "Lainnya",
            "instruction": "Perform sentiment analysis on a given text using Python.",
            "question": "from textblob import ___\n\ntext = \"This movie was an amazing experience!\"\nblob = TextBlob(text)\nprint(\"Sentiment score: \", blob.sentiment.polarity)",
            "correct_answer": "TextBlob",
            "duration": 20
        },
        {
            "question_id": 2802,
            "material": "Lainnya",
            "instruction": "Write a Python program to scrape the text from a web page and remove all the html tags.",
            "question": "import ___\n\ntext = \"<p>This is a sample web page.<br>This text has <b>some</b> <i>html</i> tags.</p>\"\n\ncleaned_text = re.sub(r'<.*?>', '', text)\n\nprint(cleaned_text)\n# Output: This is a sample web page.This text has some html tags.",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2808,
            "material": "Lainnya",
            "instruction": "Create a vectorized implementation in Python to solve the given problem.",
            "question": "import ___ as np\ndef add_vector(a, b):\n    return np.add(a,b)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 2814,
            "material": "Lainnya",
            "instruction": "Construct a Python program that shuffles a deck of cards.",
            "question": "import ___\n\n# A standard deck of cards with 52 cards\ndeck = [2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A', \n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A']\n\n# Shuffle the deck\nrandom.shuffle(deck)\nprint(deck)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 2817,
            "material": "Lainnya",
            "instruction": "Create a Python program to analyze the sentiment of a given sentence.",
            "question": "from textblob import ___\n\nsentence = 'I am very happy to be here'\nsentiment = TextBlob(sentence).polarity\n\nif sentiment > 0:\n    print(\"Sentiment: Positive\")\nelif sentiment == 0:\n    print(\"Sentiment: Neutral\")\nelse:\n    print(\"Sentiment: Negative\")",
            "correct_answer": "TextBlob",
            "duration": 20
        },
        {
            "question_id": 2818,
            "material": "Lainnya",
            "instruction": "Write a python script to extract the text from a HTML page and count the number of words.",
            "question": "from bs4 import ___\nimport re\n\nhtml_doc = <input>\nsoup = BeautifulSoup(html_doc, 'html.parser')\ntext = soup.get_text()\nwords = re.findall(r'\\w+', text)\nprint (len(words))",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 2820,
            "material": "Lainnya",
            "instruction": "Create a Python program to classify the digits in a dataset",
            "question": "import ___ as np \nfrom sklearn.svm import SVC \n\nfeatures = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) \nlabels = np.array([0, 0, 1, 1, 0]) \nclf = SVC() \nclf.fit(features, labels) \n\n# predicting the class of the following data \ntest_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) \nresult = clf.predict(test_data) \nprint(result)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 2828,
            "material": "Lainnya",
            "instruction": "Optimize a Python script's performance by refactoring the code to use multiprocessing.",
            "question": "from multiprocessing import ___\n\ndef process_data(record):\n # Process the data\n\ndef process_list_data(data):\n with Pool() as p:\n p.map(process_data, data)\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data)",
            "correct_answer": "Pool",
            "duration": 20
        },
        {
            "question_id": 2844,
            "material": "Lainnya",
            "instruction": "Design a program that takes a date as input and calculates the day of the week that date falls on.",
            "question": "#!/usr/bin/env python3\n\nimport ___\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber]",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 2853,
            "material": "Lainnya",
            "instruction": "Write a Python program that can detect the language of a given piece of text.",
            "question": "import ___\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language) # fr",
            "correct_answer": "detect_language",
            "duration": 20
        },
        {
            "question_id": 2862,
            "material": "Lainnya",
            "instruction": "Create a Python program that takes a sentence as an input and outputs all the words with their part of speech.",
            "question": "import ___\n\nsentence = 'This is a sentence.'\nwords = nltk.word_tokenize(sentence)\n\nfor word in words:\n print(f'{word}: {nltk.pos_tag([word])[0][1]}')",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 2868,
            "material": "Lainnya",
            "instruction": "Modify the given Python program to optimize the memory allocation and improve the execution time of the program",
            "question": "import ___ as pd\n\n# Load the dataset with memory optimization\ndata = pd.read_csv('dataset.csv', low_memory=True)\n\n# Optimize the data to reduce the size \ndata = data.drop_duplicates(keep=False)\n\n# Optimize the data to increase the performance \ndata = data.apply(pd.to_numeric, errors='coerce')",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 2880,
            "material": "Lainnya",
            "instruction": "Given a URL, write a Python script to fetch and decode the HTML web page using the `requests` library.",
            "question": "import ___\n\nurl = \"https://example.org/\"\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  html_page = response.content.decode('utf-8')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 2895,
            "material": "Lainnya",
            "instruction": "Create a Python program to visualize the performance of different stock prices over a period of time.",
            "question": "import ___.pyplot as plt\n \n# Read in data\ndata = []\nwith open('stock_prices.txt') as f:\n    data = [float(x) for x in f.read().split()]\n\n# Plot data\nplt.plot(range(1, len(data)+1), data)\nplt.title('Stock Price Over Time')\nplt.xlabel('Time')\nplt.ylabel('Price')\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 2906,
            "material": "Lainnya",
            "instruction": "Compare two strings using Python and output the similarity score between them.",
            "question": "import ___\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909",
            "correct_answer": "difflib",
            "duration": 20
        },
        {
            "question_id": 2909,
            "material": "Lainnya",
            "instruction": "Modify a Python program to optimize its performance and handle errors gracefully.",
            "question": "# Library import ___ os\n\n# Path of the file\nfile_name = \"myfile.txt\"\n\n# Open file\ntry:\n  with open(file_name, 'r') as f:\n\n    # Read file\n    contents = f.read()\n\n    # Print file\n    print(contents)\n\nexcept IOError:\n  print('Error: file not found!')\n\nfinally:\n  if f:\n    f.close()",
            "correct_answer": "import",
            "duration": 20
        },
        {
            "question_id": 2924,
            "material": "Lainnya",
            "instruction": "Create a short Python program that prints out the current date and time in the specified format.",
            "question": "import ___\n\ntime_now = time.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(time_now)",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 2948,
            "material": "Lainnya",
            "instruction": "Write a Python program to make a prediction using a Support Vector Machine (SVM)",
            "question": "import ___ as np\nfrom sklearn import svm\n\nX = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\nclf = svm.SVC(kernel='linear')\nclf.fit(X, y)\n\nprediction = clf.predict([[2., 2.]])\nprint(prediction)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 2981,
            "material": "Lainnya",
            "instruction": "Generate a python program that matches regular expression pattern.",
            "question": "import ___\n\ndef regex_match(pattern, text):\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    return matches",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 2990,
            "material": "Lainnya",
            "instruction": "Compress a given folder using GZip in Python.",
            "question": "import ___ \nimport shutil \n\n# Source files to compress \nsource = '/files'\n  \n# Destination to store compressed files \ndestination = '/files/compressed'\n  \n# set the compression level \ncompression_level = 3\n\nshutil.make_archive(destination, 'gz', source, compression_level)",
            "correct_answer": "gzip",
            "duration": 20
        },
        {
            "question_id": 3038,
            "material": "Lainnya",
            "instruction": "Create a web scrapper in Python to fetch data from a website. The scrapper should accept a URL and fetch the data and output it in a JSON format.",
            "question": "import ___ \nimport json\n\nurl = \"https://www.example.com\"\n\nresponse = requests.get(url)\nif response.status_code == 200:\n    response_data = response.text\n    parsed_data = json.loads(response_data)\n    print(parsed_data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3043,
            "material": "Lainnya",
            "instruction": "Generate a Python script to download the source code of a given web page.",
            "question": "import ___.request\n\ndef download_webpage_source(url):\n    '''This function will download the source code of a given web page'''\n\n    response = urllib.request.urlopen(url)\n    data = response.read()\n    text = data.decode('utf-8')\n\n    return text",
            "correct_answer": "urllib",
            "duration": 20
        },
        {
            "question_id": 3055,
            "material": "Lainnya",
            "instruction": "Generate a python program to generate a json response based on following specification",
            "question": "import ___\n\ndata = {\n    'name': 'John Doe',\n    'email': 'john@example.com',\n    'age': 32\n}\n\njson_data = json.dumps(data)\nprint(json_data)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 3063,
            "material": "Lainnya",
            "instruction": "Apply a filter in Python that removes any stop words from a text",
            "question": "from nltk.corpus import ___ \nfrom nltk.tokenize import word_tokenize \n\ndef filter_stop_words(text):\n    word_tokens = word_tokenize(text)\n    filtered_text = [w for w in word_tokens if not w in stopwords.words('english')]\n    return ' '.join(filtered_text)",
            "correct_answer": "stopwords",
            "duration": 20
        },
        {
            "question_id": 3070,
            "material": "Lainnya",
            "instruction": "Construct a Python program to generate a random password using alphanumeric characters and special symbols.",
            "question": "import ___\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(8))",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 3109,
            "material": "Lainnya",
            "instruction": "Create a python program that outputs a given number of random numbers within a given range",
            "question": "import ___\n\ndef get_n_random_numbers(max_num, num_of_nums):\n    random_numbers = []\n    for _ in range(num_of_nums):\n        random_numbers.append(random.randrange(max_num))\n    return random_numbers",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 3111,
            "material": "Lainnya",
            "instruction": "Write a python program to a calculate the area of a circle given its radius.",
            "question": "import ___\n\nradius = 8\narea = math.pi * radius * radius\nprint(area)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 3128,
            "material": "Lainnya",
            "instruction": "Write a Python program to call a given API with an input parameter and store the result in a variable.",
            "question": "import ___\n\nurl = 'https://example.org/api?name=test'\nresponse = requests.get(url)\ndata = response.json()\nresult = data['result']",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3140,
            "material": "Lainnya",
            "instruction": "Create a PDF document from a Word document using Python.",
            "question": "import ___.client\n\n# word file to be converted\nwordFile =  r'filename.docx'\n\n# Open the word file\nword = win32com.client.Dispatch(\"Word.Application\")\ndoc = word.Documents.Open(wordFile)\n\n# Set the pdf parameters\npdf_format_id = 17\nfile_name = r'filename.pdf'\n\n# Save the file as pdf\ndoc.SaveAs(file_name, FileFormat=pdf_format_id)\n\n# Close the word file\nword.Quit()",
            "correct_answer": "win32com",
            "duration": 20
        },
        {
            "question_id": 3187,
            "material": "Lainnya",
            "instruction": "Edit a given Python program to use regex to extract the phone numbers from the text.",
            "question": "import ___\n\ntxt = \"My number is 666-111-1111 and my office number is 888-666-1234.\"\n\nphone_numbers = re.findall(r'\\d{3}-\\d{3}-\\d{4}', txt)\nprint(phone_numbers) # output: ['666-111-1111', '888-666-1234']",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 3208,
            "material": "Lainnya",
            "instruction": "Write a Python program to query all 10,000 rows in the provided SQL table.",
            "question": "import ___\n\n# connect to SQL database\ndb = sqlite3.connect('example.db')\n\n# create cursor\ncur = db.cursor()\n\n# execute query\ncur.execute('SELECT * FROM \"example\"')\n\n# fetch all rows\nrows = cur.fetchall()\n\n# display all rows\nfor row in rows:\n    print row",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 3238,
            "material": "Lainnya",
            "instruction": "Write a Python program that prints out all possible words from a collection of letters.",
            "question": "import ___\n\nletters = [\"a\", \"b\", \"t\"]\nwords = []\n\n# we use itertool's permutations to generate all combinations of letters\nResult = itertools.permutations(letters, 3)\n\n# we iterate through the output of itertool's permutation\n# and append it to result list of words\nfor ele in list(Result):\n    words.append(''.join(ele))\n\n# printing the result\nprint(words)",
            "correct_answer": "itertools",
            "duration": 20
        },
        {
            "question_id": 3267,
            "material": "Lainnya",
            "instruction": "Design a script in Python to scrape text data from a particular web page.",
            "question": "from bs4 import ___\nimport requests\n\n# Get the HTML of the page\nhtml_content = requests.get(url).text\n\n# Create the Soup object\nsoup = BeautifulSoup(html_content, 'lxml')\n\n# Find the text data\ndata = soup.find_all('p')\n\n# Print the text data\nfor element in data:\n      print(element.text)",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 3298,
            "material": "Lainnya",
            "instruction": "Create a Python program to convert raw JSON data into a Pandas DataFrame.",
            "question": "import ___\nimport pandas as pd\n\ndata = {\n \"Name\": \"John Smith\",\n \"Age\": 25,\n \"Location\": \"New York, USA\"\n}\n\ndf = pd.DataFrame.from_dict(json.loads(json.dumps(data)))\nprint(df)\n\nOutput\n   Name  Age      Location\n0  John   25  New York, USA",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 3301,
            "material": "Lainnya",
            "instruction": "Model a logistic regression algorithm using Python to predict a binary target: true or false.",
            "question": "import ___ as np\n\nX = np.array([[0,0], [0,1], [1,0], [1,1]])\ny = np.array([1,1,0,1])\n\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=0).fit(X, y)\n\nprint(\"Prediction:\", clf.predict([[2,2]]))",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 3338,
            "material": "Lainnya",
            "instruction": "Develop a program to track the stock price using the Yahoo Finance API in Python",
            "question": "import ___ as yf\n\n# Get the data of the stocks for the given ticker\nticker = \"AAPL\"\ndata = yf.Ticker(ticker)\n\n# The Yahoo API token\ntoken = \"abc123\"\n\n# Get historical data for the ticker\ndata.history(period=\"1mo\", token=token)\n\n# Print the price\nprint(data.history(token=token)[\"Close\"].iloc[-1})",
            "correct_answer": "yfinance",
            "duration": 20
        },
        {
            "question_id": 3350,
            "material": "Lainnya",
            "instruction": "Create a Python program to generate a random password of length n.",
            "question": "import ___\n\ndef generate_password(length):\n  characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*(){}[]?/'\n  password = ''\n  for c in range(length):\n    password += random.choice(characters)\n  return password\n\nlength = 10\npassword = generate_password(length)\nprint(password)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 3351,
            "material": "Lainnya",
            "instruction": "Create a Python script that generates a random password of length n with a minimum required characters.",
            "question": "import ___\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nprint(generate_password(8))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 3376,
            "material": "Lainnya",
            "instruction": "Develop a unit test in Python to verify correctness of an algorithm.",
            "question": "import ___\n\nclass TestAlgorithm(unittest.TestCase):\n    \n    def test_algorithm(self):\n        10 = algorithm([1, 2, 3, 4])\n        self.assertEqual(10, 10)\n        \n        40 = algorithm([10, 10, 10, 10])\n        self.assertEqual(40, 40)\n\nif __name__ == '__main__':\n    unittest.main()",
            "correct_answer": "unittest",
            "duration": 20
        },
        {
            "question_id": 3422,
            "material": "Lainnya",
            "instruction": "Propose a Python program to tokenize the given sentences.",
            "question": "import ___\n\ndef tokenize_sentences(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    return tokens",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 3432,
            "material": "Lainnya",
            "instruction": "Generate a Dataframe in Python",
            "question": "import ___ as pd\n\ndata = [('John', 24, 'Male'), \n        ('Sarah', 32, 'Female')] \n  \n# Create the pandas DataFrame \ndf = pd.DataFrame(data, columns = ['Name', 'Age', 'Gender']) \n  \nprint(df)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 3444,
            "material": "Lainnya",
            "instruction": "Take the following Python data structure and render it to JSON format.",
            "question": "import ___\n\ndata = {\n 'name': 'John',\n 'age': 34,\n 'hobbies': ['surfing', 'hiking', 'golf']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 3478,
            "material": "Lainnya",
            "instruction": "Construct a python script to display the frequency of each words appearing in a document",
            "question": "from collections import ___\n \nwith open('text.txt', 'r') as f:\n    data = f.read().lower().split()\n    \nword_counter = Counter(data)\n \n# Print the sorted most common 10 words\nfor word, count in word_counter.most_common(10):\n    print('{}: {}'.format(word, count))",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 3499,
            "material": "Lainnya",
            "instruction": "Generate a SQL query in Python to find the sum of numbers in a given dataset.",
            "question": "import ___ as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\n\nquery = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'\n\nsum_num = pd.read_sql_query(query, con=df.to_sql('df'))\nprint(sum_num)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 3500,
            "material": "Lainnya",
            "instruction": "Create a call to an external API in Python and process the response.",
            "question": "import ___\n\nurl = 'https://www.example.com/api/data'\nresponse = requests.get(url)\ndata = response.json()\n\n# Process response data\nfor item in data:\n  # Do something with item...",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3506,
            "material": "Lainnya",
            "instruction": "Convert a SQL query to Python code.",
            "question": "import ___\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('SELECT * FROM orders WHERE status = \\'shipped\\'')\n\nresult = c.fetchall()\n\nfor row in result:\n    print(row)\n\nconn.close()",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 3528,
            "material": "Lainnya",
            "instruction": "Create an algorithm using Python to generate random passwords.",
            "question": "import ___\n \ndef generate_password(length):\n    # Generate a random password that is length characters long\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for _ in range(length):\n        password += random.choice(chars)\n    return password\n \ngenerated_password = generate_password(10)\nprint(generated_password)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 3569,
            "material": "Lainnya",
            "instruction": "Create a Python program that reads two dates and computes the number of days between them.",
            "question": "from datetime import ___\n\ndate_1 = date(2020, 1, 1)\ndate_2 = date(2020, 1, 30)\n\ndiff = date_2 - date_1\nprint('There are {} days between the two dates.'.format(diff.days))",
            "correct_answer": "date",
            "duration": 20
        },
        {
            "question_id": 3576,
            "material": "Lainnya",
            "instruction": "Load a dataset in CSV format into a Python pandas DataFrame.",
            "question": "import ___ as pd\n\ndata = pd.read_csv('dataset.csv')",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 3599,
            "material": "Lainnya",
            "instruction": "Write a Python code which randomly generates a hopscotch board of given size.",
            "question": "import ___ \n\ndef generate_hopscotch_board(size):\n    board = []\n    for row in range(size):\n        board.append([])\n        for col in range(size):\n            board[row].append(random.randint(1,6))\n    return board\n\n# Generate a hopscotch board\nprint(generate_hopscotch_board(size))",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 3604,
            "material": "Lainnya",
            "instruction": "Write a Python program to format a given date from one format to another.",
            "question": "from datetime import ___\n\ndef format_date(date_str, start_format, end_format):\n    date_obj = date.strptime(date_str, start_format)\n    return date_obj.strftime(end_format)",
            "correct_answer": "date",
            "duration": 20
        },
        {
            "question_id": 3616,
            "material": "Lainnya",
            "instruction": "Design a program in Python to change the background color of a web page.",
            "question": "from selenium import ___\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Chrome()\ndriver.get(\"http://example.com\")\nhtml = driver.find_element_by_tag_name('html')\nhtml.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE)\ndriver.execute_script(\"document.body.style.backgroundColor='\" + color + \"'\")",
            "correct_answer": "webdriver",
            "duration": 20
        },
        {
            "question_id": 3626,
            "material": "Lainnya",
            "instruction": "Parse the following JSON into a Python dictionary.",
            "question": "# import ___ json module\nimport json\n\n# parse the json\njson_dict = json.loads('{  \"name\": \"John\",  \"age\": 28,  \"hobbies\": [    \"Programming\",    \"Sports\"  ]}')\n\n# print the parsed json\nprint(json_dict)",
            "correct_answer": "the",
            "duration": 20
        },
        {
            "question_id": 3653,
            "material": "Lainnya",
            "instruction": "Generate a valid JSON from a given Python dictionary.",
            "question": "import ___\ndata = {\n    'name': 'John',\n    'age': 25\n}\n\njson_data = json.dumps(data)\n# json_data = '{\"name\":\"John\",\"age\":25}'",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 3671,
            "material": "Lainnya",
            "instruction": "Edit a given python program",
            "question": "import ___\n\ndef round_off(a): \n    if (a - math.floor(a) >= 0.5): \n        a = math.ceil(a) \n    else: \n        a = math.floor(a) \n    return int(a)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 3673,
            "material": "Lainnya",
            "instruction": "Write a Python program to extract the text from an HTML document.",
            "question": "from bs4 import ___\n\nhtml = '<h2>Hello World!</h2>'\nsoup = BeautifulSoup(html, 'html.parser')\ntext = soup.find('h2').text\n\nprint(text) # Hello World!",
            "correct_answer": "BeautifulSoup",
            "duration": 20
        },
        {
            "question_id": 3714,
            "material": "Lainnya",
            "instruction": "Write a python script that normalizes the given text.",
            "question": "import ___\n\ndef normalize_text(text):\n    return re.sub(r'[^\\w\\s]','',text.lower())\n\ntext = \"The cat and rat chAsEd eAch other\"\nprint(normalize_text(text))\n\n# Output: the cat and rat chased each other",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 3733,
            "material": "Lainnya",
            "instruction": "Build a decision tree model in Python.",
            "question": "# Import decision tree classifier from the sklearn library\nfrom sklearn import ___\n \n# Input data to the model\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n \n# Create a decision tree classifier object\nclf = tree.DecisionTreeClassifier()\n \n# Train the decision tree classifier\nclf = clf.fit(X, y)",
            "correct_answer": "tree",
            "duration": 20
        },
        {
            "question_id": 3744,
            "material": "Lainnya",
            "instruction": "Classify the following items using a supervised machine learning algorithm in Python",
            "question": "import ___ as np \nfrom sklearn import svm \n\n# Input data to classify\nX = np.array([[3, 5, 7, 1, 0]])\n\n# Label data, either 0 or 1\ny = np.array([0])\n\n# Create a SVC classifier\nclf = svm.SVC(gamma=0.001, C=100.)\n\n# Train the model, using the training sets\nclf.fit(X, y)\n\nprint('Prediction:', clf.predict(X))\n\nOutput:\nPrediction: [0]",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 3755,
            "material": "Lainnya",
            "instruction": "Compute the sum of two matrices in Python.",
            "question": "import ___ as np\n\nmatrix_1 = np.array(matrix_1)\nmatrix_2 = np.array(matrix_2)\n\nresult = np.add(matrix_1, matrix_2)\n\n## Output: [[ 8 10 12], [14 16 18]]",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 3770,
            "material": "Lainnya",
            "instruction": "Write a Python program that croscorrelates two given arrays.",
            "question": "import ___ as np\n \n#input arrays\narr1 = np.array([2, 3, 5, 7])\narr2 = np.array([1, 4, 6, 8])\n\n#calculating correlation\ncorrelation = np.corrcoef(arr1, arr2)\n\n#printing correlation\nprint(\"Correlation: \", correlation[0][1])",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 3789,
            "material": "Lainnya",
            "instruction": "Create a Python script to scrape content from a website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup \n \nurl = 'https://example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n \nfor content in soup.find_all('div', class_='content'):\n print(content.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3848,
            "material": "Lainnya",
            "instruction": "Automate the following task using Python",
            "question": "import ___ as pd\n\n# load spreadsheet\ndf = pd.read_csv('customer_purchase.csv')\n\n# calculate total purchase for each customer\ntotal_purchase = df.groupby('Customer Name')['Purchase Amount'].sum().reset_index()\n\n# print total purchase for each customer\nprint(total_purchase)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 3868,
            "material": "Lainnya",
            "instruction": "Create a Python script that finds the most frequent words in a passage.",
            "question": "from collections import ___\n\ndef most_frequent_words(passage):\n    word_list = passage.split() \n    word_freq = Counter(word_list) \n  \n    most_freq_word = word_freq.most_common(1) \n    return most_freq_word",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 3869,
            "material": "Lainnya",
            "instruction": "Build a program in Python using the Pandas library to calculate the mean, median, and mode of a given series.",
            "question": "import ___ as pd\n\n# Create Series\ndata = [1, 2, 2, 3, 3, 3, 4, 5]\nseries = pd.Series(data)\n\n# Calculate mean\nmean = series.mean()\n\n# Calculate median\nmedian = series.median()\n\n# Calculate mode\nmode = series.mode()\n\n# Print results\nprint(\"Mean:\", mean)\nprint(\"Median:\", median)\nprint(\"Mode:\", mode)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 3877,
            "material": "Lainnya",
            "instruction": "Using Python, edit the following dataset to discard outliers.",
            "question": "import ___ as np\n\ndataset = [12, 34, 37, 10, 89, 67, 99, 101]\ndataset_without_outliers = [x for x in dataset if abs(x-np.mean(dataset)) < 3*np.std(dataset)]\n\nprint(dataset_without_outliers) # prints [12, 34, 37, 10, 89, 67, 99]",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 3906,
            "material": "Lainnya",
            "instruction": "Use the BeautifulSoup library in Python to parse HTML from a website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n#make a GET request\nresponse = requests.get('https://www.example.com')\n\n#parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3907,
            "material": "Lainnya",
            "instruction": "Write a script in Python to retrieve data from a web API.",
            "question": "import ___\n\nzipcode = '12345'\nurl = 'http://api.example.com/v1/zipcodes'\n\nparams = {'zipcode': zipcode}\nresponse = requests.get(url, params=params)\n\nif response.status_code == 200:\n data = response.json()\n print(data)\nelse:\n print('Error: ', response.status_code)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3929,
            "material": "Lainnya",
            "instruction": "Create a program in Python to perform web scraping using the BeautifulSoup module.",
            "question": "import ___ \nfrom bs4 import BeautifulSoup \n\n# Get the webpage\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\nresponse = requests.get(url) \n\n# Create the soup\nsoup = BeautifulSoup(response.text, 'html.parser') \n\n# Extract the text\ntext = soup.get_text() \n\n# Output the text\nprint(text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 3931,
            "material": "Lainnya",
            "instruction": "Create a command line utility in Python that takes two arguments. The utility should compare the two arguments and output the result as either \u201cequal\u201d or \u201cnot equal\u201d.",
            "question": "import ___\n\narg1 = sys.argv[1]\narg2 = sys.argv[2]\n\nif arg1 == arg2:\n print('equal')\nelse:\n print('not equal')",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 3949,
            "material": "Lainnya",
            "instruction": "Edit the following Python program so that it prints out the square root of a given number.",
            "question": "import ___\n\nnumber = 8\n\n# compute the square root of the given number\nsquare_root = math.sqrt(number)\n\n# print the square root\nprint(f\"The square root of {number} is {square_root}\")",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 3957,
            "material": "Lainnya",
            "instruction": "Create a Python program that classifies articles based on sentiment.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"This article is bad\"]\n\nsid = SentimentIntensityAnalyzer()\nfor sentence in sentences:\n  print(sentence)\n  ss = sid.polarity_scores(sentence)\n  print(ss)\n  if ss['compound'] >= 0.05:\n    print(\"Positive\")\n  elif -0.05 < ss['compound'] < 0.05:\n    print(\"Neutral\")\n  else:\n    print(\"Negative\")",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 3960,
            "material": "Lainnya",
            "instruction": "Write Python code to parse this JSON data.",
            "question": "import ___\n\ndata = {\n  \"title\": \"The Adventures of Tom Sawyer\",\n  \"author\": \"Mark Twain\",\n  \"year\": 1876\n}\n\nparsed_data = json.loads(data)\n\ntitle = parsed_data['title']\nauthor = parsed_data['author']\nyear = parsed_data['year']",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 3998,
            "material": "Lainnya",
            "instruction": "Create a program that can find the top five most common words in the input.",
            "question": "import ___\nimport re\n\n# clean and preprocess text\nwords = re.sub('\\W+', ' ', input_text).split()\n\n# find most common words\nword_counter = collections.Counter(words)\n\n# print top five most common words\nprint(word_counter.most_common(5))\n\n# Output:\n[('a', 1), ('Python', 1), ('is', 1), ('powerful', 1), ('general', 1)]",
            "correct_answer": "collections",
            "duration": 20
        },
        {
            "question_id": 3999,
            "material": "Lainnya",
            "instruction": "Develop a Python script to perform sentiment analysis on a given text.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"I'm feeling really great today\"\n\nsid = SentimentIntensityAnalyzer()\nss = sid.polarity_scores(text)\n\nprint(ss['compound']) # Prints 0.6249, which is positive sentiment.",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 4028,
            "material": "Lainnya",
            "instruction": "Create a data analysis solution using Python and Pandas.",
            "question": "import ___ as pd\n\n# Read in the CSV file\ndf = pd.read_csv(\"data.csv\")\n\n# Calculate population density\ndf['Density'] = df['Population'] / df['Area']\n\n# Print the density of the first 5 countries\nprint(df.head()['Density'])",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4055,
            "material": "Lainnya",
            "instruction": "Develop a RESTful web service in Python which returns the data provided in the given URL.",
            "question": "import ___\nfrom flask import Flask\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/data', methods=[\"GET\"])\ndef data():\n    r = requests.get('https://example.com/dataset.json')\n    return flask.jsonify(r.json())\n\nif __name__ == '__main__':\n    app.run()",
            "correct_answer": "flask",
            "duration": 20
        },
        {
            "question_id": 4070,
            "material": "Lainnya",
            "instruction": "Create a line chart representing the given data in Python.",
            "question": "import ___.pyplot as plt \n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.title('Line Chart') \nplt.xlabel('X-Axis') \nplt.ylabel('Y-Axis') \nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 4080,
            "material": "Lainnya",
            "instruction": "Create a Python program to fetch data from an HTTPS resource.",
            "question": "import ___\n\nurl = \"https://example.com/data\"\n\n# Send a GET request to the URL\nr =  requests.get(url)\n\n# Check the status of the request\nif r.status_code == 200:\n data = r.json()\n # Process the fetched data\nelse:\n print('Error: status code {}'.format(r.status_code))",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4086,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a square matrix with random values from 0 to 9.",
            "question": "import ___\n\ndef matrix(size):\n  matrix = [[0 for i in range(size)] for j in range(size)]\n  for i in range(size):\n    for j in range(size):\n      matrix[i][j] = random.randint(0, 9)\n  return matrix\n\nresult = matrix(4)\nfor row in result:\n  print(row)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4101,
            "material": "Lainnya",
            "instruction": "Implement an algorithm in Python to classify a given dataset into different target classes.",
            "question": "import ___ as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n \n# Load dataset\ndata = pd.read_csv('dataset.csv')\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n \n# Create and fit classifier\nclassifier = KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(X, y)\n \n# Make predictions\npredictions = classifier.predict(X)\nprint(np.mean(predictions == y))",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4105,
            "material": "Lainnya",
            "instruction": "Design an algorithm in Python to calculate the Euclidean distance between two points",
            "question": "import ___ \n    \ndef euclidean_distance(point1, point2):\n    dist = math.sqrt( (point1[0]-point2[0])**2 + (point1[1]-point2[1])**2 )\n    return dist \n\nprint(euclidean_distance([2,4], [4,8]))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 4112,
            "material": "Lainnya",
            "instruction": "Write a Python script to generate a random password of a given length.",
            "question": "import ___\nimport random\n\ndef random_password_generator(length):\n chars = string.ascii_letters + string.digits + string.punctuation\n return ''.join((random.choice(chars) for i in range(length)))\n\nprint(random_password_generator(length))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 4115,
            "material": "Lainnya",
            "instruction": "Create a Python script to generate a calendar representation of a given month.",
            "question": "import ___\n\nyear = 2020\nmonth = 4\n\n# create a calendar of the given month and year\ncal = calendar.month(year, month)\n\n# print it\nprint(cal)\n\n# Output\n     April 2020\nMo Tu We Th Fr Sa Su\n       1  2  3  4  5\n 6  7  8  9 10 11 12\n13 14 15 16 17 18 19",
            "correct_answer": "calendar",
            "duration": 20
        },
        {
            "question_id": 4150,
            "material": "Lainnya",
            "instruction": "Create a web scraper with Python and Beautiful Soup to scrape data from a single webpage.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com/page'\n\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', {'class': 'result'})\n\nfor result in results:\n title = result.find('h2').text\n description = result.find('p').text \n print(title, description)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4165,
            "material": "Lainnya",
            "instruction": "Construct a Python script that uses regular expressions to find phone numbers in a text.",
            "question": "import ___\n\ntext = 'The following numbers belong to us: 888-555-0000, +1-217-543-1000.'\n\n# Find all phone numbers\nnumbers = re.findall(r'\\+?\\d[\\d -]{8,12}\\d', text)\n\n# Output\nprint(numbers)",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 4181,
            "material": "Lainnya",
            "instruction": "Write a Python script that normalizes given input strings.",
            "question": "import ___\ns = \"Hello,  world    !  How are you?\"\ns = re.sub(' +', ' ', s)\nprint(s)\n\n# Output\n# 'Hello, world! How are you?'",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 4185,
            "material": "Lainnya",
            "instruction": "Compose a python script to create a bar chart.",
            "question": "import ___.pyplot as plt\n \n# x-axis values \nx = [4, 6, 3, 7, 2] \n\n# Y-axis values \ny = [0, 2, 3, 4, 5] \n\n# Function to plot the bar\nplt.bar(x, y)\n\n# Naming the x-axis \nplt.xlabel('x - axis')\n# Naming the y-axis \nplt.ylabel('y - axis')\n# Writing a title to the graph\nplt.title('Bar Chart') \n# Show the plot\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 4188,
            "material": "Lainnya",
            "instruction": "Write a Python program using NumPy to calculate the dot product of two vectors.",
            "question": "import ___ as np\n\nx = np.array([3, 4, 5])\ny = np.array([2, 6, 4])\n\ndot_product = np.dot(x, y)\n\nprint(dot_product) # 46",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 4200,
            "material": "Lainnya",
            "instruction": "Create a Python program to generate a random name from two given lists of names.",
            "question": "import ___\n\ndef get_random_name(first_names, last_names):\n    first_name = random.choice(first_names)\n    last_name = random.choice(last_names)\n    random_name = first_name + ' ' + last_name\n    return random_name",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4202,
            "material": "Lainnya",
            "instruction": "Write a Python program to visualize a given dataset in a 2D scatterplot.",
            "question": "import ___.pyplot as plt\ndef visualize_data(x_data, y_data):\n plt.scatter(x_data, y_data)\n plt.xlabel('x data')\n plt.ylabel('y data')\n plt.title('2D Scatterplot')\n plt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 4206,
            "material": "Lainnya",
            "instruction": "Create a Python script to generate random numbers with using a certain range.",
            "question": "import ___\n\nmin_n = 5\nmax_n = 15\n\ndef random_number_generator(min_n, max_n):\n  return random.randint(min_n, max_n)\n\nfor num in range(0, 10):\n    print (random_number_generator(min_n, max_n))",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4210,
            "material": "Lainnya",
            "instruction": "We are given the input and output schematic of a neural network. You are required to implement the network in Python code.",
            "question": "import ___ as np\n \n# Inputs\nx = np.array([2, 1])\n \n# Weights - Initilise to random values\nw1 = np.random.rand(2, 2)\nw2 = np.random.rand(2, 1)\n \n# Hidden layer\nh1 = np.matmul(x, w1)\n \n# Output layer\ny = np.matmul(h1, w2)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 4223,
            "material": "Lainnya",
            "instruction": "Develop a valid Python script which computes the root of a given quadratic equation",
            "question": "import ___\n\ndef quadratic_equation_roots(a, b, c):\n  d = b**2 - 4*a*c\n\n  if d > 0:\n    x1 = (-b + math.sqrt(d)) / (2*a)\n    x2 = (-b - math.sqrt(d)) / (2*a)\n    return x1, x2\n  else:\n    return \"This equation has no real roots!\"",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 4227,
            "material": "Lainnya",
            "instruction": "Generate a python code to build a simple regression model?",
            "question": "import ___ as np\n\nX = np.array(X)\nY = np.array(Y)\n\nb = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\n\n#Print the parameters\nprint(\"Parameters: \", b)\n\n#Make predictions\nx_new = [[1, 2, 3]]\ny_pred = np.dot(x_new, b)\nprint(\"Predicted output: \", y_pred)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 4236,
            "material": "Lainnya",
            "instruction": "Write code using Python to generate a random password of given length.",
            "question": "import ___\nimport random\n\ndef generate_password(length):\n    chars=string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 4286,
            "material": "Lainnya",
            "instruction": "Write a Python program to create a dataframe from a given dictionary of lists.",
            "question": "import ___ as pd\n\ndata_df = pd.DataFrame(data)\n\nprint(data_df)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4301,
            "material": "Lainnya",
            "instruction": "Create a Python program to generate random numbers between 1 and 10 of a specified length.",
            "question": "import ___\ndef generate_random_nums(length):\n  lst = []\n  for _ in range(length):\n    lst.append(random.randint(1, 10))\n  return lst",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4308,
            "material": "Lainnya",
            "instruction": "Generate a script to send an email using Python.",
            "question": "import ___\n\nsender = 'test@example.com'\nreceiver = 'test@example.com'\nsubject = 'test'\nmessage = 'Hello World'\n\ntry:\n smtpObj = smtplib.SMTP('localhost')\n smtpObj.sendmail(sender, receiver,\n  \"Subject: \" + subject + \"\\n\" + message)\n print(\"Successfully sent email\")\nexcept Exception as e:\n print(\"Error: unable to send email\")",
            "correct_answer": "smtplib",
            "duration": 20
        },
        {
            "question_id": 4335,
            "material": "Lainnya",
            "instruction": "Generate a random number between two given numbers, using Python.",
            "question": "\"\"\"\nGenerate a random number between two given numbers, using Python\n\"\"\"\n\nimport ___\n\ndef random_number(min_range, max_range):\n    return random.randrange(min_range, max_range)\n\nprint(random_number(30, 100))",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4344,
            "material": "Lainnya",
            "instruction": "Create a Python script to analyze a text document. The script should locate all words with three or more characters in a row and count their frequency in the document.",
            "question": "from collections import ___\n\ntext = 'The quick brown fox jumps over the lazy dog. The fox barked at the dog.'\n\nwords = defaultdict(int)\n\n for word in text.split():\n  if len(word) >= 3:\n   words[word] += 1\n\nprint(words)",
            "correct_answer": "defaultdict",
            "duration": 20
        },
        {
            "question_id": 4365,
            "material": "Lainnya",
            "instruction": "Construct a decision tree algorithm in Python to classify credit card transactions.",
            "question": "from sklearn.tree import ___\nimport numpy as np \n\nX = np.array([features])\ny = np.array([target])\n\nclf_dt = DecisionTreeClassifier()\nclf_dt.fit(X,y)\n\n# Predict class labels\npreds = clf_dt.predict(X)",
            "correct_answer": "DecisionTreeClassifier",
            "duration": 20
        },
        {
            "question_id": 4370,
            "material": "Lainnya",
            "instruction": "Create a python program to Reverse Engineer an API and find its endpoints.",
            "question": "import ___\n\nurl = 'http://example.com/api'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Find the API endpoints\n    data = response.json()\n    endpoints = data.get('endpoints')\n    print(endpoints)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4378,
            "material": "Lainnya",
            "instruction": "Use a random forest model in Python to predict the sale price of a house.",
            "question": "import ___ as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0) \nregressor.fit(X, Y)\n\n# Predict\nregressor.predict([[500,4]]) # Predicted price: 1716.275",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4385,
            "material": "Lainnya",
            "instruction": "Create a code to parse a web page and check whether or not a particular keyword appears in the page.",
            "question": "import ___\n\ndef check_if_keyword_exists(url, keyword):\n    response = requests.get(url)\n    if keyword in response.text:\n        return True\n    return False\n\nkeyword = \"python\"\nprint(check_if_keyword_exists(\"https://en.wikipedia.org/wiki/Python_(programming_language)\", keyword)) # Output: True",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4411,
            "material": "Lainnya",
            "instruction": "Write a Python program to predict the future stock price of a company.",
            "question": "import ___ as pd\n\n# Read the data\ndata = pd.read_csv(\"apple stock data.csv\")\n\n# Extract the data points\nX = data[['open', 'high', 'low', 'volume']]\ny = data['close']\n\n# Fit the model\nmodel.fit(X, y)\n\n# Predict the stock price of Apple in 2021 \npredict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]])\nprint(predict)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4418,
            "material": "Lainnya",
            "instruction": "Given a JSON record of a customer, write a Python program to extract the customer's name.",
            "question": "import ___\n\ndata = json.loads('{\n    \"name\": \"John Smith\",\n    \"age\": 35\n}')\n\ncustomer_name = data[\"name\"]\nprint(customer_name)",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 4425,
            "material": "Lainnya",
            "instruction": "Compute the area of a given circle using its radius in Python.",
            "question": "import ___\n\ndef calculateCircleArea(radius):\n    area = math.pi * radius * radius\n    return area\n\nradius = 5\n\nprint(\"Area of a circle with radius 5 is: \", calculateCircleArea(radius))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 4436,
            "material": "Lainnya",
            "instruction": "Create a heap data structure in Python using the heapq library.",
            "question": "import ___\n\ndef create_heap(items):\n heapq.heapify(items)\n\ndef add_item(items, item):\n heapq.heappush(items, item)\n\ndef pop_item(items):\n return heapq.heappop(items)\n\nitems = [4, 5, 2, 33, 1]\ncreate_heap(items)\nadd_item(items, 6)\npop_item(items)",
            "correct_answer": "heapq",
            "duration": 20
        },
        {
            "question_id": 4468,
            "material": "Lainnya",
            "instruction": "Write a python script that does the following:",
            "question": "import ___\n\nurl = \"https://example.com\" \nr = requests.get(url)\ndata = r.content\n\nwith open(\"example_website.html\", \"wb\") as file:\n    file.write(data)\n\nprint(\"File downloaded successfully.\")",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4469,
            "material": "Lainnya",
            "instruction": "Write a python code to create a histogram",
            "question": "import ___.pyplot as plt\n\ndef create_histogram(data):\n    plt.hist(data, bins=20)\n    plt.title('Histogram of Input Data')\n    plt.show()\n\n# Example data\ndata = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]\n\ncreate_histogram(data)",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 4471,
            "material": "Lainnya",
            "instruction": "Implement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound.",
            "question": "import ___\n\n# generates a random number between lower and upper\ndef generateRandomNumber(lower, upper):\n r = random.uniform(lower, upper)\n return r\n\n# driver program\nif __name__ == \"__main__\":\n lower = 10\n upper = 20\n print(generateRandomNumber(lower, upper))",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4478,
            "material": "Lainnya",
            "instruction": "Optimize the following application in Python to reduce startup time.",
            "question": "import ___\n\ndef func():\n    start=time.time()\n    # Optimized code using range instead of while loop\n    lst = range(100000000)\n    end=time.time()\n    print(end-start)\n\nfunc()",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 4479,
            "material": "Lainnya",
            "instruction": "Write a python program to tokenize a given text",
            "question": "import ___ \nfrom nltk.tokenize import word_tokenize \n  \n# input text  \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n  \n# converting the text into tokens \ntoken = word_tokenize(text) \n  \nprint(token)",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 4484,
            "material": "Lainnya",
            "instruction": "Create a Machine Learning model in Python to classify the following dataset.",
            "question": "from sklearn.neighbors import ___\n\n# Create the KNN classifier\nknn = KNeighborsClassifier(n_neighbors = 3)\n\n# Fit the classifier to the data\nknn.fit(X, y)\n\n# Predict the labels for the test set\ny_pred = knn.predict(X_test)",
            "correct_answer": "KNeighborsClassifier",
            "duration": 20
        },
        {
            "question_id": 4495,
            "material": "Lainnya",
            "instruction": "Write a web scraper in Python to collect web data from a website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\n\ntry: \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    # your web scraping code here\n\nexcept Exception as e:\n    print('Error:', e)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4539,
            "material": "Lainnya",
            "instruction": "Create a Python program to find the number of days between two dates.",
            "question": "from datetime import ___\n\ndef get_days_diff(date1, date2):\n d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n return abs((d2 - d1).days)",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 4580,
            "material": "Lainnya",
            "instruction": "Write a Python program that can detect emails within a given text.",
            "question": "import ___\n\ntext = 'Hello! My name is John and my email is john@example.com.'\n\n# Find all occurrences of an email using regex\nemail_regex = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\"\nresult = re.findall(email_regex, text)\n\n# Print emails found\nprint(\"Emails found: \\n\")\nfor email in result:\n print(email)",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 4581,
            "material": "Lainnya",
            "instruction": "Construct a algorithm in Python to find the solution of linear equation.",
            "question": "# import ___ modules \nimport numpy as np \n  \n# define coefficient and constants \na = np.array([[2, 3], [5, -4]]) \nb = np.array([5, 7]) \n  \n# solve linear equations \nans = np.linalg.solve(a, b) \n  \n# print the solutions \nprint(ans[0], ans[1])",
            "correct_answer": "necessary",
            "duration": 20
        },
        {
            "question_id": 4604,
            "material": "Lainnya",
            "instruction": "Create a Python program to download a website from the Internet and save it locally.",
            "question": "import ___.request\n\nurl = 'https://www.example.com'\n\ntry:\n response = urllib.request.urlopen(url)\n content = response.read()\n filename = url.split('/')[-1]\n with open(filename, 'w') as file:\n file.write(content)\nexcept Exception as e:\n print(e)",
            "correct_answer": "urllib",
            "duration": 20
        },
        {
            "question_id": 4605,
            "material": "Lainnya",
            "instruction": "Generate a code snippet in Python to handle HTTP requests from a given URL.",
            "question": "import ___\n\nurl = 'https://example.com/test'\n \n# Make the request\nresponse = requests.get(url)\n \n# Check the response\nif response.status_code == 200:\n  # Success\n  content = response.text\nelse:\n  # Failure\n  print(f'Request failed with status code: {response.status_code}')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4610,
            "material": "Lainnya",
            "instruction": "Generate a classifier in Python using the Random Forest algorithm.",
            "question": "from sklearn.ensemble import ___\n\nX = [[Weight, Size]]\ny = [Type]\n\nmodel = RandomForestClassifier(random_state=0)\nmodel.fit(X, y)",
            "correct_answer": "RandomForestClassifier",
            "duration": 20
        },
        {
            "question_id": 4616,
            "material": "Lainnya",
            "instruction": "Write a Python script to generate a random username using letter and numbers.",
            "question": "import ___\nfrom random import *\n\ndef generate_username():\n    letters = string.ascii_letters\n    numbers = string.digits\n    username = \"\"\n    for _ in range(10):\n        username += choice(letters) + choice(numbers)\n    return username\n\nprint(generate_username())",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 4625,
            "material": "Lainnya",
            "instruction": "Can you create a program Python to find the top ten most frequent words in a text?",
            "question": "import ___\n\n#Splitting the text into words\nwords=text.split()\n\n#Creating a frequency table\nword_freq = collections.Counter(words)\n\n#Printing the top 10 most frequent words\nfor word, frequency in word_freq.most_common(10):\n    print(word, frequency)",
            "correct_answer": "collections",
            "duration": 20
        },
        {
            "question_id": 4627,
            "material": "Lainnya",
            "instruction": "Generate Python code to connect to a SQL database.",
            "question": "import ___.connector\n\nconnection = mysql.connector.connect(  \n    host = \"test.com\",\n    user = \"admin\",\n    password = \"pwd123\",\n    database = \"testdb\"\n)",
            "correct_answer": "mysql",
            "duration": 20
        },
        {
            "question_id": 4628,
            "material": "Lainnya",
            "instruction": "Propose a solution that optimizes the following python program.",
            "question": "import ___ as np\n\narr = np.array(arr)  # Convert to a numpy array\n\narr += 5  # add 5 to the array",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 4651,
            "material": "Lainnya",
            "instruction": "Write a python program to extract the title of a given website",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.wikipedia.org' \npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntitle = soup.find('title').text\nprint(title)\n# Output: Wikipedia",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4654,
            "material": "Lainnya",
            "instruction": "Generate a python program to scramble a sequence of characters.",
            "question": "import ___ \n\n# Initialize the string  \nstring = 'Hello World!'\n\n# Convert the string to a list\nchar_list = list(string) \n\n# Shuffle the list\nrandom.shuffle(char_list) \n\n# Convert back the list to a string\nrandom_string = ''.join(char_list)\n\n# Print the scrambled string\nprint(random_string)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4657,
            "material": "Lainnya",
            "instruction": "Generate a Python program to visualize multiple dimensions of data with matplotlib.",
            "question": "import ___.pyplot as plt\n\nx = [0, 1, 2, 3, 4, 5, 6, 7]\ny = [0, 1, 4, 9, 16, 25, 36, 49]\n\nplt.plot(x, y)\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\nplt.title('Plot of X and Y')\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 4667,
            "material": "Lainnya",
            "instruction": "Create a Python script to generate a given number of random numbers within a particular range",
            "question": "# Import library\nimport ___\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4682,
            "material": "Lainnya",
            "instruction": "Analyze the following data and build a linear regression model in Python.",
            "question": "import ___ as np\n\nx = np.array([1,2,3,4,5,6,7])\ny = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])\n\nm = ((np.mean(x)*np.mean(y)) - np.mean(x*y))/((np.mean(x)**2) - np.mean(x**2))\nc = np.mean(y) - (m*np.mean(x))\n\nprint(\"slope =\", m)\nprint(\"intercept =\", c)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 4687,
            "material": "Lainnya",
            "instruction": "Create a web scraper using Python that collects the title and content from the homepage of a given website.",
            "question": "import ___\nimport bs4\n\nurl = 'https://www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4708,
            "material": "Lainnya",
            "instruction": "Transform the following data frame in Python.",
            "question": "import ___ as pd\n\ndf = pd.DataFrame(df)\n\n#Transform the dataframe\ndf['age_group'] = [ \"under 20\" if a < 20\n   else \"20-35\" if a < 35\n   else \"over 35\"\n   for a in df['age']]",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4715,
            "material": "Lainnya",
            "instruction": "Build a REST API endpoint in Python that takes a user's name and returns a personalized greeting message.",
            "question": "from flask import ___\n\napp = Flask(__name__)\n\n@app.route('/greeting', methods=['GET'])\ndef get_greeting(name):\n return 'Hello, ' + name + '!'\n\nif __name__ == '__main__':\n app.run()",
            "correct_answer": "Flask",
            "duration": 20
        },
        {
            "question_id": 4718,
            "material": "Lainnya",
            "instruction": "Design a Python program that prints a sentence every 10 seconds.",
            "question": "import ___\n\nsentence = \"Hello World\"\n\nwhile True:\n    print(sentence)\n    time.sleep(10)",
            "correct_answer": "time",
            "duration": 20
        },
        {
            "question_id": 4723,
            "material": "Lainnya",
            "instruction": "Create a Python program to capture the data from a web page.",
            "question": "import ___\nimport lxml.html as lh\n\nurl = 'https://www.example.com/'\npage = requests.get(url)\ndoc = lh.fromstring(page.content)\n\n# parse and extract data from webpage\ndata = doc.xpath('//p/text()')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4773,
            "material": "Lainnya",
            "instruction": "Develop a python program to remove punctuations from an input text",
            "question": "import ___ \n  \n# Remove punctuations from string \ndef remove_punctuations(s): \n    s = ''.join([i for i in s if i not in frozenset(string.punctuation)]) \n    return s \n  \n# Driver Code \nif __name__ == \"__main__\" : \n  \n    text = \"This is a great world - let's start coding!\"\n    print(remove_punctuations(text))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 4778,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python to extract all data from a page with the URL: http://example.com",
            "question": "import ___ \nfrom bs4 import BeautifulSoup\n\nr = requests.get(\"http://example.com\") \ndata = r.text \nsoup = BeautifulSoup(data, 'html.parser') \n\nfor item in soup.find_all(\"div\"): \n print(item.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4817,
            "material": "Lainnya",
            "instruction": "Calculate the number of days between two dates in Python.",
            "question": "from datetime import ___ \n  \n# Function to calculate number of days between two dates \ndef getNumberOfDays(date1, date2): \n    return (date2 - date1).days \n  \n# Driver program \ndate1 = date(2020, 8, 18) \ndate2 = date(2020, 9, 1) \nprint(getNumberOfDays(date1, date2))",
            "correct_answer": "date",
            "duration": 20
        },
        {
            "question_id": 4834,
            "material": "Lainnya",
            "instruction": "Write a Python program to process a dataset of words and count how many times each unique word appears.",
            "question": "from collections import ___\n\nwords = ['apple', 'apple', 'banana', 'apple', 'orange', 'banana', 'pear', 'orange', 'orange']\n\nword_counts = Counter(words)\n\nfor word, count in word_counts.items():\n    print(f'{word}: {count}')",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 4843,
            "material": "Lainnya",
            "instruction": "Create a Python script to convert JSON data to CSV format.",
            "question": "import ___\nimport json\n\ndata = {\n    \u201cname\u201d: \u201cJohn\u201d,\n    \u201cage\u201d: 30,\n    \u201ccity\u201d: \u201cNew York\u201d\n}\n\nwith open('data.csv', 'w') as csvfile:\n writer = csv.writer(csvfile)\n writer.writerow([\"Name\", \"Age\", \"City\"])\n writer.writerow([data[\"name\"], data[\"age\"], data[\"city\"]])",
            "correct_answer": "csv",
            "duration": 20
        },
        {
            "question_id": 4846,
            "material": "Lainnya",
            "instruction": "Write a Python program that extracts the domain name from a given URL.",
            "question": "def get_domain(url):\n  from urllib.parse import ___\n  parsed_uri = urlparse(url)\n  domain = '{uri.netloc}'.format(uri=parsed_uri)\n  return domain\n\ndomain = get_domain(\"https://www.google.com\")\nprint(domain)",
            "correct_answer": "urlparse",
            "duration": 20
        },
        {
            "question_id": 4849,
            "material": "Lainnya",
            "instruction": "Create a web service in Python which accepts a URL as input and prints the HTML of the page.",
            "question": "import ___\n\ndef get_html(url):\n    response = requests.get(url)   \n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\n\nhtml = get_html(\"www.example.com\")\nif html:\n    print(html)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4852,
            "material": "Lainnya",
            "instruction": "Create a Python program to generate N random numbers between 0 and 1",
            "question": "import ___\n\ndef gen_random_numbers(n):\n    rand_nums = []    \n    for i in range(n):\n        rand_nums.append(random.uniform(0.0, 1.0))\n    return rand_nums\n\nrand_nums = gen_random_numbers(N)\nprint(rand_nums)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 4855,
            "material": "Lainnya",
            "instruction": "Create a Python program to open the user's default web browser with the given URL as an argument.",
            "question": "import ___\n\nurl = 'www.example.com'\nwebbrowser.open_new(url)",
            "correct_answer": "webbrowser",
            "duration": 20
        },
        {
            "question_id": 4859,
            "material": "Lainnya",
            "instruction": "Generate a Python note to query a database and display 5 records.",
            "question": "import ___\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# query the database\nc.execute('SELECT * FROM users LIMIT 5')\n\n# fetch all records\nrecords = c.fetchall()\n\n# print all records\nfor record in records:\n  print(record)\n\n# close the connection\nconn.close()",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 4869,
            "material": "Lainnya",
            "instruction": "Create a distance calculator program in Python that takes in two coordinates and returns the distance between them.",
            "question": "import ___\n\ndef distance_calc(coord1, coord2):\n    \"\"\"Returns the distance between two coordinates.\"\"\"\n    x1, y1 = coord1\n    x2, y2 = coord2\n    dist = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    return dist\n\nprint(distance_calc(coordinates1, coordinates2))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 4885,
            "material": "Lainnya",
            "instruction": "Write a Python script to calculate the distance between two points.",
            "question": "import ___\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 4893,
            "material": "Lainnya",
            "instruction": "Create a python module to edit a dataframe",
            "question": "import ___ as pd\n\ndef edit_dataframe(df):\n\n    # Adding the column 'new_value'\n    df['new_value'] = df['value'] + 1\n\n    # Replacing values in the 'id' column\n    df['new_id'] = df['id'].map(lambda x: 'id_' + str(x))\n\n    # Updating the value in the 'value' column\n    df.value = df.value * 2\n\n    return df",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 4911,
            "material": "Lainnya",
            "instruction": "Create a Python script which uses the BeautifulSoup library to parse the data of a given webpage.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4920,
            "material": "Lainnya",
            "instruction": "Create a Python program to sort a dictionary by value in descending order.",
            "question": "# Sort the given dictionary by value \nimport ___\n \nd = {'a':3, 'b':1, 'c':5, 'd':4, 'e':2}\nsorted_d = sorted(d.items(), key=operator.itemgetter(1),reverse=True)\n \nprint(sorted_d)\n\n// Output: [('c', 5), ('d', 4), ('a', 3), ('e', 2), ('b', 1)]",
            "correct_answer": "operator",
            "duration": 20
        },
        {
            "question_id": 4948,
            "material": "Lainnya",
            "instruction": "Implement a web scraper in Python that downloads the contents of a given URL.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nhtml = str(soup)\n\nwith open(\"output.html\", \"w\") as file:\n    file.write(html)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4961,
            "material": "Lainnya",
            "instruction": "Generate a Python program that uses the requests library to make a GET request to an API endpoint.",
            "question": "import ___\n\n# Make a get request to get the latest users\nresponse = requests.get('https://jsonplaceholder.typicode.com/users')\n\n# Get the response data as a JSON\ndata = response.json()\n\n# Print the data\nprint(data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 4990,
            "material": "Lainnya",
            "instruction": "Using regular expression in Python, write a program to extract any birthday dates from a text.",
            "question": "import ___\n\ntext = 'This is a text where I am talking about my birthday 4th October 2020'\n\npattern = r'\\d{1,2}\\s[A-Z][a-z]{2,8}\\s\\d{4}'\n\nmatch = re.search(pattern, text)\nif match:\n    print(match.group())",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 4997,
            "material": "Lainnya",
            "instruction": "Create a Python program that extrapolates the most frequent word from a given text.",
            "question": "from collections import ___\n\ndef most_frequent_word(string):\n    split_string = string.split(\" \")\n    counter = Counter(split_string)\n    return counter.most_common(1)[0][0]\n\nprint(most_frequent_word(\"This is an example of a text with some words\"))",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 5003,
            "material": "Lainnya",
            "instruction": "Implement a hash algorithm according to these specifications in Python.",
            "question": "import ___\n\ndef generate_hash(string):\n    hashed_string = hashlib.sha1(string.encode())\n    return hashed_string.hexdigest()[:6]\n\nhashed_string = generate_hash(\"Code Generation Task Instructions\")\nprint(hashed_string)",
            "correct_answer": "hashlib",
            "duration": 20
        },
        {
            "question_id": 5016,
            "material": "Lainnya",
            "instruction": "Create a Python Flask application that takes a user input and generates a new text from the input.",
            "question": "from flask import ___\n\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef generate_newtext():\n input_text = request.form.get('input_text')\n \n new_text = input_text + \" She had wonderful adventures exploring the world around her and filled her days with joy.\"\n \n return new_text\n \nif __name__ == '__main__':\n app.run()",
            "correct_answer": "Flask",
            "duration": 20
        },
        {
            "question_id": 5054,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a random password consisting of lowercase alphabets, numerical digits and special characters.",
            "question": "import ___\nimport random\n\ndef generate_password(length):\n password_characters = string.ascii_lowercase + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(length))\n return password",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 5062,
            "material": "Lainnya",
            "instruction": "Use regex in a Python program to find all instances of the word \"the\".",
            "question": "import ___\n\nstring = 'The quick brown fox jumps over the lazy dog'\n\n# Prints matches\nmatches = re.findall('the', string, re.IGNORECASE)\nprint(matches)",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 5110,
            "material": "Lainnya",
            "instruction": "Create a web API in Python to get records from a database table.",
            "question": "from flask import ___, request, jsonify\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/api/v1/employees', methods=['GET'])\ndef get_employees():\n conn = sqlite3.connect('employees.db')\n cur = conn.cursor()\n data = cur.execute('SELECT * from employee').fetchall()\n conn.close()\n return jsonify(data)\n\nif name == 'main':\n app.run(debug=True)",
            "correct_answer": "Flask",
            "duration": 20
        },
        {
            "question_id": 5142,
            "material": "Lainnya",
            "instruction": "Given a sentence, tokenize it in Python, separating each of the words using the NLTK library.",
            "question": "import ___\n\ntokenized = nltk.word_tokenize(\"The cat sat on the mat.\")\nprint(tokenized)\n# Output: ['The', 'cat', 'sat', 'on', 'the', 'mat', '.']",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 5144,
            "material": "Lainnya",
            "instruction": "Use the following data to create a graphical representation in Python.",
            "question": "import ___.pyplot as plt\n\nx = [1,2,3,4,5]\ny = [2,4,6,8,10]\n\nplt.plot(x,y)\nplt.title('Graph title')\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\n\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 5148,
            "material": "Lainnya",
            "instruction": "Create a Python script to download a zip archive from a URL and extract it in the current directory.",
            "question": "import ___\nimport shutil\nimport zipfile\n\nurl = 'https://example.com/myzip.zip'\n\nresponse = requests.get(url, stream=True)\n\nwith open('myzip.zip', 'wb') as f:\n shutil.copyfileobj(response.raw, f)\n\nwith zipfile.ZipFile('myzip.zip', 'r') as f:\n f.extractall()",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5171,
            "material": "Lainnya",
            "instruction": "Create a Python script to look up the IMDB rating of a movie by its title.",
            "question": "import ___\n\nia = imdb.IMDb()\nmovie = ia.search_movie('The Prestige')[0]\nia.update(movie)\n\nprint(movie['rating'])\n// Output: 8.5",
            "correct_answer": "imdb",
            "duration": 20
        },
        {
            "question_id": 5196,
            "material": "Lainnya",
            "instruction": "Write a procedure in Python to rectify misspelled words in a paragraph.",
            "question": "import ___\n\ndef fix_spelling(paragraph):\n    words = paragraph.split()\n    corrected_words = []\n    for word in words:\n        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))\n \n    return \" \".join(corrected_words)\n\nprint(fix_spelling(\"My favarite flowers are rose and tulples\"))",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 5225,
            "material": "Lainnya",
            "instruction": "Make a POST request using Python to the specified URL.",
            "question": "import ___\n\nurl = 'http://example.com/'\nresponse = requests.post(url)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5234,
            "material": "Lainnya",
            "instruction": "Generate a bar chart using the given data in Python.",
            "question": "import ___.pyplot as plt\n\ndata = [10, 5, 20, 25, 15]\n\nplt.bar(range(len(data)), data, color='blue')\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 5244,
            "material": "Lainnya",
            "instruction": "Categorize the following text into distinct classes using natural language processing techniques in Python.",
            "question": "from sklearn.feature_extraction.text import ___ \n  \n# create the transform \nvectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\") \n  \n# tokenize and build vocab \nvectorizer.fit([text]) \n  \n# summarize \nprint(vectorizer.vocabulary_) \n\n# output {'apple': 0, 'banana': 1, 'cherry': 2}",
            "correct_answer": "CountVectorizer",
            "duration": 20
        },
        {
            "question_id": 5294,
            "material": "Lainnya",
            "instruction": "Compile this Python code into an executable.",
            "question": "import ___\n\npy_compile.compile('sample.py', cfile='sample.pyc')",
            "correct_answer": "py_compile",
            "duration": 20
        },
        {
            "question_id": 5313,
            "material": "Lainnya",
            "instruction": "Build a web scraping script in Python that stores the HTML content of a website in a variable.",
            "question": "import ___.request\n\nurl = 'https://www.example.com'\n\nhtml_content = urllib.request.urlopen(url).read()",
            "correct_answer": "urllib",
            "duration": 20
        },
        {
            "question_id": 5334,
            "material": "Lainnya",
            "instruction": "Given the following JSON input, write a Python program to calculate the average age of all the users.",
            "question": "import ___\n\nusers = json.loads(input)\ntotal_age = 0\nfor user in users:\n total_age += user[\"age\"]\n\naverage_age = total_age / len(users)\n\nprint(f\"Average age of users is {average_age}\")",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 5340,
            "material": "Lainnya",
            "instruction": "Write a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word.",
            "question": "import ___\n\ndictionary={}\n\nfor line in sys.stdin:\n words_in_line = line.split()\n for word in words_in_line:\n word=word.lower()\n if word in dictionary:\n dictionary[word]+=1\n else:\n dictionary[word]=1\n\nfor word in dictionary:\n print(word +\":\"+ str(dictionary[word]))",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 5344,
            "material": "Lainnya",
            "instruction": "Write a Python script to fetch the current stock price of a given company",
            "question": "from yahoo_fin import ___ as si\n\ndef get_stock_price(name):\n    data = si.get_live_price(name)\n    return data\n\nif __name__ == '__main__':\n    name = 'ABC'\n    print(get_stock_price(name))",
            "correct_answer": "stock_info",
            "duration": 20
        },
        {
            "question_id": 5345,
            "material": "Lainnya",
            "instruction": "Perform classification on the given dataset using Support Vector Machines in Python.",
            "question": "from sklearn.svm import ___\n\nmodel = SVC(kernel = 'linear', probability=True) \nmodel.fit(X, y)",
            "correct_answer": "SVC",
            "duration": 20
        },
        {
            "question_id": 5351,
            "material": "Lainnya",
            "instruction": "Generate a Python script that takes two arguements, a filename and a number, and prints out all the lines from the filename whose length is less than the number.",
            "question": "import ___\n\nfile_name = sys.argv[1]\nnumber = int(sys.argv[2])\n\nwith open(file_name, 'r') as f:\n for line in f:\n if len(line) < number:\n print(line, end='')",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 5373,
            "material": "Lainnya",
            "instruction": "Create a Python program that reads in a CSV, parse the data, and generates a JSON report.",
            "question": "import ___\nimport json\n \ncsv_file = open('data.csv', 'r')\njson_file = open('data.json', 'w')\n \nfieldnames = (\"Name\",\"Age\",\"Profession\")\nreader = csv.DictReader(csv_file, fieldnames)\nout = json.dumps([r for r in reader])\njson_file.write(out)",
            "correct_answer": "csv",
            "duration": 20
        },
        {
            "question_id": 5398,
            "material": "Lainnya",
            "instruction": "Compute the median of a sequence of numbers in Python.",
            "question": "import ___ \nsequence = [3, -2, 4, 7, 10, 12, 11, -4, 8]\nmedian = statistics.median(sequence) \nprint(median) # Output: 7",
            "correct_answer": "statistics",
            "duration": 20
        },
        {
            "question_id": 5414,
            "material": "Lainnya",
            "instruction": "Create a Python program that takes a varchar input and encodes it using the Base 64 algorithm.",
            "question": "import ___\n\nstring = \"Hello World!\"\n\ndata_bytes = string.encode('ascii')\nencoded_string = base64.b64encode(data_bytes)\n\nprint(encoded_string)",
            "correct_answer": "base64",
            "duration": 20
        },
        {
            "question_id": 5437,
            "material": "Lainnya",
            "instruction": "Generate a Python program to scrape the headlines from a given news article.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.bbc.com/news/uk-england-london-53741405\"\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nheadlines = soup.find_all('h1', class_='story-body__h1')\nfor headline in headlines:\n print(headline.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5501,
            "material": "Lainnya",
            "instruction": "Create a web scraper using Python and the requests library to scrape data from a specific website.",
            "question": "import ___\n\n# Specify your website URL\nurl = 'https://www.example.com'\n\n# Send a request to the website\nresponse = requests.get(url)\n\n# Check the status of the response\nif response.status_code == 200:\n # Parse the HTML of the response\n response_html = response.content\n\n # Do something with the HTML\n print(response_html)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5536,
            "material": "Lainnya",
            "instruction": "Convert the following Matlab code into Python.",
            "question": "import ___ as np\na = np.arange(0, 101, 10)\nb = np.zeros(101)\nfor i in range(1, 101):\n    b[i] = 5 * i",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5540,
            "material": "Lainnya",
            "instruction": "Write a Python program to clean a given text from unwanted words and punctuations.",
            "question": "import ___\n\ndef clean_text(text):\n # remove punctuation \n translator = str.maketrans('', '', string.punctuation)\n text = text.translate(translator)\n \n # remove unwanted words\n unwanted_words = {'the', 'and', 'a'}\n words = text.split(' ')\n words = [word for word in words if word not in unwanted_words]\n \n return ' '.join(words)",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 5544,
            "material": "Lainnya",
            "instruction": "Create an AI program in Python that determines whether a given sentence is a statement or a question.",
            "question": "import ___\n\ndef is_question(sentence):\n sentence = sentence.strip()\n if sentence.endswith('?'):\n return True\n else:\n return False\n\nsentence = \"The weather is cold today\"\nprint(is_question(sentence)) # False\n\nsentence = \"Is it raining outside?\"\nprint(is_question(sentence)) # True",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 5546,
            "material": "Lainnya",
            "instruction": "Create a program in Python to compute the cosine similarity between two given vectors.",
            "question": "import ___\n\ndef cos_sim(vec1, vec2):\n    sim = numpy.dot(vec1, vec2)/(numpy.linalg.norm(vec1)* numpy.linalg.norm(vec2)) \n    return sim\n\nvec1 = [2, 5]\nvec2 = [1, 3]\nprint(\"Cosine Similarity:\", cos_sim(vec1, vec2))",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5569,
            "material": "Lainnya",
            "instruction": "Classify the given words using a Python classification program.",
            "question": "import ___\nfrom nltk.tokenize import word_tokenize\n\nwords = ['horse', 'dog', 'cat']\n\ntokens = [word_tokenize(word) for word in words]\n\nfor token in tokens:\n    print(nltk.pos_tag([token])[0][1])\n\n# prints NN, NN, NN",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 5590,
            "material": "Lainnya",
            "instruction": "Create a simple webscraper using Python and Beautiful Soup.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5591,
            "material": "Lainnya",
            "instruction": "Generate a correct python program to fetch the price of a given stock ticker symbol.",
            "question": "import ___\n\ndef get_stock_price(symbol):\n url = \"https://finance.yahoo.com/quote/\" + symbol\n req = requests.get(url)\n data = req.json()\n return data['regularMarketPrice']",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5623,
            "material": "Lainnya",
            "instruction": "Design a classification model in Python that can predict the probability of a customer churning.",
            "question": "import ___ as np\nfrom sklearn.linear_model import LogisticRegression \n\nX = np.array([[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]])\ny = np.array([0, 0, 1, 0, 0])\n\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\nprediction = model.predict_proba([[1, 33, 0]])",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5638,
            "material": "Lainnya",
            "instruction": "Using an HTTP library in Python (e.g. Requests), make a POST request and send a JSON payload to a web service.",
            "question": "import ___\n\nurl = 'https://example.com/api/submit'\ndata = {'message': 'Hello!', 'name': 'John' }\n\nr = requests.post(url, json=data)\nprint(r.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5653,
            "material": "Lainnya",
            "instruction": "Create a program in Python to predict the sentiment of a phrase using a provided pretrained model.",
            "question": "import ___ as np\nfrom keras.models import load_model\n\n# Load the model\nmodel = load_model(model_path)\n\n# Encode the phrase\nphrase_encoded = np.array([phrase])\n\n# Make the prediction\nprediction = model.predict(phrase_encoded)\n\n# Print the result\nprint(\"The sentiment of the phrase is: {}\".format(prediction))",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5656,
            "material": "Lainnya",
            "instruction": "Write a Python program to select all the Sundays of a specified year.",
            "question": "import ___\n\ndef select_all_sundays(year):\n    sunday_list = []\n    for n in range(1,13):\n        sundays = [d for d in [datetime.date(year, n, d) for d in range(1, 32)]\n                if d.weekday() == 6]\n        sunday_list.extend(sundays)\n    return sunday_list\n\nif __name__ == '__main__':\n    year = 2020\n    sunday_list = select_all_sundays(year)\n    print(sunday_list)",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 5675,
            "material": "Lainnya",
            "instruction": "Create a Python program to select high temperature days based on a given dataset.",
            "question": "import ___ as pd\n\n# Load data\ndf = pd.read_csv('Oregon_OregonState_97_02.csv', sep=',', index_col=0)\n\n# Select days with high temperature\nhigh_temp_days = df.query('T_MAX > 25')\n\n# Display results\nprint(high_temp_days)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 5680,
            "material": "Lainnya",
            "instruction": "Develop a Python script to extract some text from a website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n \nresponse = requests.get(\"http://example.com\")\n \nsoup = BeautifulSoup(response.content, \"html.parser\")\n \ntext = soup.get_text()\nprint(text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5717,
            "material": "Lainnya",
            "instruction": "Develop a web scraper in Python to get all emails from a web page.",
            "question": "import ___ \nfrom bs4 import BeautifulSoup\n\n# Get request to the URL\npage = requests.get(\"http://example.com\")\n\n# Create a BeautifulSoup object from the response\nsoup = BeautifulSoup(page.content, 'html.parser') \n\n# Get all emails from the page\nemails = soup.find_all('a', {'href': 'mailto'})\n\nfor email in emails:\n    print(email.get('href').replace(\"mailto:\", \"\"))",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5723,
            "material": "Lainnya",
            "instruction": "Create a machine learning model in Python to classify a given dataset into 5 different classes.",
            "question": "from sklearn.neighbors import ___\n\n# Initialize KNN model\nknn_model = KNeighborsClassifier(n_neighbors=5)\n\n# Fit the model\nknn_model.fit(X, y)\n\n# Predict the classes\ny_pred = knn_model.predict(X)",
            "correct_answer": "KNeighborsClassifier",
            "duration": 20
        },
        {
            "question_id": 5737,
            "material": "Lainnya",
            "instruction": "Create an API route in Python that allows users to retrieve the top 5 most recent posts from a blog.",
            "question": "import ___\n\n@app.route('/posts')\ndef get_posts():\n posts = Post.query \\\n .order_by(Post.created_at.desc()) \\\n .limit(5)\n return jsonify([{\n 'title': post.title,\n 'date': post.created_at.strftime('%Y-%m-%d'),\n 'body': post.body\n } for post in posts])",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 5748,
            "material": "Lainnya",
            "instruction": "Create a web scraping application in Python that downloads the source code of a website given its URL.",
            "question": "import ___.request\n\nurl = \"https://www.example.com/\"\n\nresponse = urllib.request.urlopen(url) \nwebContent = response.read()\n\nf = open(\"example.html\", \"w\")\nf.write(webContent.decode('utf-8'))\nf.close()",
            "correct_answer": "urllib",
            "duration": 20
        },
        {
            "question_id": 5783,
            "material": "Lainnya",
            "instruction": "Write a Python script to predict the sentiment of a given sentence using the TextBlob library.",
            "question": "import ___\n\nsentence = \"Life is full of surprises.\"\nsentiment = textblob.TextBlob(sentence).sentiment.polarity\n\nif sentiment == 0:\n # neutral sentiment\n print(\"Neutral Sentiment\")\nelif sentiment > 0:\n # positive sentiment\n print(\"Positive Sentiment\")\nelse:\n # negative sentiment\n print(\"Negative Sentiment\")",
            "correct_answer": "textblob",
            "duration": 20
        },
        {
            "question_id": 5786,
            "material": "Lainnya",
            "instruction": "Create a sentiment classifier using a linear regression algorithm in Python.",
            "question": "import ___ as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5789,
            "material": "Lainnya",
            "instruction": "Generate a Python script that extracts text from a given PDF and converts it to CSV.",
            "question": "import ___\nimport pdfplumber\nimport csv\n\n# Open the pdf\nwith pdfplumber.open(file_path) as pdf:\n # Extract text\n text = pdf.extract_text()\n \n # Convert to list\n lines = text.splitlines()\n \n # Save as csv\n with open('file.csv', 'w') as csvfile:\n wr = csv.writer(csvfile)\n for line in lines:\n wr.writerow(line.split())",
            "correct_answer": "os",
            "duration": 20
        },
        {
            "question_id": 5793,
            "material": "Lainnya",
            "instruction": "Write a Python program to predict the grade of a student, based on the past exam results.",
            "question": "import ___ as np\n\n# Input data\nmath = 84\nenglish = 89\nbiology = 82\n\n# Define weights\nmath_weight = 0.3\nenglish_weight = 0.4\nbiology_weight = 0.3\n\n# Compute weighted sum\ngrade = math * math_weight + english * english_weight + biology * biology_weight\n\n# Print the grade\nprint('Mia\\'s grade is: {:.2f}'.format(grade))",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5805,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate random numbers in a specified range.",
            "question": "import ___ \n  \n# Generates a random integer between 0 and 1000 \nx = random.randint(0,1000) \n  \nprint(x)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 5811,
            "material": "Lainnya",
            "instruction": "In Python, parse the following XML document and extract the book title and author.",
            "question": "# import ___ necessary libraries\nimport xml.etree.ElementTree as ET\n\n# Parse the XML document\nroot = ET.fromstring(xml_doc)\n\nfor book in root:\n    if book.tag == 'title':\n        title = book.text\n    elif book.tag == 'author':\n        author = book.text\n\nprint(f\"Book Title: {title}, Author: {author}\")",
            "correct_answer": "the",
            "duration": 20
        },
        {
            "question_id": 5832,
            "material": "Lainnya",
            "instruction": "Generate a program in Python to calculate the area of a circle given its radius.",
            "question": "import ___\n\ndef calculate_area_of_circle(radius):\n    area = math.pi * radius ** 2\n    return area\n\nresult = calculate_area_of_circle(5.5)\nprint('The area of the circle is: ', result)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 5835,
            "material": "Lainnya",
            "instruction": "Write a Python script to make an HTTP request using the Requests library.",
            "question": "import ___\n\nresp = requests.get(url)\n\nif resp.status_code == 200:\n print('Success!')\n print(resp.text)\n else:\n print('An error occurred.')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5852,
            "material": "Lainnya",
            "instruction": "Create a program in Python that visualizes the data given.",
            "question": "import ___.pyplot as plt\n\ndata_set = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15]\n]\n\nfig, ax = plt.subplots()\nax.plot(data_set)\nax.legend([\"Group 1\", \"Group 2\", \"Group 3\"])\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 5855,
            "material": "Lainnya",
            "instruction": "Convert the following SQL query to Python.",
            "question": "import ___\n\ndb = sqlite3.connect(\"employee_table.db\") # Assumes the table is in a file named employee_table.db\ncur = db.cursor()\n\n# Execute the SQL command\ncur.execute(\"SELECT * FROM employee_table WHERE salary < 10000\")\n\n# Commit your changes\ndb.commit()\n\n# Get the results\nresults = cur.fetchall()\n\n# Print the results\nfor row in results:\n    print(row)",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 5867,
            "material": "Lainnya",
            "instruction": "Create a Python script to find the area of a circle when given its radius.",
            "question": "import ___\n \ndef area_circle(radius):\n return math.pi * (radius ** 2)\n \nprint(area_circle(radius))",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 5868,
            "material": "Lainnya",
            "instruction": "Write a Python script to retrieve a title from a given URL.",
            "question": "import ___\n\nurl = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n title = response.text.split(\"<title>\")[1].split(\"</title>\")[0]\n print(title)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5871,
            "material": "Lainnya",
            "instruction": "Create a Python program that uses natural language processing and machine learning to analyze sentiment in a given sentence.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food was absolutely delicious.\"]\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n print(sentence)\n ss = sid.polarity_scores(sentence)\n for k in ss:\n print('{0}: {1}'.format(k, ss[k]), end='\\n')",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 5875,
            "material": "Lainnya",
            "instruction": "Transform this JSON into a Python Dictionary.",
            "question": "import ___\n\n# Load the JSON data into a Python Dictionary\ndata = json.loads('{\"name\": \"John\", \"age\": 28, \"location\": \"New York\"}')",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 5907,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python using Selenium to extract the contents of a webpage.",
            "question": "from selenium import ___\n\nurl = 'https://en.wikipedia.org/wiki/Python'\n\ndriver = webdriver.Chrome()\ndriver.get(url)\n\npage_content = driver.page_source\n \ndriver.close()\n\n# Process page_content",
            "correct_answer": "webdriver",
            "duration": 20
        },
        {
            "question_id": 5917,
            "material": "Lainnya",
            "instruction": "Develop an API call in Python to fech data from a website.",
            "question": "import ___ \n\nURL = \"www.example.com\" \n  \n# defining a params dict for the parameters to be sent to the API \nPARAMS = { } \n  \n# sending get request and saving the response as response object \nr = requests.get(url = URL, params = PARAMS) \n  \n# extracting data in json format \ndata = r.json() \nprint(data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5920,
            "material": "Lainnya",
            "instruction": "Create a Python script to download a web page from a URL.",
            "question": "import ___\n\n# Get the webpage\nurl = 'https://example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 5926,
            "material": "Lainnya",
            "instruction": "Generate a Python script that plots the relationship between two variables.",
            "question": "import ___.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Relationship between x and y\")\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 5949,
            "material": "Lainnya",
            "instruction": "Create a machine learning model in Python to predict the age of a person from their height and weight.",
            "question": "import ___ as np\nfrom sklearn.linear_model import LinearRegression\n\n# Creating the X and Y datasets \nx = []\ny = []\n\n# Adding the data\nx.append([59, 140])\ny.append(30)\n\nx = np.array(x)\ny = np.array(y)\n\n# Creating and fitting the model \nmodel = LinearRegression().fit(x, y)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 5959,
            "material": "Lainnya",
            "instruction": "Create a command line tool in Python that takes input from the user and prints a message. The message should be \"You entered <input>.\"",
            "question": "import ___\n\ndef main():\n args = sys.argv[1:]\n\n if args and len(args) == 1:\n print('You entered {}.'.format(args[0]))\n else:\n print('Please provide a single argument.')\n\nif __name__ == \"__main__\":\n main()",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 5971,
            "material": "Lainnya",
            "instruction": "Construct a Python program to calculate the age in years of a person given their birthdate.",
            "question": "import ___\n\ndef calculate_age(birthdate):\n\n    today = datetime.date.today()\n    current_year = today.year\n\n    age = current_year - birthdate.year\n\n    if ((birthdate.month, birthdate.day) > (today.month, today.day)):\n        age -= 1\n    \n    return age\n\nbirthdate = datetime.date(1996, 6, 11)\nage = calculate_age(birthdate)\nprint(age) # 24",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 5972,
            "material": "Lainnya",
            "instruction": "Write a Python program that prints the time in a given timezone.",
            "question": "from datetime import ___\nimport pytz\n\ndef print_time(tz):\n  timezone = pytz.timezone(tz)\n  print(datetime.now(timezone).strftime(\"%H:%M:%S\"))\n\nprint_time(\"UTC+11:00\")",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 5975,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a random password with length x.",
            "question": "import ___\nimport random\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits\n    password = \"\"\n    for i in range(length):\n        password += random.choice(characters)\n    return password\n\nresult = generate_password(8)\nprint(result)",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 5986,
            "material": "Lainnya",
            "instruction": "Convert the following code from python 2.x to python 3.x.",
            "question": "import ___\n\nwith open(\"filename.csv\", 'r', newline='') as f:\n    csvReader = csv.reader(f)",
            "correct_answer": "csv",
            "duration": 20
        },
        {
            "question_id": 6029,
            "material": "Lainnya",
            "instruction": "Create a Pie Chart in Python with the following data",
            "question": "import ___.pyplot as plt\n\nitems = ['Pen', 'Pencil', 'Eraser']\nfrequencies = [4, 9, 3]\n\nplt.pie(frequencies, labels=items, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 6056,
            "material": "Lainnya",
            "instruction": "Write a Python program to find all the words with a length equal to 5 in a sentence and replace them with a placeholder.",
            "question": "sentence = 'The quick brown fox jumped over the lazy dog'\nwords = sentence.split()\n\nfor i in range(len(words)):\n if len(words[i]) == 5:\n words[i] = '_____'\n\nmodified_sentence = ' '.join(words)\nprint(modified_sentence)\n# Output: The _____ brown _____ jumped over the _____ _____",
            "correct_answer": null,
            "duration": 20
        },
        {
            "question_id": 6067,
            "material": "Lainnya",
            "instruction": "Create a web scraper program in Python that can scrape a given website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the website using soup",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6070,
            "material": "Lainnya",
            "instruction": "Create a Python program to visualize Pandas DataFrame.",
            "question": "import ___.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],\n    'Age': [18, 25, 35, 45]\n})\n\nax = df.plot.bar(x='Name', y='Age', rot=0)\n\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 6072,
            "material": "Lainnya",
            "instruction": "Using the provided data, generate a decision tree classifier in Python.",
            "question": "from sklearn.tree import ___\n\n# Create and train a Decision Tree classifier\nclf = DecisionTreeClassifier().fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\n\n# Print the predictions\nprint(predictions)",
            "correct_answer": "DecisionTreeClassifier",
            "duration": 20
        },
        {
            "question_id": 6075,
            "material": "Lainnya",
            "instruction": "Create a python script that filters out all negative numbers from the given matrix",
            "question": "import ___ as np\n\ndef filter_out_negative(matrix):\n  # Convert matrix to numpy array\n  matrix = np.array(matrix)\n  # Find all negative numbers and set them to 0\n  matrix[matrix < 0] = 0\n  return matrix\n\nresult = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])\nprint(result)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6097,
            "material": "Lainnya",
            "instruction": "Write a Python program using the SciPy library to solve the given equation.",
            "question": "from scipy.optimize import ___\n\n#define the equation\ndef equation(p):\n    x, y, z = p\n    return (3*x - 2*y + z - 5)\n\n#solve the equation\nresult =  fsolve(equation, (1, 1, 1)) \n\n#Print the result \nprint(result)",
            "correct_answer": "fsolve",
            "duration": 20
        },
        {
            "question_id": 6112,
            "material": "Lainnya",
            "instruction": "Convert this SQL query to Python.",
            "question": "import ___\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')",
            "correct_answer": "pydb",
            "duration": 20
        },
        {
            "question_id": 6128,
            "material": "Lainnya",
            "instruction": "Create a network application in Python that sends a GET request to an API and parses the JSON response.",
            "question": "import ___\n\nurl = 'https://api.mydomain.com/getdata'\nresponse = requests.get(url)\n\ndata = response.json()\nprint(data)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6134,
            "material": "Lainnya",
            "instruction": "Create a Python script that replaces all words containing 3 or more consecutive vowels with \"*\".",
            "question": "import ___\n\ndef replaceConsecutiveVowels(word): \n    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) \n    return regex.sub(\"*\", word)\n\nword = \"entertainment\"\n\nprint(replaceConsecutiveVowels(word)) # Output: *",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 6153,
            "material": "Lainnya",
            "instruction": "Create a Python program to download and save a web page using the Requests library.",
            "question": "import ___\n\nurl = 'https://www.example.com'\n\nresponse = requests.get(url)\n\nwith open('example.html', 'wb') as file:\n file.write(response.content)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6160,
            "material": "Lainnya",
            "instruction": "Create an AIX application using Python that takes in user text and returns an appropriate response.",
            "question": "import ___ as gpt2\n\n# Load the GPT-2 model\nsess = gpt2.start_tf_sess()\ngpt2.load_gpt2(sess, run_name='run1')\n\n# Generate a response text\ngenerated_text = gpt2.generate(sess,\n temperature=0.7,\n prefix=\"I'm feeling sad.\",\n length=30,\n return_as_list=True\n)[0]\n\n# Print the response\nprint(generated_text)",
            "correct_answer": "gpt_2_simple",
            "duration": 20
        },
        {
            "question_id": 6166,
            "material": "Lainnya",
            "instruction": "Calculate the area of a circle using a Python program",
            "question": "import ___\n\ndef areaOfCircle(radius):\n    area = round(math.pi * (radius ** 2), 2)\n    return area\n\narea = areaOfCircle(7)\nprint(area)",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 6179,
            "material": "Lainnya",
            "instruction": "Develop a Python program that takes in an URL and extracts all the text content from the page.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\npage = requests.get(url)\nhtml = BeautifulSoup(page.content, 'html.parser')\n\ntexts = []\nfor txt in  html.find_all('p'):\n    texts.append(txt.text)\n\nprint(texts)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6196,
            "material": "Lainnya",
            "instruction": "Create a script in Python to apply Principal Component Analysis (PCA) on a given dataset.",
            "question": "from sklearn.decomposition import ___\n\n# define a 3x3 matrix \nmatrix_data = dataset \npca = PCA(n_components=2) \n\n# transform 3x3 matrix into 2x2 matrix \ntransformed_data = pca.fit_transform(matrix_data) \n\nprint(transformed_data)",
            "correct_answer": "PCA",
            "duration": 20
        },
        {
            "question_id": 6231,
            "material": "Lainnya",
            "instruction": "Take a given Python dictionary and transform it to a standardized format using JSON.",
            "question": "import ___\n\nmy_dict = {\n 'name': 'John Doe',\n 'age': 42,\n 'occupation': 'Programmer'\n}\n\n# Transform to JSON\nmy_json = json.dumps(my_dict)\n\nprint(my_json) # Output: {\"name\":\"John Doe\",\"age\":42,\"occupation\":\"Programmer\"}",
            "correct_answer": "json",
            "duration": 20
        },
        {
            "question_id": 6234,
            "material": "Lainnya",
            "instruction": "Create a Python script to read a given PDF document.",
            "question": "import ___\n\n# open and read the pdf file\nfile = open('document.pdf', 'rb')\nreader = PyPDF2.PdfFileReader(file)\n\n# read complete document\nfor page in range(reader.numPages):\n    print(reader.getPage(page).extractText())\n\nfile.close()",
            "correct_answer": "PyPDF2",
            "duration": 20
        },
        {
            "question_id": 6235,
            "material": "Lainnya",
            "instruction": "Write a Python code snippet to create a user account with the given name and password.",
            "question": "import ___\n\nname = \"John\"\npassword = \"J0hnP455w0rd\"\npassword_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\n# Create user account in the database\n# with the given name and hashed password\n# ----------\n# Code to store username and \n# hashed password in the database \n# ----------",
            "correct_answer": "bcrypt",
            "duration": 20
        },
        {
            "question_id": 6248,
            "material": "Lainnya",
            "instruction": "Construct a regular expression in Python to find all consecutive digits in a sentence.",
            "question": "import ___ \n\nstr = \"There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.\"\n\nnum_list = re.findall(r'\\d+', str)\nprint(num_list)\n# Output: ['3', '12', '22', '33']",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 6274,
            "material": "Lainnya",
            "instruction": "Write a Python program to validate a given email address. The program should ensure that the given email follows valid email syntax.",
            "question": "import ___\n\ndef is_valid_email(email):\n email_regex = re.compile(r\"^[\\w\\.\\+\\-]+\\@[\\w]+\\.[a-z]{2,3}$\")\n return email_regex.match(email)\n\nemail = \"example@example.com\"\nif is_valid_email(email):\n print(\"Valid email address\")\nelse:\n print(\"Invalid email address\")",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 6289,
            "material": "Lainnya",
            "instruction": "Write a python code to complete the following.",
            "question": "import ___ as np\narr = np.zeros(4, dtype=int)\n \nfor i in range(len(arr)):\n    arr[i] = i",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6322,
            "material": "Lainnya",
            "instruction": "Produce a chart of linear equations in Python.",
            "question": "import ___.pyplot as plt\n\nx = [i for i in range(-10, 10)]\ny1 = [5*i + 2 for i in x]\ny2 = [-3*i + 6 for i in x]\n\nplt.plot(x, y1, label='y = 5x + 2')\nplt.plot(x, y2, label='y = -3x + 6')\nplt.legend()\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 6329,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python to crawl a website and collect data about a particular topic.",
            "question": "import ___\nimport bs4\n\nweb_url = '<input URL>' # Insert URL here\n\ndef scrape(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'lxml')\n\n    output = []\n\n    # Scrape the web page to get the required data\n    ...\n\n    return output\n\nif __name__ == '__main__':\n    print(scrape(web_url))",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6336,
            "material": "Lainnya",
            "instruction": "Create a Python program to generate a report of a user's sales data.",
            "question": "import ___\n\n# A list of dictionaries containing sales data\nsales_data = [\n { 'name': 'John', 'quantity': 2, 'price': 10.0 },\n { 'name': 'Jane', 'quantity': 3, 'price': 15.0 },\n { 'name': 'Mike', 'quantity': 4, 'price':",
            "correct_answer": "csv",
            "duration": 20
        },
        {
            "question_id": 6347,
            "material": "Lainnya",
            "instruction": "Develop a machine learning algorithm in Python to identify apples from bananas.",
            "question": "import ___ as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6352,
            "material": "Lainnya",
            "instruction": "Edit an existing Python program to calculate the area of a circle.",
            "question": "import ___\ndef area(radius):\n    area = math.pi * radius ** 2\n    return area",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 6360,
            "material": "Lainnya",
            "instruction": "Build a decision tree classifier in Python that classfies the given data points.",
            "question": "import ___ as np\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')\nY = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])\n\nmodel = DecisionTreeClassifier().fit(X,Y)",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6373,
            "material": "Lainnya",
            "instruction": "Design a Python script to access a REST API.",
            "question": "import ___\n\nurl = 'https://example.com/api/v1/data'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# process the data here\n# ...",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6374,
            "material": "Lainnya",
            "instruction": "Develop an algorithm to generate a random integer between 0 and n in Python.",
            "question": "import ___\n\ndef random_number(n):\n  return random.randint(0, n)\n\nrandom_num = random_number(6)\nprint(random_num)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 6378,
            "material": "Lainnya",
            "instruction": "Write a Python script to compress a directory using the gzip library.",
            "question": "import ___\nimport os\n\n# Walk through the source directory\nfor root, dirs, files in os.walk('example_dir'):\n    # Gzip each file\n    for file in files:\n        with open(os.path.join(root, file), 'rb') as f_in:\n            with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out:\n                f_out.writelines(f_in)",
            "correct_answer": "gzip",
            "duration": 20
        },
        {
            "question_id": 6382,
            "material": "Lainnya",
            "instruction": "Create a python program to detect the languages of the given text",
            "question": "def detect_language(txt):\n    '''This function will detect the language of the given text.'''\n    import ___\n    lang = langdetect.detect(txt)\n    return lang\n\nif __name__ == \"__main__\":\n    txt = \"Hello, my name is John Smith\"\n    print(detect_language(txt))",
            "correct_answer": "langdetect",
            "duration": 20
        },
        {
            "question_id": 6397,
            "material": "Lainnya",
            "instruction": "Generate a Python program to find the nearest prime number greater than an inputted number",
            "question": "#import ___\nimport sympy\n\n# define the input\nnum = 26\n\n# set the flag to True\nflag = True\n\n# check for prime numbers\nwhile flag:\n    num += 1\n    if sympy.isprime(num):\n        flag = False\n\n# print the output\nprint(num)",
            "correct_answer": "libraries",
            "duration": 20
        },
        {
            "question_id": 6423,
            "material": "Lainnya",
            "instruction": "Using Python, write a script to detect any outliers in the given dataset.",
            "question": "import ___ as np \ndef detect_outliers(data): \n    outliers = [] \n    data = np.array(data) \n    mean = np.mean(data) \n    std = np.std(data) \n    for i in data: \n        z_score = (i - mean) / std\n        if np.abs(z_score) > 3:\n            outliers.append(i) \n    return outliers",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6425,
            "material": "Lainnya",
            "instruction": "Create a Python program to remove punctuations from the given sentence",
            "question": "import ___\n\ndef remove_punctuations(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\nprint(remove_punctuations(\"He loves to eat Italian; pizza, pasta, and gelato\"))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 6450,
            "material": "Lainnya",
            "instruction": "Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.",
            "question": "import ___.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 6457,
            "material": "Lainnya",
            "instruction": "Create a web scraper using Python and BeautifulSoup to extract the prices of a product from an online store",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/product/123'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nprice_block = soup.find('div', class_='price')\nprices = [float(price.text) for price in price_block.find_all('span')]\n\nprint(f\"Prices for {url} are {prices}\")",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6479,
            "material": "Lainnya",
            "instruction": "Analyze the sentiment of a given text using Python",
            "question": "from nltk.sentiment.vader import ___\n\n#init sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze sentiment\nsentiment_scores = analyzer.polarity_scores(\"I love writing code!\")\n\nif sentiment_scores['pos'] > sentiment_scores['neg']:\n    print (\"The sentiment of the text is positive\")\nelse:\n    print (\"The sentiment of the text is negative\")",
            "correct_answer": "SentimentIntensityAnalyzer",
            "duration": 20
        },
        {
            "question_id": 6497,
            "material": "Lainnya",
            "instruction": "Create a script in Python that prints a matrix of size n x m containing random numbers.",
            "question": "import ___\n\ndef random_matrix(n, m):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(random.randint(1,100))\n        matrix.append(row)\n    return matrix\n\nres = random_matrix(3, 2)\nprint(res)",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 6498,
            "material": "Lainnya",
            "instruction": "Create a way to encrypt a message using a key in Python.",
            "question": "import ___\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)",
            "correct_answer": "hashlib",
            "duration": 20
        },
        {
            "question_id": 6510,
            "material": "Lainnya",
            "instruction": "Create a Python script which automates the process of making API requests to a given URL.",
            "question": "import ___\n\nurl = 'https://example.com'\n\n# Make get request\nr = requests.get(url)\n\n# Check the response status\nif r.status_code == 200:\n print('success')\n\n# Make post request\nr = requests.post(url, data = {'key':'value'})\n\n# Check the response status\nif r.status_code == 200:\n print('success')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6532,
            "material": "Lainnya",
            "instruction": "Given a sentence and a word, extract the POS tag of the word using nltk library in Python.",
            "question": "import ___\n\nsentence = \"He is enjoying the warm weather\"\nword = \"enjoying\"\n\ntokens = nltk.word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nfor (token, tag) in tagged:\n   if token == word:\n     print(\"POS Tag of the word:\", tag)",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 6533,
            "material": "Lainnya",
            "instruction": "Construct a program in Python to stack and scale input data",
            "question": "import ___ as np\n\ndef preprocess(data):\n    # Stack the data\n    data = np.stack(data)\n\n    # Scale the data\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))\n    return data",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6540,
            "material": "Lainnya",
            "instruction": "Could you please craft a Python solution to find the total number of days between two dates?",
            "question": "import ___\n\ndef diff_in_days(date1, date2):\n    d1 = datetime.datetime.strptime(date1, \"%d %B %Y\")\n    d2 = datetime.datetime.strptime(date2, \"%d %B %Y\")\n    delta = d2 - d1\n    return delta.days\n\ndate1 = \"29 June 1999\"\ndate2 = \"29 July 1999\"\n\ndifference = diff_in_days(date1, date2)\nprint(\"Difference is\", difference, \"days\")",
            "correct_answer": "datetime",
            "duration": 20
        },
        {
            "question_id": 6552,
            "material": "Lainnya",
            "instruction": "Create a Python script to display a table of values given a range of x and y coordinates.",
            "question": "import ___ as pd\nimport numpy as np\n\nx = np.arange(0, 50, 1)\ny = np.arange(0, 10, 1)\n\nxytable = []\n\nfor xi in x:\n    for yi in y:\n        xytable.append([xi, yi, xi*yi])\n\ntable = pd.DataFrame(xytable, columns=['X', 'Y', 'Product'])\n\nprint(table)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 6587,
            "material": "Lainnya",
            "instruction": "Create a program in Python that takes a website URL as input, scrapes all the links on the page, and prints out the URLs of the links on the page.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"   \nresp = requests.get(url) \nsoup = BeautifulSoup(resp.text, 'html.parser') \nlinks = soup.find_all('a', href=True) \n\nfor link in links:\n print(link['href'])",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6643,
            "material": "Lainnya",
            "instruction": "Write a Python program to scrape the HTML content of a website and extract all links.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlinks = [link.get('href') for link in soup.find_all('a')]\nprint(links)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6658,
            "material": "Lainnya",
            "instruction": "Create a Python program to retrieve data from a given URL.",
            "question": "# Import the built-in \"requests\" package\nimport ___\n\n# Set the URL\nurl = \"https://example.com/index.html\"\n\n# Retrieve the data\ndata = requests.get(url)\n\n# Output the retrieved data\nprint(data.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6659,
            "material": "Lainnya",
            "instruction": "Create a Python script that extracts the text from a webpage",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip())",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6689,
            "material": "Lainnya",
            "instruction": "Create a Python script to generate a histogram from an input dataset.",
            "question": "import ___ as np\nimport matplotlib.pyplot as plt\n\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# histogram the data\nplt.hist(data)\n\n# labels\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\nplt.show()",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6695,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python to access the data in a given url",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.content, 'html.parser')\n\n# Scraping code goes here",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6706,
            "material": "Lainnya",
            "instruction": "Build a web scraper with Python to extract the text of a website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\n# Copy the link to the website\nurl = 'https://www.example.com/'\n\n# Make a request for the page\nr = requests.get(url)\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract the text from the page\ntext = soup.find_all(text=True)\n\n# Output the text\nfor t in text:\n print(t.strip())",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6749,
            "material": "Lainnya",
            "instruction": "Create a web scrapper in Python that extracts the number of subscribers from a YouTube Channel.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/user/mahalo'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nsubs = soup.find(id='subscriber-count').text\n\nsubscribers = int(subs.replace(',', '').split(' ')[0])\nprint('Number of subscribers: ', subscribers)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6756,
            "material": "Lainnya",
            "instruction": "Write a Python program that takes in an email address, checks it is valid and then prints the domain.",
            "question": "import ___ \n  \ndef validate_email(email): \n  \n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n  \n    if(re.search(regex,email)):  \n        domain = email.split('@')[1] \n        print(\"Domain name:\", domain)      \n    else:  \n        print(\"Invalid Email\")  \n  \n  \nemail = \"test@example.com\"\nvalidate_email(email)",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 6771,
            "material": "Lainnya",
            "instruction": "Write a code to perform Principal Component Analysis (PCA) in Python.",
            "question": "from sklearn.decomposition import ___\n\n# create PCA object\npca = PCA(n_components=None)\n\n# fit the object with the data\npca.fit(data)\n\n# transform the data into lower dimension\npca_data = pca.transform(data)\n\n# variance of each PC\npca.explained_variance_ratio_",
            "correct_answer": "PCA",
            "duration": 20
        },
        {
            "question_id": 6781,
            "material": "Lainnya",
            "instruction": "Build a Python script to optimize a given linear equation by minimizing the cost.",
            "question": "import ___ as np\nfrom scipy.optimize import minimize\n\ndef cost_function(X): \n    x = X[0]\n    y = X[1]\n    return x + 2*y - 4\n\nX = minimize(cost_function, [0, 0])\n\nx_opt = X.x[0]\ny_opt = X.x[1]\n\n# the optimal solution is x = 2, y = 1",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 6799,
            "material": "Lainnya",
            "instruction": "Analyse the sentiment of the given sentence using python.",
            "question": "from textblob import ___\n\n# Get the sentiment of the sentence\nsentence = 'I am so excited that I was chosen for the job.'\nblob = TextBlob(sentence)\nsentiment = blob.sentiment\nprint('Polarity:', sentiment.polarity)  # Output: Polarity: 0.8",
            "correct_answer": "TextBlob",
            "duration": 20
        },
        {
            "question_id": 6819,
            "material": "Lainnya",
            "instruction": "Create a Python program to randomly generate a mixture of two Gaussian distributions.",
            "question": "import ___ \nimport math\n\ndef random_mixture(mean1, mean2, stddev1, stddev2, N):\n    data = []\n    for _ in range(N):\n        if random.random() < 0.5:\n            data.append(random.normalvariate(mean1, stddev1))\n        else:\n            data.append(random.normalvariate(mean2, stddev2))\n    return data",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 6820,
            "material": "Lainnya",
            "instruction": "Automate an online registration process with Python.",
            "question": "import ___\n\n# input\nform_data = {\n 'firstname': 'Jane', \n 'lastname': 'Doe', \n 'email': 'janedoe@example.com', \n 'phone': '123-456-7890'\n}\n\n# process\nurl = 'https://example.com/register'\nresponse = requests.post(url, data=form_data)\n\n# output\nif response.status_code == 200:\n print('Registration was successful!')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6881,
            "material": "Lainnya",
            "instruction": "Convert a given text into speech using Python",
            "question": "import ___\n\nengine = pyttsx3.init()\nengine.say(\"Hello world!\")\nengine.runAndWait()",
            "correct_answer": "pyttsx3",
            "duration": 20
        },
        {
            "question_id": 6883,
            "material": "Lainnya",
            "instruction": "Optimize a Python code snippet to make it run faster.",
            "question": "import ___\n\ndef generate_numbers(n):\n numbers = [random.randint(1, 1000) for _ in range(n)]\n\n return numbers",
            "correct_answer": "random",
            "duration": 20
        },
        {
            "question_id": 6892,
            "material": "Lainnya",
            "instruction": "Create a Python script that takes a URL as an input and outputs the website title and description.",
            "question": "import ___\nfrom bs4 import BeautifulSoup \n\nurl = 'https://www.example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser')\n\ntitle = soup.title.string\ndescription = soup.find('meta', attrs={'name': 'description'})['content']\n\nprint('Title:', title)\nprint('Description:', description)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6901,
            "material": "Lainnya",
            "instruction": "Write a Python program to generate a random password of length 8 with the following requirements:",
            "question": "import ___\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 6902,
            "material": "Lainnya",
            "instruction": "Create a program in Python that extracts titles of all YouTube videos from a URL.",
            "question": "import ___\nimport re\n\nurl = \"https://www.youtube.com/user/Thexvid/videos\"\n\nr = requests.get(url)\ntitles = re.findall('<a href=\"/watch\\?v=([^\"]+)\">(.+?)<\\/a>',r.content.decode('utf-8'))\n\nfor title in titles:\n print(title[1])",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6912,
            "material": "Lainnya",
            "instruction": "Using the input as a guide, modify the following Python code to add a new feature of sorting the dictionary by value.",
            "question": "from operator import ___\n\nnames_and_points = {\n  \"Dave\": 20,\n  \"John\": 40,\n  \"Rachel\": 55\n}\n\nsorted_dict = sorted(names_and_points.items(), key=itemgetter(1))\n\nprint(sorted_dict)",
            "correct_answer": "itemgetter",
            "duration": 20
        },
        {
            "question_id": 6918,
            "material": "Lainnya",
            "instruction": "Can you provide a Python program to remove all punctuation from a given sentence?",
            "question": "import ___\n\ndef remove_punctuation(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\n#Test\nprint(remove_punctuation(\"This is a sentence; with, punctuation.\"))",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 6932,
            "material": "Lainnya",
            "instruction": "Create a web crawler in Python to get all web page URLs from a given website.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_crawler'\nrequest = requests.get(url)\nsoup = BeautifulSoup(request.content, 'html.parser')\nfor link in soup.find_all('a', href=True):\n  print(link['href'])",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 6947,
            "material": "Lainnya",
            "instruction": "Generate Python code to visualize this data using a bar chart.",
            "question": "import ___.pyplot as plt \n\n# Create data\nlabels = ['Boys', 'Girls']  \nvalues =[50, 80, 100, 90, 60, 70, 90, 95]\n  \n# naming the x-axis \nplt.xlabel('Category') \n# naming the y-axis \nplt.ylabel('Score') \n# plot title \nplt.title('Bar Plot') \n  \n# plot the generated values  \nplt.bar(labels, values) \n# function to show the plot \nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 6949,
            "material": "Lainnya",
            "instruction": "Write a Python program to query Twitter to get the most recent tweets from a user.",
            "question": "import ___\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)",
            "correct_answer": "tweepy",
            "duration": 20
        },
        {
            "question_id": 6967,
            "material": "Lainnya",
            "instruction": "Create a program in Python that takes a text and tokenizes it into words.",
            "question": "import ___ \n\n#Replace special characters with space \ntext = re.sub(r'[^\\w\\s]',' ',text)\n#Split text \ntokens = text.split() \n\nprint(tokens)\n#Output: ['This', 'is', 'an', 'example', 'of', 'tokenization']",
            "correct_answer": "re",
            "duration": 20
        },
        {
            "question_id": 7064,
            "material": "Lainnya",
            "instruction": "Generate code that optimizes a Python program so it runs faster.",
            "question": "import ___ as np\n\nn = 30\n\n# Optimized code using numpy\nresult = np.sum(np.multiply(np.arange(n), np.arange(n)))",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 7070,
            "material": "Lainnya",
            "instruction": "Write a Python program to calculate the total number of days between two given dates.",
            "question": "from datetime import ___ \n\ndef daysDifference(date1, date2): \n    return (date2-date1).days \n\ndate1 = date(2020, 12, 20) \ndate2 = date(2021, 1, 10) \nprint(daysDifference(date1, date2))",
            "correct_answer": "date",
            "duration": 20
        },
        {
            "question_id": 7076,
            "material": "Lainnya",
            "instruction": "Create a Python script that fills in the missing data with median values.",
            "question": "import ___ as np\n\ndef fillWithMedian(data):\n    data = np.array(data)\n    median_val = np.nanmedian(data)\n    data[np.isnan(data)] = median_val \n    return data\n\ndata = [1, None, 4, 5, None, 10]\nprint(fillWithMedian(data))",
            "correct_answer": "numpy",
            "duration": 20
        },
        {
            "question_id": 7085,
            "material": "Lainnya",
            "instruction": "Create a REST API call in Python that sends a GET request and displays the response.",
            "question": "import ___\n\n# Send GET request\nr = requests.get('https://reqres.in/api/users')\n\n# Get response\nif r.status_code == 200:\n print(r.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7132,
            "material": "Lainnya",
            "instruction": "Find the most common words in a document using Python.",
            "question": "from collections import ___\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nwords = text.split()\n\nword_count = Counter(words)\n\n# print the most common words\nprint(word_count.most_common(3))\n\n# Output: [('the', 2), ('quick', 1), ('brown', 1)]",
            "correct_answer": "Counter",
            "duration": 20
        },
        {
            "question_id": 7146,
            "material": "Lainnya",
            "instruction": "Optimize the existing Python script to improve the performance.",
            "question": "import ___\n\ndef find_value(l):\n    for v in l:\n        if v >= 0:\n            # Early exit once value is found\n            return v\n    return -1\n\nprint(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))",
            "correct_answer": "timeit",
            "duration": 20
        },
        {
            "question_id": 7147,
            "material": "Lainnya",
            "instruction": "Create a program in Python that takes a website URL as input and returns the number of HTML tags in the page.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\ndef count_tags(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    count = len(soup.find_all())\n    return count",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7157,
            "material": "Lainnya",
            "instruction": "Optimize a Python program to run faster and use less memory.",
            "question": "import ___\n \n# Faster loop implementation\ndef fast_loop(num):\n    result = 1\n    for i in range(int(num)):\n        result += math.sqrt(i*i + 1)\n    return result",
            "correct_answer": "math",
            "duration": 20
        },
        {
            "question_id": 7200,
            "material": "Lainnya",
            "instruction": "Create a web crawler in Python which takes an URL as input and extract all the links from the page.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\ndef extract_links(url):\n r = requests.get(url)\n soup = BeautifulSoup(r.content, 'html.parser')\n links = []\n for link in soup.find_all('a'):\n  links.append(link.get('href'))\n return links\n\nurl = \"https://www.example.com\"\nprint(extract_links(url))",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7233,
            "material": "Lainnya",
            "instruction": "Write a code in Python to show a histogram distribution of data.",
            "question": "import ___.pyplot as plt\n\n# example data\ndata = [2, 3, 5, 6, 7, 8, 9, 10]\n\n# create histogram\nplt.hist(data)\n\n# show plot\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 7242,
            "material": "Lainnya",
            "instruction": "Create a Python program to read numbers from stdin and produce a histogram, showing the frequency of the numbers in each 10 buckets.",
            "question": "import ___\n\n# Define buckets\nbuckets = [0]*10\n\n# Read line-by-line\nfor line in sys.stdin:\n # Read as integer\n value = int(line)\n\n # Find the bucket\n bucket = max(int(value/10), 0)\n buckets[bucket] += 1\n\n# Output result\nfor i, count in enumerate(buckets):\n print('{}-{}: {}'.format(i*10, i*10+9, count))",
            "correct_answer": "sys",
            "duration": 20
        },
        {
            "question_id": 7243,
            "material": "Lainnya",
            "instruction": "Create a post request in python with the given parameters.",
            "question": "import ___\n\nurl = 'https://api.endpoint.com'\nheaders = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}\nparameters = {'name': 'John', 'age': 25}\n\nresponse = requests.post(url, headers=headers, json=parameters)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7249,
            "material": "Lainnya",
            "instruction": "Create a python module that reads the sentiment of a given text.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_score(text): \n    sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) \n    return sentiment_scores[\"compound\"]",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 7286,
            "material": "Lainnya",
            "instruction": "Perform a sentiment analysis on a body of text using Python.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"This is a very positive sentiment!\"\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscores = sentiment_analyzer.polarity_scores(text)\n\nif scores['compound'] > 0.05:\n print(\"Positive sentiment!\")\nelse:\n print(\"Negative sentiment!\")",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 7293,
            "material": "Lainnya",
            "instruction": "Generate a Python program to fill missing values in the given table.",
            "question": "import ___ as pd\n\n# Read the student data\ndata = pd.read_csv('student_data.csv')\n\n# Fill the missing values\ndata['age'] = data['age'].fillna(data['age'].mean())\n\n# Print the result\nprint(data)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 7295,
            "material": "Lainnya",
            "instruction": "Can you develop a Python script that takes in a URL and prints out the source code?",
            "question": "import ___.request\n \nurl = 'http://www.example.org/'\n\nresponse = urllib.request.urlopen(url)\n\nprint(response.read())",
            "correct_answer": "urllib",
            "duration": 20
        },
        {
            "question_id": 7301,
            "material": "Lainnya",
            "instruction": "Write Python code to implement a decision tree classifier.",
            "question": "from sklearn import ___\n\n#features \nfeatures = [[104,0], [100,0], [120,1], [80,0], [105,1]]\n#labels\nlabels = [0,0,1,0,1]\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(features, labels)\n\nprint(\"Predicted Label:\", clf.predict([[120,1]]))",
            "correct_answer": "tree",
            "duration": 20
        },
        {
            "question_id": 7333,
            "material": "Lainnya",
            "instruction": "Create a Python program to read and parse XML data from a URL.",
            "question": "import ___\nimport xml.etree.ElementTree as ET\n\nurl = 'https://example.com/data.xml'\nr = requests.get(url)\nxml_data = r.text\n\nroot = ET.fromstring(xml_data)\n\nfor child in root:\n print(child.tag, child.attrib)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7351,
            "material": "Lainnya",
            "instruction": "Use matplotlib in Python to create a pie chart depicting a survey result.",
            "question": "import ___.pyplot as plt\n \nlabels = list(responses.keys())\nvalues = list(responses.values())\ncolors = ['#F08080', '#F8A458', '#9BC808', '#000080']\n \nplt.pie(values, labels = labels, colors = colors, autopct='%1.2f%%')\nplt.title('Favorite Fruits')\nplt.axis('equal')\nplt.show()",
            "correct_answer": "matplotlib",
            "duration": 20
        },
        {
            "question_id": 7367,
            "material": "Lainnya",
            "instruction": "Create an API request using Python to get the status of your favorite website.",
            "question": "import ___\n\nurl = 'http://example.com'\n\nr = requests.get(url)\n\nif r.status_code == 200:\n  print('Website is up and running.')\nelse:\n  print('Website is not responding.')",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7435,
            "material": "Lainnya",
            "instruction": "Create an AI assistant in Python to detect whether a sentence is a question or not.",
            "question": "import ___\n\nsentence = \"Is this a question?\"\nwords = nltk.word_tokenize(sentence)\n\n# Check if the sentence ends with a question mark\nif words[-1] == '?':\n print(\"This is a question.\")\nelse:\n print(\"This is not a question.\")",
            "correct_answer": "nltk",
            "duration": 20
        },
        {
            "question_id": 7439,
            "material": "Lainnya",
            "instruction": "Create a web scraper in Python that retrieves the titles of all posts of a given web page, and prints them on the screen.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com/blog\"\n\nr = requests.get(url)\nhtml = r.text\n\nsoup = BeautifulSoup(html, 'html.parser')\ntitles = soup.find_all('h2')\n\nfor title in titles:\n print(title.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7459,
            "material": "Lainnya",
            "instruction": "Generate a Python program to calculate the number of days between two given dates.",
            "question": "from datetime import ___\n\nstart_date = date(2020, 6, 5)\nend_date = date(2020, 6, 17)\ndelta = end_date - start_date\nprint(delta.days)",
            "correct_answer": "date",
            "duration": 20
        },
        {
            "question_id": 7496,
            "material": "Lainnya",
            "instruction": "Rewrite the given SQL query to fetch the same results using Python.",
            "question": "import ___\n\nconn = sqlite3.connect('database.db')\ncursor = conn.cursor()\n\ncursor.execute(\"SELECT CustomerID, FirstName, LastName FROM Customers WHERE Country = 'Germany'\") \nrows = cursor.fetchall()\n\nconn.close()\n\n# Output rows\nfor row in rows:\n    print(row[0], row[1], row[2])",
            "correct_answer": "sqlite3",
            "duration": 20
        },
        {
            "question_id": 7519,
            "material": "Lainnya",
            "instruction": "Create a Python program to scrape data from a website. The program should accept the website's URL as input.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Scrape data from the website\n# ...\n# ...",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7520,
            "material": "Lainnya",
            "instruction": "Create a Python script to interpolate missing data points from a Pandas dataframe.",
            "question": "import ___ as pd\nimport numpy as np\n\ndf = pd.DataFrame({\n 'x': [0,1,3,4,5],\n 'y': [1,2,4,8,16]\n})\n\n# interpolate the missing data\nnew_x = np.linspace(0, 5, 6)\ndf = df.set_index('x').reindex(new_x).interpolate().reset_index()\nprint(df)",
            "correct_answer": "pandas",
            "duration": 20
        },
        {
            "question_id": 7526,
            "material": "Lainnya",
            "instruction": "Create a script in Python to download the content of a webpage with a given URL.",
            "question": "import ___\n \nurl = \"https://github.com\"\n \nresponse = requests.get(url)\n \nwith open('webpage.txt', 'w') as file:\n    file.write(response.text)",
            "correct_answer": "requests",
            "duration": 20
        },
        {
            "question_id": 7542,
            "material": "Lainnya",
            "instruction": "Create a utility in Python to generate a PDF of a webpage. The utility should accept a URL as input and generate a PDF of the webpage in the same directory.",
            "question": "import ___\n\ndef generate_pdf(url):\n filename = url.rsplit('/', 1)[-1] + '.pdf'\n pdfkit.from_url(url, filename)\n\nif __name__ == '__main__':\n url = input('Enter a URL: ')\n generate_pdf(url)",
            "correct_answer": "pdfkit",
            "duration": 20
        },
        {
            "question_id": 7559,
            "material": "Lainnya",
            "instruction": "Create a webhook in Python to handle incoming HTTP POST requests. This webhook should process the JSON payload in the POST request and log the output to console.",
            "question": "import ___\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n payload = json.loads(request.data)\n print(payload)\n return \"OK\"\n\nif name == 'main':\n app.run(debug=True)",
            "correct_answer": "json",
            "duration": 20
        }
    ]
}