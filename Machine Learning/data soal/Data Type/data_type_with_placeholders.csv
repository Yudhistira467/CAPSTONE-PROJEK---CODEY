Instruction,Input,Output,materi,question_id,Template
Write a Python function which takes in an argument and returns a corresponding string.,"Given an argument of 1,2 or 3","def get_string(arg):
    """"""
    This function takes in an argument and returns the corresponding
    string. 
 
    Parameters:
    arg (int): the argument

    Returns:
    str: the corresponding string
    """"""
    if arg == 1:
        return ""One""
    elif arg == 2:
        return ""Two""
    elif arg ==3:
        return ""Three""
    else:
        return """"",Data Type,10,"def get_string(arg):
    """"""
    This function takes in an argument and returns the corresponding
    string. 
 
    Parameters:
    arg (int): the argument

    Returns:
    str: the corresponding string
    """"""
    if arg == ___:
        return ""One""
    elif arg == ___:
        return ""Two""
    elif arg ==___:
        return ""Three""
    else:
        return """""
Design a Python algorithm to parse a list of strings and prints the longest string's length.,"listOfString= [""I"", ""am"", ""so"", ""happy""]","listStrings= [""I"", ""am"", ""so"", ""happy""]
longestStringLen = 0
for string in listStrings:
    if (len(string) > longestStringLen):
        longestStringLen = len(string)

print(longestStringLen)",Data Type,79,"listStrings= [""I"", ""am"", ""so"", ""happy""]
longestStringLen = ___
for string in listStrings:
    if (len(string) > longestStringLen):
        longestStringLen = len(string)

print(longestStringLen)"
Modify the following Python function to get the first index of the keyword within the string.,"def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i","def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i
    return -1",Data Type,117,"def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i
    return -___"
Write a function in Python that encodes a string using a simple algorithm.,"Text string:  ""Hello""","def encodeString (text):
    encoded_string = ''
    for char in text:
        encoded_char = ord(char) + 3
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString(""Hello"")  # khoor",Data Type,132,"def encodeString (text):
    encoded_string = ''
    for char in text:
        encoded_char = ord(char) + ___
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString(""Hello"")  # khoor"
Implement an algorithm to find a substring in a given string using a greedy approach in Python.,"string = ""This is a sample string""
substring = ""sample""","def find_substring(string, substring):
    start = 0
    result = """"
    while start < len(string):
        idx = string.find(substring, start)
        if idx == -1:
            break
        result += string[idx:idx+len(substring)]
        start = idx+len(substring)
    return result",Data Type,165,"def find_substring(string, substring):
    start = ___
    result = """"
    while start < len(string):
        idx = string.find(substring, start)
        if idx == -___:
            break
        result += string[idx:idx+len(substring)]
        start = idx+len(substring)
    return result"
Create a program in Python that takes a list of strings and returns a new list with each string reversed.,"[""Hello"", ""World""]","def reverse_list(strings):
    return [s[::-1] for s in strings]

strings = [""Hello"", ""World""]
print(reverse_list(strings))",Data Type,172,"def reverse_list(strings):
    return [s[::-___] for s in strings]

strings = [""Hello"", ""World""]
print(reverse_list(strings))"
Rewrite the code in Python so that it prints the length of a given string.,"string = ""Hello World""","string = ""Hello World""
print(len(string)) # prints 11",Data Type,187,"string = ""Hello World""
print(len(string)) # prints ___"
Build a mini classifier model in Python to predict whether a given string is palindrome or not.,'level',"class Palindrome:

def __init__(self, str):
    self.str = str

def is_palindrome(self):
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")",Data Type,189,"class Palindrome:

def __init__(self, str):
    self.str = str

def is_palindrome(self):
    return self.str == self.str[::-___]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")"
Create a Python function that returns the index of the nth occurrence of a substring in a given string.,"(""Hello World"", ""l"", 3)","def find_nth_occurrence(string, substring, n):
index = -1

while n > 0:
    n -= 1
    index = string.find(substring, index+1)

if index == -1:
    return None
else:
    return index

if __name__ == ""__main__"":
    result = find_nth_occurrence(""Hello World"", ""l"", 3)
    print(result)",Data Type,195,"def find_nth_occurrence(string, substring, n):
index = -___

while n > ___:
    n -= ___
    index = string.find(substring, index+___)

if index == -___:
    return None
else:
    return index

if __name__ == ""__main__"":
    result = find_nth_occurrence(""Hello World"", ""l"", ___)
    print(result)"
"Write a Python function to classify a given string based on the following conditions:
A) If the length of the string is less than 3, “Short”
B) If the string only contains alphabets, “Alphabet”
C) If the string only contains numbers, “Numeral”","string = ""ab1""","def classify_string(string):
    if len(string) < 3:
        return ""Short"" 
    elif string.isalpha():
        return ""Alphabet"" 
    elif string.isnumeric():
        return ""Numeral""",Data Type,208,"def classify_string(string):
    if len(string) < ___:
        return ""Short"" 
    elif string.isalpha():
        return ""Alphabet"" 
    elif string.isnumeric():
        return ""Numeral"""
"Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.","sample_string = ""HelloWorld""","def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)",Data Type,209,"def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += ___
      else:
         frequency_table[char] = ___
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)"
Write a code to detect any pattern in a given string in Python.,"my_string = ""aabccba""","def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True
    return False

if __name__ == '__main__':
    print(detect_pattern(my_string))",Data Type,236,"def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > ___:
            return ___
    return ___

if __name__ == '__main__':
    print(detect_pattern(my_string))"
Write a Python program to convert a string containing a number in base 8 to base 10.,input_num='45',"def conv(input_num):
    decimal_num = int(input_Num, 8)
    return decimal_num",Data Type,240,"def conv(input_num):
    decimal_num = int(input_Num, ___)
    return decimal_num"
Write a function in Python that will take in a string and return the most commonly occurring character.,"Sample string: ""abrakadabra""","def max_char(s):
    chars = {}
    for c in s:
        chars[c] = chars.get(c, 0) + 1
    max_val = -1
    max_char = None
    for c, v in chars.items():
        if v > max_val:
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs 5 times)",Data Type,264,"def max_char(s):
    chars = {}
    for c in s:
        chars[c] = chars.get(c, ___) + ___
    max_val = -___
    max_char = None
    for c, v in chars.items():
        if v > max_val:
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs ___ times)"
"Using the sample data, convert the provided string into a dictionary in Python.","Sample Data: ""Name: John Doe; Age: 23; Course: Data Science""","sample_data = ""Name: John Doe; Age: 23; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
for item in data_items:
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)",Data Type,284,"sample_data = ""Name: John Doe; Age: ___; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
for item in data_items:
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)"
"Write a python program to count the total number of ""1""s present in a binary string",binary_string = '10101100110',"def count_ones(binary_string):
    count = 0
    for bit in binary_string:
        if bit == '1':
            count += 1
    return count",Data Type,290,"def count_ones(binary_string):
    count = ___
    for bit in binary_string:
        if bit == '___':
            count += ___
    return count"
Generate a python program to search input string s for a given substring t.,"s= ""This is a string"", t=""ring""","def find(s, t):
    if t in s:
        return s.index(t)
    else:
        return -1",Data Type,292,"def find(s, t):
    if t in s:
        return s.index(t)
    else:
        return -___"
Write a python method to identify whether the given string is a palindrome.,"String: ""racecar""","def is_palindrome(s):
  s = s.lower()
  return s == s[::-1]

print(is_palindrome(""racecar"")) # True",Data Type,299,"def is_palindrome(s):
  s = s.lower()
  return s == s[::-___]

print(is_palindrome(""racecar"")) # ___"
Write a Python program to convert a given binary form to its original string.,"b_string = ""0100100001100101011011000110110001101111""","def binary_to_string(b_string):
 s = """" 
 for i in range(0, len(b_string), 8):
 byte = b_string[i: i + 8]
 s += chr(int(byte, 2))
 return s

b_string = ""0100100001100101011011000110110001101111""
print(binary_to_string(b_string))
# Output: Hello",Data Type,306,"def binary_to_string(b_string):
 s = """" 
 for i in range(___, len(b_string), ___):
 byte = b_string[i: i + ___]
 s += chr(int(byte, ___))
 return s

b_string = ""___""
print(binary_to_string(b_string))
# Output: Hello"
Create a function in Python that takes a string and an integer as arguments and returns the string with the integer number of characters removed from the front of the string.,"""Hello, World!"", 5","def remove_from_front(string, num_chars):
    return string[num_chars:]

result = remove_from_front(""Hello, World!"", 5)
print(result)",Data Type,308,"def remove_from_front(string, num_chars):
    return string[num_chars:]

result = remove_from_front(""Hello, World!"", ___)
print(result)"
Write a Python program to determine whether or not a given string is a palindrome.,"""racecar""","def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')",Data Type,313,"def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-___]

 # compare
 if rev == s:
 return ___
 return ___

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')"
Write a Python program to convert a given string to one of its equivalent shell script command,"string = ""copy file1.txt file2.txt""","def string_to_shell_command(string):
    split_string = string.split()
    command_name = split_string[0]
    input_args = split_string[1:]
    command_args = ''
    for arg in input_args:
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'",Data Type,331,"def string_to_shell_command(string):
    split_string = string.split()
    command_name = split_string[___]
    input_args = split_string[___:]
    command_args = ''
    for arg in input_args:
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'"
Write a function in python for finding a substring of a given string,"""Hello World"", ""lo Wo""","def find_substring(string, sub_string):
  indices = []
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      indices.append(i)
  return indices

print(find_substring(""Hello World"", ""lo Wo""))",Data Type,365,"def find_substring(string, sub_string):
  indices = []
  for i in range(___, len(string)-len(sub_string)+___):
    if (string[i:i+len(sub_string)] == sub_string):
      indices.append(i)
  return indices

print(find_substring(""Hello World"", ""lo Wo""))"
Create a function in Python that takes a list of strings and for each string appends the first letter to the end of the string.,"['cat', 'bird', 'rabbit']","def append_first_letter_end(list_of_strings):
 new_list_of_strings = []
 for string in list_of_strings:
 new_string = string + string[0]
 new_list_of_strings.append(new_string)
 return new_list_of_strings",Data Type,405,"def append_first_letter_end(list_of_strings):
 new_list_of_strings = []
 for string in list_of_strings:
 new_string = string + string[___]
 new_list_of_strings.append(new_string)
 return new_list_of_strings"
Write a python function which will check if input string is palindrome or not.,"input_string = ""racecar""","def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")",Data Type,412,"def is_palindrome(input_string):
    if input_string == input_string[::-___]:
        return ___
    else:
        return ___
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == ___:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")"
Create a program in Python to count the number of time a particular character appears in a given string.,"Input string: ""Hello, World!""
Character: ""l""","def count_char_in_string(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count

string = ""Hello, World!""
char = ""l""
count = count_char_in_string(string, char)
print(""The number of times"", char, ""appears in the string is:"", count)",Data Type,419,"def count_char_in_string(string, char):
    count = ___
    for i in range(len(string)):
        if string[i] == char:
            count += ___
    return count

string = ""Hello, World!""
char = ""l""
count = count_char_in_string(string, char)
print(""The number of times"", char, ""appears in the string is:"", count)"
Generate a Python program for reversing a string.,"string = ""Hello World""","string = ""Hello World""

# get length of the string
length = len(string)

# create an empty string
reverse = """"

# loop backword through the string
for i in range(length-1, -1, -1):
 # add current character to empty string
 reverse = reverse + string[i]

# print out the result
print(reverse)",Data Type,426,"string = ""Hello World""

# get length of the string
length = len(string)

# create an empty string
reverse = """"

# loop backword through the string
for i in range(length-___, -___, -___):
 # add current character to empty string
 reverse = reverse + string[i]

# print out the result
print(reverse)"
Write a Python function to count the number of substrings of a given string that contains exactly K distinct characters.,"""abcabcabcabc"", K = 2","def count_substrings_with_k_distinct_characters(in_str, k):
    count = 0
    for i in range(len(in_str)-k+1):
        sub_str = in_str[i:i+k]
        if len(set(sub_str)) == k:
            count +=1 
    return count

count = count_substrings_with_k_distinct_characters(""abcabcabcabc"", 2)
print(count)",Data Type,460,"def count_substrings_with_k_distinct_characters(in_str, k):
    count = ___
    for i in range(len(in_str)-k+___):
        sub_str = in_str[i:i+k]
        if len(set(sub_str)) == k:
            count +=___ 
    return count

count = count_substrings_with_k_distinct_characters(""abcabcabcabc"", ___)
print(count)"
Implement a function in Python that takes a string as a parameter and capitalizes the first letter of each word in the string.,The quick brown fox,"def capitalize(input_string):
    if len(input_string) == 0:
        return ''
    else:
        words = input_string.split()
        capitalized_words = [word.capitalize() for word in words]
        return ' '.join(capitalized_words)

print(capitalize('The quick brown fox'))",Data Type,461,"def capitalize(input_string):
    if len(input_string) == ___:
        return ''
    else:
        words = input_string.split()
        capitalized_words = [word.capitalize() for word in words]
        return ' '.join(capitalized_words)

print(capitalize('The quick brown fox'))"
Design a function in Python to delete duplicate characters from a given string.,String: python,"def delete_duplicate(str):
    temp_str = """"
    for i in range(0, len(str)):
        if str[i] not in temp_str:
            temp_str += str[i]
    return temp_str

input_string = ""w3python""
result = delete_duplicate(input_string)

print(""After deleting duplicate character, string is:"", result)",Data Type,481,"def delete_duplicate(str):
    temp_str = """"
    for i in range(___, len(str)):
        if str[i] not in temp_str:
            temp_str += str[i]
    return temp_str

input_string = ""w3python""
result = delete_duplicate(input_string)

print(""After deleting duplicate character, string is:"", result)"
Write an algorithm in Python to convert a given binary string to decimal number.,"""11010""","def bin2dec(binary):
    decimal, i = 0, 0
    while binary != 0:
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

binary = 11010
print(bin2dec(binary))",Data Type,499,"def bin2dec(binary):
    decimal, i = ___, ___
    while binary != ___:
        dec = binary % ___
        decimal = decimal + dec * pow(___, i)
        binary = binary//___
        i += ___
    return decimal

binary = ___
print(bin2dec(binary))"
Construct a function in Python which takes in a string and returns the number of vowels it has.,"string=""hello world""","def countVowels(string):
    
    vowels = 'aeiouAEIOU'
    count = 0

    for char in string:
        if char in vowels:
            count += 1
    
    return count",Data Type,511,"def countVowels(string):
    
    vowels = 'aeiouAEIOU'
    count = ___

    for char in string:
        if char in vowels:
            count += ___
    
    return count"
Convert the following Python dictionary to a JSON string.,"data = {
  ""Name"": ""John"",
  ""Age"": 30,
  ""Cities"": [""New York"", ""London"", ""Paris""]
}","{
    ""Name"": ""John"",
    ""Age"": 30,
    ""Cities"": [""New York"", ""London"", ""Paris""]
}",Data Type,518,"{
    ""Name"": ""John"",
    ""Age"": ___,
    ""Cities"": [""New York"", ""London"", ""Paris""]
}"
Create a Python function that prints a given string n times.,"string: ""Hello World!!""
N: 5","def repeatString(string, n): 
  
    for i in range(n): 
        print(string, end = """") 
  
# Driver Code 
string = ""Hello World!!""
n = 5
repeatString(string, n)",Data Type,539,"def repeatString(string, n): 
  
    for i in range(n): 
        print(string, end = """") 
  
# Driver Code 
string = ""Hello World!!""
n = ___
repeatString(string, n)"
Generate a Python code for crawling a website for a specific type of data.,"website: www.example.com 
data to crawl: phone numbers","import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))",Data Type,552,"import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{___}-\d{___}-\d{___}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))"
Write a Python function that takes in two parameters of type list and returns the sum of all the elements in the two lists.,"list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]","def list_sum(list1, list2):
 # initialize sum with 0
 total_sum = 0 
 
 # iterate over each element in list1
 for num in list1: 
     # add to sum
     total_sum += num 

 # iterate over each element in list2
 for num in list2: 
     # add to sum
     total_sum += num 

return total_sum",Data Type,559,"def list_sum(list1, list2):
 # initialize sum with ___
 total_sum = ___ 
 
 # iterate over each element in list1
 for num in list1: 
     # add to sum
     total_sum += num 

 # iterate over each element in list2
 for num in list2: 
     # add to sum
     total_sum += num 

return total_sum"
Create a script in Python that takes a list of strings and prints the string with the longest length.,"['hello', 'world', 'abracadabra']","def longest_string(str_list):
    longest = str_list[0]
    for s in str_list:
        if len(s) > len(longest):
            longest = s
    print(longest)
    
longest_string(['hello', 'world', 'abracadabra'])",Data Type,572,"def longest_string(str_list):
    longest = str_list[___]
    for s in str_list:
        if len(s) > len(longest):
            longest = s
    print(longest)
    
longest_string(['hello', 'world', 'abracadabra'])"
Create a Python script that takes a string and prints the first character of every word in the given string.,"""This is a test string""","def first_characters_of_words(string):
    words = string.split("" "") 
    characters = [word[0] for word in words] 
    return """".join(characters)

print(first_characters_of_words(""This is a test string"")) # Tiat",Data Type,578,"def first_characters_of_words(string):
    words = string.split("" "") 
    characters = [word[___] for word in words] 
    return """".join(characters)

print(first_characters_of_words(""This is a test string"")) # Tiat"
Design an algorithm in Python to find the number of occurrences of a given string in another string.,"haystack = ""Hello World""
needle = ""l""","def count_occurrences(haystack, needle):
    count = 0
    for char in haystack:
        if char == needle:
            count += 1
    return count",Data Type,588,"def count_occurrences(haystack, needle):
    count = ___
    for char in haystack:
        if char == needle:
            count += ___
    return count"
Write a Python program to calculate the sum of the numerical values of each character of a string,string = 'program',"def sumCharValues(string):
    sum = 0
    for ch in string:
        sum += ord(ch)
    return sum",Data Type,594,"def sumCharValues(string):
    sum = ___
    for ch in string:
        sum += ord(ch)
    return sum"
Create a Python script to validate a JSON string.,"""{""name"":""John"",""age"":30}""","import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False",Data Type,632,"import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return ___
    except json.JSONDecodeError:
        return ___"
Write a Python program to parse a JSON string and store the result in a new dictionary.,"json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'","import json

# parse JSON string into a dictionary
json_dict = json.loads(json_string) 
  
# result 
print(json_dict) 

# Output:
{'name': 'John', 'age': 30, 'city': 'New York'}",Data Type,651,"import json

# parse JSON string into a dictionary
json_dict = json.loads(json_string) 
  
# result 
print(json_dict) 

# Output:
{'name': 'John', 'age': ___, 'city': 'New York'}"
Write a function in Python that takes a given string and checks if it is a palindrome or not.,"""racecar""","def isPalindrome(s):
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return False
        left += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))",Data Type,664,"def isPalindrome(s):
    left = ___ 
    right = len(s)-___ 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return ___
        left += ___
        right -= ___
    return ___
  
print (isPalindrome(""racecar""))"
Create a function to parse a JSON string and return a Python dictionary.,"'{""name"": ""John"", ""age"": 32}'","import json

def parseJSON(json_string):
    return json.loads(json_string)

dictionary = parseJSON('{""name"": ""John"", ""age"": 32}')",Data Type,674,"import json

def parseJSON(json_string):
    return json.loads(json_string)

dictionary = parseJSON('{""name"": ""John"", ""age"": ___}')"
Write a Python program to group a list of string elements into a dictionary of word counts.,"['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']","words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']

word_counts = {word: words.count(word) for word in words}

print(word_counts)
# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}",Data Type,711,"words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']

word_counts = {word: words.count(word) for word in words}

print(word_counts)
# Output: {'hello': ___, 'world': ___, 'this': ___, 'is': ___, 'a': ___, 'test': ___}"
Write a Python program to extract all the numbers from a specified string.,This is 3 string with 4 numbers,"def extract_numbers(s):
    numbers = []
    for char in s:
        if char.isdigit():
            numbers.append(int(char))
    return numbers

result = extract_numbers(""This is 3 string with 4 numbers"")
print(result)",Data Type,714,"def extract_numbers(s):
    numbers = []
    for char in s:
        if char.isdigit():
            numbers.append(___)
    return numbers

result = extract_numbers(""This is ___ string with ___ numbers"")
print(result)"
Compose a Python program that evaluates a given expression provided as a string and prints its result.,"""1+1""","def evaluate_expression(expression):
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""1+1"")",Data Type,731,"def evaluate_expression(expression):
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""___+___"")"
Create a Python program to parse a string for any numbers and calculate the sum.,"string = ""My age is 25 and my friend's age is 30.""","import re

# Input string
string = ""My age is 25 and my friend's age is 30.""

# Find all the numbers in the string
numbers = re.findall(""\d+"", string)

# Calculate the sum
sum = 0
for number in numbers:
 sum += int(number)

# Print the sum
print(""The sum of the numbers is:"", sum)",Data Type,737,"import re

# Input string
string = ""My age is ___ and my friend's age is ___.""

# Find all the numbers in the string
numbers = re.findall(""\d+"", string)

# Calculate the sum
sum = ___
for number in numbers:
 sum += ___

# Print the sum
print(""The sum of the numbers is:"", sum)"
Write a Python code to decode a JSON string.,"{
 ""name"": ""John"",
 ""age"": 30,
 ""is_married"": False
}","import json

json_string = '{""name"": ""John"", ""age"": 30, ""is_married"": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)",Data Type,749,"import json

json_string = '{""name"": ""John"", ""age"": ___, ""is_married"": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)"
Write a Python program to extract the first 100 characters from a given string.,This is a test string,"def extract_first_100_chars(string):
    return string[:100]",Data Type,771,"def extract_first_100_chars(string):
    return string[:___]"
Create a function to reverse a string in Python.,Hello,"def reverse_string(string):
    result = """"
    for i in range(len(string) - 1, -1, -1):
        result += string[i]
    return result

reverse_string(""hello"")",Data Type,780,"def reverse_string(string):
    result = """"
    for i in range(len(string) - ___, -___, -___):
        result += string[i]
    return result

reverse_string(""hello"")"
Can you construct a Python program that takes a string of words and counts the occurrences of each word?,"""This is an example of a string of words""","words = ""This is an example of a string of words"".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = 1
    else:
        word_freq[word] += 1

for key, value in word_freq.items():
    print(f""{key} : {value}"")",Data Type,782,"words = ""This is an example of a string of words"".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = ___
    else:
        word_freq[word] += ___

for key, value in word_freq.items():
    print(f""{key} : {value}"")"
Write a Python program to identify the longest line in a string.,"Sentence 1
Sentence 2
Sentence 3 (longest sentence)
Sentence 4","test_str = 'Sentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4'

# Get all lines in test_str into a list
str_lines = test_str.split('\n')

# Find the longest line in the list
longest_line = max(str_lines, key=len)

# Print the longest line
print(f'The longest line is: {longest_line}')",Data Type,786,"test_str = 'Sentence ___\nSentence ___\nSentence ___ (longest sentence)\nSentence ___'

# Get all lines in test_str into a list
str_lines = test_str.split('\n')

# Find the longest line in the list
longest_line = max(str_lines, key=len)

# Print the longest line
print(f'The longest line is: {longest_line}')"
How would you format a JSON string using Python?,"""{\""name\"":\""John Doe\"",\""age\"":30}""","import json

# Get json string
json_string = ""{\""name\"":\""John Doe\"",\""age\"":30}""

# Parse the json string
parsed_string = json.loads(json_string)

# Pretty print the parsed string
pretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)

# Show output
print(pretty_string)
# Output:
{
    ""name"": ""John Doe"",
    ""age"": 30
}",Data Type,787,"import json

# Get json string
json_string = ""{\""name\"":\""John Doe\"",\""age\"":___}""

# Parse the json string
parsed_string = json.loads(json_string)

# Pretty print the parsed string
pretty_string = json.dumps(parsed_string, indent=4, sort_keys=___)

# Show output
print(pretty_string)
# Output:
{
    ""name"": ""John Doe"",
    ""age"": ___
}"
Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary.,"my_dict = {
   ""a"": 5,
   ""b"": 10,
   ""c"": 15
}","def compute_dict_sum(input_dict):
    result = 0
    for val in input_dict.values():
        result += val
    return result

print(compute_dict_sum(my_dict))",Data Type,789,"def compute_dict_sum(input_dict):
    result = ___
    for val in input_dict.values():
        result += val
    return result

print(compute_dict_sum(my_dict))"
Construct a Python program to split a string at a given character occurrence index.,"Input String: Hello World
Index: 6","def split_string(string, index):
  return string[:index] + "","" + string[index+1:]

s = ""Hello World""
index = 6

new_string = split_string(s, index)
print(new_string)

Output:
Hello,World",Data Type,794,"def split_string(string, index):
  return string[:index] + "","" + string[index+___:]

s = ""Hello World""
index = ___

new_string = split_string(s, index)
print(new_string)

Output:
Hello,World"
Generate a script that parses a JSON string and prints out the corresponding Python dictionary.,"{""name"": ""John"", ""age"": 30, ""city"": ""New York""}","import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
parsed_json = json.loads(json_string)

print(parsed_json)",Data Type,806,"import json

json_string = '{""name"": ""John"", ""age"": ___, ""city"": ""New York""}'
parsed_json = json.loads(json_string)

print(parsed_json)"
Create an application in Python that can encode a string into Base64.,The quick brown fox,"import base64

def encode_base64(string):
 encoded_string = base64.b64encode(string.encode('utf-8'))
 return encoded_string

string = ""The quick brown fox""
encoded_string = encode_base64(string)
print(encoded_string)
# Output: VGhlIHF1aWNrIGJyb3duIGZveA==",Data Type,824,"import base64

def encode_base64(string):
 encoded_string = base64.b64encode(string.encode('utf-___'))
 return encoded_string

string = ""The quick brown fox""
encoded_string = encode_base64(string)
print(encoded_string)
# Output: VGhlIHF1aWNrIGJyb3duIGZveA=="
Write a Python program that takes a string input representing an arithmetic expression and calculates the result.,"""(20 * 8) + (2 * 4)""","def evaluate(expression):
    try:
        return eval(expression)
    except SyntaxError:
        print('Invalid expression.')

print(evaluate(""(20 * 8) + (2 * 4)""))

Output: 164.0",Data Type,834,"def evaluate(expression):
    try:
        return eval(expression)
    except SyntaxError:
        print('Invalid expression.')

print(evaluate(""(___ * ___) + (___ * ___)""))

Output: ___.___"
Create a Python program to check if a given string can be formed from a given set of words.,"String: ""justdoit""
Set of words: [""just"", ""do"", ""it""]","def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return True 
    else:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])",Data Type,850,"def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return ___ 
    else:
        return ___

word_set(""justdoit"", [""just"", ""do"", ""it""])"
Write a query to select the first four characters of a given string.,String: python_program,"SELECT SUBSTRING(string, 1, 4) 
FROM table 
WHERE string = 'python_program'",Data Type,854,"SELECT SUBSTRING(string, ___, ___) 
FROM table 
WHERE string = 'python_program'"
Create a program in Python that has the following purpose: To determine if a given string is a palindrome,"""radar""","def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return True
    else: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")",Data Type,862,"def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return ___
    else: 
        return ___
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")"
Create a Python function to convert a list of strings into a dictionary of the form {string: count}.,"myList = [‘a’, ‘a’, ‘b’, ‘c’]","def list_to_dict(myList):
 dict = {}
 for val in myList:
  if val in dict:
   dict[val] += 1
  else:
   dict[val] = 1
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': 2, 'b': 1, 'c': 1}",Data Type,870,"def list_to_dict(myList):
 dict = {}
 for val in myList:
  if val in dict:
   dict[val] += ___
  else:
   dict[val] = ___
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': ___, 'b': ___, 'c': ___}"
Design a program in Python that takes in a string and finds the characters that appear only once.,"String = ""This is a test""","def findUniqueChars(str):
    result = """"
    for char in str:
        if str.count(char) == 1:
            result += char

    return result 

result = findUniqueChars(""This is a test"")
print(result)",Data Type,873,"def findUniqueChars(str):
    result = """"
    for char in str:
        if str.count(char) == ___:
            result += char

    return result 

result = findUniqueChars(""This is a test"")
print(result)"
Create a Python code snippet to convert a given JSON string into a Python dictionary.,"'{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'","import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
python_dict = json.loads(json_string)

print(python_dict)",Data Type,897,"import json

json_string = '{""name"": ""John"", ""age"": ___, ""city"": ""New York""}'
python_dict = json.loads(json_string)

print(python_dict)"
Create a Python program that counts the number of occurrences of a character in a string,"String = 'Hello World', Character = 'o'","def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",Data Type,901,"def count_char(string, char):
    count = ___
    for c in string:
        if c == char:
            count += ___
    return count"
Optimize a piece of Python code that enumerates all substrings of a string.,"string = ""Supercalifragilisticexpialidocious""","def enumerate_substrings(string):
    substrings = set()
    for i in range(len(string)):
        for j in range(i, len(string)):
            substrings.add(string[i:j+1])
    return substrings

string = ""Supercalifragilisticexpialidocious""
substrings = enumerate_substrings(string)
print(substrings)",Data Type,902,"def enumerate_substrings(string):
    substrings = set()
    for i in range(len(string)):
        for j in range(i, len(string)):
            substrings.add(string[i:j+___])
    return substrings

string = ""Supercalifragilisticexpialidocious""
substrings = enumerate_substrings(string)
print(substrings)"
Write a Python function make_float that converts a given string argument to a float.,"""25.42""","def make_float(string):
  return float(string)",Data Type,908,"def make_float(string):
  return ___"
Generate the Python code that calculates the numbers of characters in a given string.,"""Hello, World!""","myString = ""Hello, World!""

charCount = 0
for char in myString:
    charCount += 1
    
print(""Number of characters:"", charCount)",Data Type,916,"myString = ""Hello, World!""

charCount = ___
for char in myString:
    charCount += ___
    
print(""Number of characters:"", charCount)"
Generate a Python program to search for a specific string in a list.,"lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""","def search_string(lst, str):
    for item in lst:
        if item == str:
            return True
    return False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))",Data Type,944,"def search_string(lst, str):
    for item in lst:
        if item == str:
            return ___
    return ___

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))"
"Given a string, write a Python program to check if the characters in the string form a palindrome.","string = ""racecar""","def is_palindrome(string):
 return string == string[::-1]
 
result = is_palindrome(string)
print(result) # True",Data Type,949,"def is_palindrome(string):
 return string == string[::-___]
 
result = is_palindrome(string)
print(result) # ___"
Design a program in Python that accepts a string as input and checks whether or not it is palindrome.,madam,"def isPalindrome(str): 
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False
    return True

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")",Data Type,957,"def isPalindrome(str): 
    for i in range(___, int(len(str)/___)):  
        if str[i] != str[len(str)-i-___]: 
            return ___
    return ___

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")"
Implement a Python program to recursively reverse a string.,String: Python,"def reverse(string): 
	if len(string) == 0: 
		return string 
	else: 
		return reverse(string[1:]) + string[0] 

# Driver code 
string = ""Python""

print (reverse(string))",Data Type,975,"def reverse(string): 
	if len(string) == ___: 
		return string 
	else: 
		return reverse(string[___:]) + string[___] 

# Driver code 
string = ""Python""

print (reverse(string))"
Create a python function that takes a string of characters as input and checks if it is a valid identifier.,"name = ""myVar""","import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[0] not in string.ascii_letters:
        return False
    for char in name[1:]:
        if char not in validChar:
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)",Data Type,980,"import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[___] not in string.ascii_letters:
        return ___
    for char in name[___:]:
        if char not in validChar:
            return ___
            
    return ___

validResult = isValidIdentifier(name)
print(validResult)"
Design a Python program for converting a given string of characters into its corresponding ASCII code.,"String: ""Hello""","def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]",Data Type,985,"def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [___, ___, ___, ___, ___]"
Write a Python function that takes a string and an integer as an argument and returns a string containing the string repeated the specified number of times.,"""Hello!"", 3","def repeat_string(string, num_times):
    return string*num_times

result = repeat_string(""Hello!"", 3)
print(result)",Data Type,1003,"def repeat_string(string, num_times):
    return string*num_times

result = repeat_string(""Hello!"", ___)
print(result)"
Create a Python script that takes an input string and reverses its letters.,"""Hello Python!""","def reverse_string(string):
 result = []
 
 for i in string:
 result.insert(0,i)
 
 return ''.join(result)
 
if __name__ == ""__main__"":
string = ""Hello Python!""
print(reverse_string(string))  # Output: !nohtyP olleH",Data Type,1010,"def reverse_string(string):
 result = []
 
 for i in string:
 result.insert(___,i)
 
 return ''.join(result)
 
if __name__ == ""__main__"":
string = ""Hello Python!""
print(reverse_string(string))  # Output: !nohtyP olleH"
Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.,"str = ""Hello world!""","def remove_odd_ascii_chars(str):
    new_str = """"
    for ch in str:
        if ord(ch) % 2 == 0:
            new_str += ch
    return new_str

str = ""Hello world!""
new_str = remove_odd_ascii_chars(str)
print(new_str)",Data Type,1019,"def remove_odd_ascii_chars(str):
    new_str = """"
    for ch in str:
        if ord(ch) % ___ == ___:
            new_str += ch
    return new_str

str = ""Hello world!""
new_str = remove_odd_ascii_chars(str)
print(new_str)"
Develop a program in Python to check whether a string contains only digits.,"""0123""","def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only(""0123""))",Data Type,1026,"def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return ___
    return ___

print(is_digit_only(""___""))"
Construct an algorithm in Python to find the longest substring in a string which does not have any repeating characters.,string = 'abcaac',"def findLongestSubstring(string):
 
 # Initialize the result
 max_length = 0
 
 # Initialize substrings
 curr = ''
 
 for char in string:
  if char not in curr:
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))",Data Type,1044,"def findLongestSubstring(string):
 
 # Initialize the result
 max_length = ___
 
 # Initialize substrings
 curr = ''
 
 for char in string:
  if char not in curr:
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))"
Suggest a completion for the following Python code so that it prints the characters in a string in reverse order.,"my_str = ""Hello World""

for i in","my_str = ""Hello World""

for i in range(len(my_str)-1, -1, -1):
    print(my_str[i], end="""")",Data Type,1049,"my_str = ""Hello World""

for i in range(len(my_str)-___, -___, -___):
    print(my_str[i], end="""")"
Write a piece of code in Python to reverse a given string.,abcdef,"string = 'abcdef'

print(string[::-1])",Data Type,1051,"string = 'abcdef'

print(string[::-___])"
Create a python script that will take in a JSON string as input and output a copied version of the same string,"{""name"": ""John Doe"", ""address"": ""123 Main Street""}","import json

jsonString = '{""name"": ""John Doe"", ""address"": ""123 Main Street""}'
jsonObject = json.loads(jsonString)
copiedString = json.dumps(jsonObject)

print(copiedString)",Data Type,1059,"import json

jsonString = '{""name"": ""John Doe"", ""address"": ""___ Main Street""}'
jsonObject = json.loads(jsonString)
copiedString = json.dumps(jsonObject)

print(copiedString)"
Create a Python script for generating a random string of a desired length.,length of 10,"import random

def generate_random_string(length):
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'
  output_str = ''
  for _ in range(length):
    output_str += random.choice(chars)
  return output_str

result = generate_random_string(10)
print(result)",Data Type,1063,"import random

def generate_random_string(length):
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'
  output_str = ''
  for _ in range(length):
    output_str += random.choice(chars)
  return output_str

result = generate_random_string(___)
print(result)"
Write a Python program that finds all numbers in a given string and prints their sum?,"""15 apples, 4 bananas and 6 oranges""","import re

def find_numbers(s):
    numbers = re.findall('\\d+', s)
    ints = list(map(int, numbers))
    return sum(ints)

s = ""15 apples, 4 bananas and 6 oranges""

print(find_numbers(s)) # output: 25",Data Type,1091,"import re

def find_numbers(s):
    numbers = re.findall('\\d+', s)
    ints = list(map(int, numbers))
    return sum(ints)

s = ""___ apples, ___ bananas and ___ oranges""

print(find_numbers(s)) # output: ___"
Create a for loop in Python to reverse a given string.,Text,"text = ""Text""
rev_text = """" 
  
for i in range(len(text) - 1, -1, -1): 
    rev_text = rev_text + text[i] 
  
print(rev_text)",Data Type,1125,"text = ""Text""
rev_text = """" 
  
for i in range(len(text) - ___, -___, -___): 
    rev_text = rev_text + text[i] 
  
print(rev_text)"
Write a Python program to take a string as input and to create an object that contains all unique characters in the string as keys and the number of occurrences of the character as values.,"string = ""This is a string""","def char_freq(string):
 freq_dict = {}
 
 for char in string:
 if char in freq_dict:
 freq_dict[char] += 1
 else: 
 freq_dict[char] = 1
 
 return freq_dict",Data Type,1149,"def char_freq(string):
 freq_dict = {}
 
 for char in string:
 if char in freq_dict:
 freq_dict[char] += ___
 else: 
 freq_dict[char] = ___
 
 return freq_dict"
Develop an algorithm to check if a string S is a palindrome in Python.,"String S = ""racecar""","def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False
    return True",Data Type,1158,"def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // ___):
        if s[i] != s[len(s) - i - ___]:
            return ___
    return ___"
Construct a Python program to find all substrings of a given string,String : Python,"def get_all_substrings(input_string): 
	length = len(input_string) 
	return [input_string[i:j+1] for i in range(length)  
							for j in range(i,length)] 

output = get_all_substrings('Python') 
print(output)",Data Type,1175,"def get_all_substrings(input_string): 
	length = len(input_string) 
	return [input_string[i:j+___] for i in range(length)  
							for j in range(i,length)] 

output = get_all_substrings('Python') 
print(output)"
Design a python program which takes a word string as an argument and returns the number of vowels in the string.,"""Hello""","def count_vowels(string):
    count = 0
    for ch in string:
        if ch in 'aeiouAEIOU':
            count += 1
    return count",Data Type,1189,"def count_vowels(string):
    count = ___
    for ch in string:
        if ch in 'aeiouAEIOU':
            count += ___
    return count"
Write a function in Python that constructs a URL based on user input. The function should take a string and an integer as arguments and should construct a URL with the string as the base followed by sequential numbers starting from the number provided in the integer argument.,"base = ""https://www.example.com/""
start_num = 10","def construct_url(base, start_num):
 num = start_num
 while True:
 url = base + str(num)
 yield url
 num += 1",Data Type,1204,"def construct_url(base, start_num):
 num = start_num
 while ___:
 url = base + ___
 yield url
 num += ___"
Write a Python script that receives a string from the command line and prints out the string in reverse order.,"""This is my string.""","import sys

input_string = sys.argv[1]
print(input_string[::-1])",Data Type,1235,"import sys

input_string = sys.argv[___]
print(input_string[::-___])"
Write a function in Python to search a string for a specific pattern.,"Search for ""abc"" in ""abcxyzabc","def search_for_pattern(s, pattern):
    if pattern in s:
        return True
    else:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)",Data Type,1237,"def search_for_pattern(s, pattern):
    if pattern in s:
        return ___
    else:
        return ___

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)"
Create a program in Python that takes a given string and returns a dictionary whose keys are the words in the string and values are the number of occurances of each word.,"String = ""Hello world, This is me""","def word_count(string):
 count = {}
 string = string.split()

 for word in string:
 if word in count:
 count[word] += 1
 else:
 count[word] = 1

 return count

print(word_count(""Hello world, This is me""))",Data Type,1249,"def word_count(string):
 count = {}
 string = string.split()

 for word in string:
 if word in count:
 count[word] += ___
 else:
 count[word] = ___

 return count

print(word_count(""Hello world, This is me""))"
Generate a program to extract the substring from a given string,"string = 'Python is fun'
start = 7
end = 11","def extract_substring(string, start, end):
    substr = string[start : end]
    return substr

string = 'Python is fun'
start = 7
end = 11

print(extract_substring(string, start, end))",Data Type,1251,"def extract_substring(string, start, end):
    substr = string[start : end]
    return substr

string = 'Python is fun'
start = ___
end = ___

print(extract_substring(string, start, end))"
Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.,‘Hello World’,"def countUppercase(myStr):
    uppercaseCount = 0
    for l in myStr:
        if l.isupper():
            uppercaseCount+=1
    return uppercaseCount

print(countUppercase('Hello World'))",Data Type,1265,"def countUppercase(myStr):
    uppercaseCount = ___
    for l in myStr:
        if l.isupper():
            uppercaseCount+=___
    return uppercaseCount

print(countUppercase('Hello World'))"
Reverse an input string using Python.,Hello World!,"def rev_string(s): 
   return s[::-1] 
  
s = ""Hello World!""
print(rev_string(s))",Data Type,1267,"def rev_string(s): 
   return s[::-___] 
  
s = ""Hello World!""
print(rev_string(s))"
Write a Python program to split a string on the first occurrence of a given substring.,"string = ""www.example.com""
substring = "".""","string_list = string.split(substring,1)
print(string_list)",Data Type,1279,"string_list = string.split(substring,___)
print(string_list)"
Write a Python code snippet to count the number of occurrences of a given letter in a string.,"string = ""Mississippi"",
letter = ""s""","letter = 's'
string = ""Mississippi""
count = 0
for char in string:
   if char == letter:
       count += 1
print(count)",Data Type,1289,"letter = 's'
string = ""Mississippi""
count = ___
for char in string:
   if char == letter:
       count += ___
print(count)"
"Write a function in Python that will take a string as input, reverse the order of the words, and return the new string.","string = ""Hello World""","def reverseString(string):
  words = string.split(' ')
  reversedString = []
  for i in range(len(words)-1, -1, -1):
    reversedString.append(words[i])
  return ' '.join(reversedString)
  
print(reverseString(""Hello World"")) # Output: World Hello",Data Type,1315,"def reverseString(string):
  words = string.split(' ')
  reversedString = []
  for i in range(len(words)-___, -___, -___):
    reversedString.append(words[i])
  return ' '.join(reversedString)
  
print(reverseString(""Hello World"")) # Output: World Hello"
Create a Python function to delete the last character of a given string.,"""Hello World!""","def delete_last_char(string):
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-1]

if __name__ == '__main__':
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)",Data Type,1321,"def delete_last_char(string):
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-___]

if __name__ == '__main__':
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)"
Create a Python function that takes a string as an input and returns the substring between the first and the last character.,thequickbrownfox,"def get_substring(string):
  return string[1:-1]",Data Type,1333,"def get_substring(string):
  return string[___:-___]"
Use a regular expression to find all emails in a given string in Python.,"myString = ""my name is Joe and my email is joe@example.com""","import re 

pattern = ""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+""

result = re.findall(pattern, myString)

print(result) # Output will be [""joe@example.com""]",Data Type,1362,"import re 

pattern = ""[a-zA-Z0-9_.+-]+@[a-zA-Z0-___-]+\.[a-zA-Z0-___-.]+""

result = re.findall(pattern, myString)

print(result) # Output will be [""joe@example.com""]"
Create a Python program to parse and modify the following input string.,"""ABC 123 XYZ 456""","input_string = ""ABC 123 XYZ 456""
output_string = """"

for char in input_string:
    if char.isalpha():
        output_string += char.lower()
    else:
        output_string += char

print(output_string)",Data Type,1389,"input_string = ""ABC ___ XYZ ___""
output_string = """"

for char in input_string:
    if char.isalpha():
        output_string += char.lower()
    else:
        output_string += char

print(output_string)"
Compute the length of a string in Python,"str = ""Hello, World!""","str = ""Hello, World!""
length = len(str)
print('Length of string is:',length) # Length of string is: 13",Data Type,1407,"str = ""Hello, World!""
length = len(str)
print('Length of string is:',length) # Length of string is: ___"
Design an algorithm to find out the top 5 characters with the highest occurrence from a string in Python.,This is a test sentence to use for the example.,"from collections import Counter

def top_characters(string):
    counter = Counter(string).most_common(5)
    return counter
    
string = ""This is a test sentence to use for the example.""
print(top_characters(string))
# Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)]",Data Type,1420,"from collections import Counter

def top_characters(string):
    counter = Counter(string).most_common(___)
    return counter
    
string = ""This is a test sentence to use for the example.""
print(top_characters(string))
# Output: [('e', ___), ('s', ___), ('t', ___), ('o', ___), ('i', ___)]"
Transform the JSON string below into a Python dictionary.,"{""name"": ""John"", ""age"": 30, ""city"": ""New York""}","import json
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
my_dict = json.loads(data)",Data Type,1424,"import json
data = '{""name"": ""John"", ""age"": ___, ""city"": ""New York""}'
my_dict = json.loads(data)"
Design a Python code solution to reverse a string with a given input.,"string = ""Hello world!""","def reverse_string(string):
    return string[::-1]

string = ""Hello world!""
print(reverse_string(string))",Data Type,1438,"def reverse_string(string):
    return string[::-___]

string = ""Hello world!""
print(reverse_string(string))"
Convert the following JSON string into a Python dictionary.,"{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}","import json

json_string = '{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}",Data Type,1439,"import json

json_string = '{""a"":___, ""b"": ""Hello"", ""c"": {""d"": [___, ___]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': ___, 'b': 'Hello', 'c': {'d': [___, ___]}}"
Develop a program in Python that reverses a given string.,"""Hello World!""","def reverse_string(string):
    reversed_string = string[::-1] 
    return reversed_string

reversed_string = reverse_string(""Hello World!"")
print(reversed_string)",Data Type,1441,"def reverse_string(string):
    reversed_string = string[::-___] 
    return reversed_string

reversed_string = reverse_string(""Hello World!"")
print(reversed_string)"
Convert the given string from Upper Camel Case notation to lower snake case notation in Python.,UpperCamelCase,"lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]",Data Type,1449,"lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[___:]"
Write a Python class that has a method that encrypts a given string using Caesar’s Cypher.,"Key = 3
String = “Hello World”","class Encrypter:
    def ceaserCypherEncryptor(self, key, string):
        encStr = """"
        for ch in string:
            encStr += chr(ord(ch)+key)
        return encStr
        
e = Encrypter()
encStr = e.ceaserCypherEncryptor(3, ""Hello World"") 
print(encStr) 
# Output 
Khoor#Zruog",Data Type,1454,"class Encrypter:
    def ceaserCypherEncryptor(self, key, string):
        encStr = """"
        for ch in string:
            encStr += chr(ord(ch)+key)
        return encStr
        
e = Encrypter()
encStr = e.ceaserCypherEncryptor(___, ""Hello World"") 
print(encStr) 
# Output 
Khoor#Zruog"
Design a function in Python that reverses a string.,"string = ""Hello World""","def reverse_string(str): 
    return str[::-1]  
  
reverse = reverse_string(string) 
print(""The reversed string is : "",reverse)",Data Type,1466,"def reverse_string(str): 
    return str[::-___]  
  
reverse = reverse_string(string) 
print(""The reversed string is : "",reverse)"
Optimize a Python program to reverse a string with a lower time complexity.,"string = ""Hello World!""","def reverse_string(string): 
    return string[::-1] 
    
# Time Complexity: O(n)
# Space Complexity: O(1)",Data Type,1476,"def reverse_string(string): 
    return string[::-___] 
    
# Time Complexity: O(n)
# Space Complexity: O(___)"
Create a Python program to delete all characters at odd index in a given string.,"Hello, World!","def deleteAtOddIndex(s):
    output = """"
    for i in range(len(s)):
        # delete the character at an odd index
        if i % 2 != 0:
            pass
        else:
            output += s[i]
    return output",Data Type,1478,"def deleteAtOddIndex(s):
    output = """"
    for i in range(len(s)):
        # delete the character at an odd index
        if i % ___ != ___:
            pass
        else:
            output += s[i]
    return output"
Generate a Python program to find the number of words with distinct letters in a given string,string = 'hello world',"def count_distinct_letters(string):
   distinct_letters = set()
   for word in string.split(' '):
        distinct_letters.update(set(word))
   return len(distinct_letters)

# example
string = 'hello world'
print(count_distinct_letters(string)) # 6",Data Type,1482,"def count_distinct_letters(string):
   distinct_letters = set()
   for word in string.split(' '):
        distinct_letters.update(set(word))
   return len(distinct_letters)

# example
string = 'hello world'
print(count_distinct_letters(string)) # ___"
Write a Python program to separate a specified string into characters and numbers.,"str = ""ab12cd3""","def separate_charnum(str):
    chars = []
    nums = []
    for char in str:
        if char.isalpha():
            chars.append(char)
        else:
            nums.append(int(char))
    return chars, nums

str = ""ab12cd3""

chars, nums = separate_charnum(str)
print(chars)
print(nums)",Data Type,1516,"def separate_charnum(str):
    chars = []
    nums = []
    for char in str:
        if char.isalpha():
            chars.append(char)
        else:
            nums.append(___)
    return chars, nums

str = ""ab12cd3""

chars, nums = separate_charnum(str)
print(chars)
print(nums)"
Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.,"s1='abc' 
s2='cab'","def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return False
  
    temp = s1 + s1 
    if (s2 in temp): 
        return True
    return False

result = isRotation('abc', 'cab')
print(result)",Data Type,1523,"def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return ___
  
    temp = s1 + s1 
    if (s2 in temp): 
        return ___
    return ___

result = isRotation('abc', 'cab')
print(result)"
Create a Python program to convert a binary string into its equivalent decimal value.,binary_num = '10101',"def binary_to_decimal(binary_num):
    decimal_num = 0
    n = 0

    for i in range(len(binary_num)-1, -1, -1):
        if binary_num[i] == '1':
            decimal_num += 2**n
        
        n += 1
    
    return decimal_num",Data Type,1537,"def binary_to_decimal(binary_num):
    decimal_num = ___
    n = ___

    for i in range(len(binary_num)-___, -___, -___):
        if binary_num[i] == '___':
            decimal_num += ___**n
        
        n += ___
    
    return decimal_num"
Implement a search algorithm to quickly identify a specific character in a given string using Python.,"string = ""helloworld""
character = ""o""","def search(s, ch):
    for i, c in enumerate(s):
        if c == ch:
            return i
    return -1

string = ""helloworld""
character = ""o""

index = search(string, character)
if index == -1:
    print(""Character not found"")
else:
    print(""Index of the character is"", index)",Data Type,1539,"def search(s, ch):
    for i, c in enumerate(s):
        if c == ch:
            return i
    return -___

string = ""helloworld""
character = ""o""

index = search(string, character)
if index == -___:
    print(""Character not found"")
else:
    print(""Index of the character is"", index)"
Create a Python function that reverses every other word in a given string.,This is a test,"def reverseWords(sentence):
  words = sentence.split()
  reversed_sentence = []
  for i in range(len(words)):
    if (i % 2 == 0):
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-1])
  return "" "".join(reversed_sentence)

print(reverseWords(""This is a test""))",Data Type,1551,"def reverseWords(sentence):
  words = sentence.split()
  reversed_sentence = []
  for i in range(len(words)):
    if (i % ___ == ___):
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-___])
  return "" "".join(reversed_sentence)

print(reverseWords(""This is a test""))"
Create a Python program to read a string and return the character with the highest frequency.,Sample string,"import collections

str = ""Sample string""
count = collections.Counter(str)
highest_freq = 0
highest_freq_char = ''

for char, value in count.items():
    if value > highest_freq:
        highest_freq = value
        highest_freq_char = char

print(""The character {} has the highest frequency of {} in this string"".format(highest_freq_char, highest_freq))",Data Type,1605,"import collections

str = ""Sample string""
count = collections.Counter(str)
highest_freq = ___
highest_freq_char = ''

for char, value in count.items():
    if value > highest_freq:
        highest_freq = value
        highest_freq_char = char

print(""The character {} has the highest frequency of {} in this string"".format(highest_freq_char, highest_freq))"
Write a Python program to search a given string for any repeated characters.,"""AAAAB""","def find_repeat_characters(string):
 repeat_characters = set()
 for char in string:
 if string.count(char) > 1 and char not in repeat_characters:
 repeat_characters.add(char)
 return repeat_characters

string = 'AAAAB'
print(find_repeat_characters(string)) # {'A'}",Data Type,1614,"def find_repeat_characters(string):
 repeat_characters = set()
 for char in string:
 if string.count(char) > ___ and char not in repeat_characters:
 repeat_characters.add(char)
 return repeat_characters

string = 'AAAAB'
print(find_repeat_characters(string)) # {'A'}"
Format the given string with line breaks and indentations to make it a valid Python code.,for i in range(10) print(i),"for i in range(10):
  print(i)",Data Type,1625,"for i in range(___):
  print(i)"
Generate a Python program to search for a substring within a string.,"text = ""This is a sample string."" 
substring = ""sample""","def search_substring(text, substring):
    if substring in text:
        return True
    else:
        return False

result = search_substring(text, substring)
print(result)",Data Type,1630,"def search_substring(text, substring):
    if substring in text:
        return ___
    else:
        return ___

result = search_substring(text, substring)
print(result)"
Optimize a program in Python for searching for a string in a list.,"value = 'apple'
list = ['bannanas', 'oranges', 'apple']","def search(value, list):
    for i in range(len(list)):
        if list[i] == value:
            return i
    return -1

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))",Data Type,1640,"def search(value, list):
    for i in range(len(list)):
        if list[i] == value:
            return i
    return -___

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))"
Write a Python program to format a specified string to limit the number of characters to 6.,"""Hello World""","def limit_string(s):
    if len(s) >= 6:
        return s[:6]
    else:
        return s

result = limit_string(""Hello World"")
print(result)",Data Type,1647,"def limit_string(s):
    if len(s) >= ___:
        return s[:___]
    else:
        return s

result = limit_string(""Hello World"")
print(result)"
Write a Python program to check if a provided string is valid JSON.,"""<noinput>""","def is_valid_json(s):
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid",Data Type,1657,"def is_valid_json(s):
    valid = ___
    try:
        json.loads(s)
    except ValueError:
        valid = ___
    return valid"
Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.,"'This is a test', ['test', 'this', 'is']","def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True",Data Type,1678,"def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return ___
 return ___

print(contains_words('This is a test', ['test', 'this', 'is'])) # ___"
Create a Python script to format the following string with proper new lines and indentation.,"'{ ""name"":""John"", ""age"":30, ""city"":""New York""}'","formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'",Data Type,1688,"formatted = '{\n  ""name"":""John"",\n  ""age"":___,\n  ""city"":""New York""\n}'"
Create a Python program to convert a given list of strings to float values,"str_list = ['45', '87.5', '90.9', '24']","def convertStringToFloat(str_list):
    floats = []
    for s in str_list:
        floats.append(float(s))
    return floats

convertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]",Data Type,1696,"def convertStringToFloat(str_list):
    floats = []
    for s in str_list:
        floats.append(___)
    return floats

convertStringToFloat(str_list) // Returns [___.___, ___.___, ___.___, ___.___]"
Write a Python program to format a specified string to limit the number of characters to 6.,"str = ""Python is a great programming language!""","new_str = ""Python"".ljust(6, ""..."")

print(new_str)  #Python...",Data Type,1699,"new_str = ""Python"".ljust(___, ""..."")

print(new_str)  #Python..."
Generate a correct Python program to compute the reverse of the given string,"string = ""hello""","def reverse_string(string):
    output = """"
    for i in range(len(string)):
        output += string[len(string)-1-i]
    return output",Data Type,1703,"def reverse_string(string):
    output = """"
    for i in range(len(string)):
        output += string[len(string)-___-i]
    return output"
Create a Python program that takes in a string and returns a string with the characters in reversed order.,"String: ""Hello World""","def reverse(str):
    return str[::-1]",Data Type,1713,"def reverse(str):
    return str[::-___]"
Optimize a given Python script that reverse a string.,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string","def reverse_string(string):
    return string[::-1]",Data Type,1755,"def reverse_string(string):
    return string[::-___]"
Write a Python function to convert a list of integers into a comma separated string.,"int_list = [1, 4, 5, 6, 7]","def list_to_string(int_list):
    string = """"

    for i in int_list:
        string += str(i) + "",""

    # Remove trailing comma
    string = string[:-1]

    return string

int_list = [1, 4, 5, 6, 7] 
print(list_to_string(int_list)) // ""1,4,5,6,7""",Data Type,1758,"def list_to_string(int_list):
    string = """"

    for i in int_list:
        string += ___ + "",""

    # Remove trailing comma
    string = string[:-___]

    return string

int_list = [___, ___, ___, ___, ___] 
print(list_to_string(int_list)) // ""___,___,___,___,___"""
Create a Python program to check if a given string has duplicates characters.,"String: ""helloworld""","def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return True
        set.add(ch)
    return False",Data Type,1761,"def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return ___
        set.add(ch)
    return ___"
Optimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string.,'Hello World!',"def reverse_string(input):
    return input[::-1]",Data Type,1765,"def reverse_string(input):
    return input[::-___]"
Create a function in Python that takes two parameters: string and character. It should return the number of occurrences of the given character in the given string.,"string = 'This is a sample string.'
character = 's'","def count_char(string, character):
 count = 0
 for c in string:
 if c == character:
 count += 1
 return count

print(count_char('This is a sample string.', 's'))  # 3",Data Type,1768,"def count_char(string, character):
 count = ___
 for c in string:
 if c == character:
 count += ___
 return count

print(count_char('This is a sample string.', 's'))  # ___"
"Create a function in Python that given a string, calculates the number of vowels in it.",Hello World!,"def count_vowels(s):
  vowels = 'aeiou'
  count = 0
  for c in s.lower():
    if c in vowels:
      count += 1
  return count

s = 'Hello World!'
print(count_vowels(s)) # Output 3",Data Type,1772,"def count_vowels(s):
  vowels = 'aeiou'
  count = ___
  for c in s.lower():
    if c in vowels:
      count += ___
  return count

s = 'Hello World!'
print(count_vowels(s)) # Output ___"
Create a Python script to return a list of the top five longest words in a given string.,"""I am a coding enthusiast""","def get_longest_words(sentence): 
    words = sentence.split() 
   
    words.sort(key = lambda s: len(s)) 
  
    longest_words = words[-5:] 
    longest_words.reverse() 
  
    return longest_words 

sentence = ""I am a coding enthusiast""
print(get_longest_words(sentence))",Data Type,1785,"def get_longest_words(sentence): 
    words = sentence.split() 
   
    words.sort(key = lambda s: len(s)) 
  
    longest_words = words[-___:] 
    longest_words.reverse() 
  
    return longest_words 

sentence = ""I am a coding enthusiast""
print(get_longest_words(sentence))"
Develop an algorithm in Python that reverses a given string.,"""hello world""","def reverseString(s): 
    return s[::-1] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))",Data Type,1808,"def reverseString(s): 
    return s[::-___] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))"
"Generate a Python program that takes a date as input and returns the day of the week as a string (i.e. Sunday, Monday, etc.).",3/22/2021,"import datetime

def get_weekday(date_string):
    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')
    return date.strftime('%A')

weekday = get_weekday('3/22/2021')
print(weekday)",Data Type,1809,"import datetime

def get_weekday(date_string):
    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')
    return date.strftime('%A')

weekday = get_weekday('___/___/___')
print(weekday)"
Create a Python program to round up a float to the nearest integer.,3.14,"def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)",Data Type,1816,"def round_up(f):
    if f - int(f) >= ___.___:
        return int(f) + ___
    return ___

round_val = round_up(___.___)
print(round_val)"
Develop a Python code to convert the given binary string to its corresponding integer value.,'100100',"def binary_to_int(binary):
    result = 0
    for i in range(len(binary)): 
        digit = binary[i] 
        if digit == '1':
            result = result + pow(2, len(binary)-i-1)  
    return result

binary_to_int('100100') # returns 36",Data Type,1831,"def binary_to_int(binary):
    result = ___
    for i in range(len(binary)): 
        digit = binary[i] 
        if digit == '___':
            result = result + pow(___, len(binary)-i-___)  
    return result

binary_to_int('___') # returns ___"
"Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)",No input,"import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()",Data Type,1855,"import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(___))
 print(password)

generate_password()"
Optimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters,"def random_string(): 
    string = '' 
    for i in range(7): 
        string += chr(randint(97, 122)) 
        string += str(randint(0, 9)) 
    return string","import random

def random_string(): 
    string = ''.join(random.sample(
        'abcdefghijklmnopqrstuvwxyz' 
        + '0123456789', 7)) 
    return string",Data Type,1873,"import random

def random_string(): 
    string = ''.join(random.sample(
        'abcdefghijklmnopqrstuvwxyz' 
        + '___', ___)) 
    return string"
Write a Python function to remove the nth occurrence of a given substring from the given string.,"string = ""This is a chance to practice python string manipulation skills""
substring = ""is""
n = 2","def remove_nth_occurrence(string, substring, n):
 count = 0
 for i, ch in enumerate(string):
  if string[i:i+len(substring)] == substring:
   count += 1
   if count == n:
    string = string[:i] + string[i+len(substring):]
 return string",Data Type,1888,"def remove_nth_occurrence(string, substring, n):
 count = ___
 for i, ch in enumerate(string):
  if string[i:i+len(substring)] == substring:
   count += ___
   if count == n:
    string = string[:i] + string[i+len(substring):]
 return string"
Come up with a python program that takes a string and return a reversed version of the string.,"""<noinput>""","def reverse_string(string):
    return string[::-1]",Data Type,1910,"def reverse_string(string):
    return string[::-___]"
Design a Python program to determine if one string is a substring of another.,"""Hello"", ""Hello World""","def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))",Data Type,1916,"def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return ___

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return ___

    return ___

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))"
Create a Python program for encrypting a given string using the XOR technique.,"String: ""Hello world!""","def xor_crypt_string(data, key='my_secret_key'):
    l = len(key)
    return bytearray((
        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))
    ))

encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))

print(encrypted_data)",Data Type,1919,"def xor_crypt_string(data, key='my_secret_key'):
    l = len(key)
    return bytearray((
        (data[i] ^ ord(key[i % l])) for i in range(___,len(data))
    ))

encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-___'))

print(encrypted_data)"
Write a Python program to search a given string for the first occurrence of a given substring.,"string = ""The quick brown fox"", substring = ""fox""","string = ""The quick brown fox""
substring = ""fox""

def find_substring(string, substring):
    index = string.find(substring)
    if index == -1:
        print(""Substring not found!"")
    else:
        print(""Substring found at index:"", index)

find_substring(string, substring)",Data Type,1933,"string = ""The quick brown fox""
substring = ""fox""

def find_substring(string, substring):
    index = string.find(substring)
    if index == -___:
        print(""Substring not found!"")
    else:
        print(""Substring found at index:"", index)

find_substring(string, substring)"
Create a Python script to count the frequencies of each letter in a given string.,"text = ""Hello, World!""","def count_letter_frequency(text): 
    frequency = {} 
    for letter in text: 
        if letter in frequency: 
            frequency[letter] += 1
        else: 
            frequency[letter] = 1
    return frequency 
  
text = ""Hello, World!""
print(count_letter_frequency(text))",Data Type,1937,"def count_letter_frequency(text): 
    frequency = {} 
    for letter in text: 
        if letter in frequency: 
            frequency[letter] += ___
        else: 
            frequency[letter] = ___
    return frequency 
  
text = ""Hello, World!""
print(count_letter_frequency(text))"
Create a function using Python that parses a given string and returns a dictionary containing each word in the string as key and its frequency as value.,"string = ""This is a random sentence.""","def parseString(string):
    freqDict = dict()
    stringWords = string.split("" "") 
    for word in stringWords:
        if word in freqDict:
            freqDict[word] += 1
        else:
            freqDict[word] = 1
    return freqDict",Data Type,1938,"def parseString(string):
    freqDict = dict()
    stringWords = string.split("" "") 
    for word in stringWords:
        if word in freqDict:
            freqDict[word] += ___
        else:
            freqDict[word] = ___
    return freqDict"
Write a Python program to find the string which is most frequent among the given list of strings.,"my_list = [""apple"", ""banana"", ""apple"", ""orange""]","def most_frequent(my_list):
    max_count = 0
    frequent_string = """"

    for i in my_list:
        if my_list.count(i) > max_count:
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string",Data Type,1952,"def most_frequent(my_list):
    max_count = ___
    frequent_string = """"

    for i in my_list:
        if my_list.count(i) > max_count:
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string"
modify the following Python program such that it returns an error if the input is an empty string.,"def print_string(text):
    print(text)","def print_string(text):
    if len(text) > 0:
        print(text)
    else:
        raise Exception('The input string is empty')",Data Type,1953,"def print_string(text):
    if len(text) > ___:
        print(text)
    else:
        raise Exception('The input string is empty')"
Generate a program in Python to extract all numbers from a given string,"string = ""The 3 monkeys had 2 apples""","import re

def extract_numbers(string): 
    numbers = re.findall('\d+', string)
    return numbers

string = ""The 3 monkeys had 2 apples""
print(extract_numbers(string))",Data Type,1965,"import re

def extract_numbers(string): 
    numbers = re.findall('\d+', string)
    return numbers

string = ""The ___ monkeys had ___ apples""
print(extract_numbers(string))"
Design an algorithm in Python that takes a string as input and returns a compressed version of the string.,aaabbccccca,"def stringCompress(s):
    result = """"
    counter = 1
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            counter+=1
        else:
            result += s[i] + str(counter)
            counter = 1
        
    result += s[i] + str(counter)
    return result

print(stringCompress('aaabbccccca'))",Data Type,1969,"def stringCompress(s):
    result = """"
    counter = ___
    for i in range(len(s)-___):
        if s[i] == s[i+___]:
            counter+=___
        else:
            result += s[i] + ___
            counter = ___
        
    result += s[i] + ___
    return result

print(stringCompress('aaabbccccca'))"
Write a Python function to count the number of occurances of a given letter in a given string.,"s = ""Hello World""","def count_letter(s, letter): 
    count = 0
    for char in s:
        if char == letter:
            count += 1
    return count

s = ""Hello World""
letter = ""l""
print(count_letter(s, letter))",Data Type,1990,"def count_letter(s, letter): 
    count = ___
    for char in s:
        if char == letter:
            count += ___
    return count

s = ""Hello World""
letter = ""l""
print(count_letter(s, letter))"
"Build a type checking function to determine what kind of data is being processed, given a generic string in Python.",str = '123',"def check_type(str):
    try:
        int(str)
        return 'Integer'
    except ValueError:
        pass
   
    try:
        float(str)
        return 'Float'
    except ValueError:
        pass
   
    return 'String'

print(check_type('123')) # prints 'Integer'",Data Type,2016,"def check_type(str):
    try:
        ___
        return 'Integer'
    except ValueError:
        pass
   
    try:
        ___
        return 'Float'
    except ValueError:
        pass
   
    return 'String'

print(check_type('___')) # prints 'Integer'"
Write a Python function to generate a substitution cipher of a given string,"string = ""abcdefghijklmnopqrstuvwxyz""","def substitution_cipher(string):
    cipher = """"
    for i in string:
        cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) 
    return cipher",Data Type,2027,"def substitution_cipher(string):
    cipher = """"
    for i in string:
        cipher += chr(ord('a') + (ord(i) - ord('a') + ___) % ___) 
    return cipher"
Write a python program that prints out the number of times each letter appears in a given string.,"string = ""Hello, World!""","string = ""Hello, World!""
for char in string:
 count = string.count(char)
 print(char + "" appears "" + str(count) + "" times"")

# Output
H appears 1 times
e appears 1 times
l appears 3 times
o appears 2 times
, appears 1 times
  appears 1 times
W appears 1 times
r appears 1 times
d appears 1 times
! appears 1 times",Data Type,2041,"string = ""Hello, World!""
for char in string:
 count = string.count(char)
 print(char + "" appears "" + ___ + "" times"")

# Output
H appears ___ times
e appears ___ times
l appears ___ times
o appears ___ times
, appears ___ times
  appears ___ times
W appears ___ times
r appears ___ times
d appears ___ times
! appears ___ times"
"Create a Python function that takes a string argument, removes all the special characters and returns the modified string.",This# 1$ i^s an% e*xa_mple -str_ing,"def remove_special_characters(s):
    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') 
    return new_s

remove_special_characters(""This# 1$ i^s an% e*xa_mple -str_ing"")",Data Type,2050,"def remove_special_characters(s):
    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') 
    return new_s

remove_special_characters(""This# ___$ i^s an% e*xa_mple -str_ing"")"
Write a Python program to evaluate a given string and return a Boolean value.,String = “The sky is blue”,"def evaluate_string(string):
 if string == 'The sky is blue':
  return True
 else:
  return False",Data Type,2052,"def evaluate_string(string):
 if string == 'The sky is blue':
  return ___
 else:
  return ___"
"Create a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string.","string = ""hello hello world""
pattern = ""hello""","def countSubstring(string, sub_string):
  count = 0 
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      count+=1
  return count
  
print(countSubstring(string, pattern))",Data Type,2083,"def countSubstring(string, sub_string):
  count = ___ 
  for i in range(___, len(string)-len(sub_string)+___):
    if (string[i:i+len(sub_string)] == sub_string):
      count+=___
  return count
  
print(countSubstring(string, pattern))"
Write a Python function which extracts zip codes from a provided string.,"My address is 123 Main St, ZIP 12345","import re

def extract_zip_codes(string):
    zip_codes = re.findall(""(?<=ZIP )\d+"", string)
    return zip_codes

print(extract_zip_codes(""My address is 123 Main St, ZIP 12345""))",Data Type,2095,"import re

def extract_zip_codes(string):
    zip_codes = re.findall(""(?<=ZIP )\d+"", string)
    return zip_codes

print(extract_zip_codes(""My address is ___ Main St, ZIP ___""))"
Create a program in Python which takes a string and finds the number of each English vowels.,sentence = 'Hello World',"def count_vowels(sentence):
    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}
    for char in sentence.lower():
        if char in vowels:
            vowels[char] += 1
    return vowels

sentence = 'Hello World'  
print(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}",Data Type,2100,"def count_vowels(sentence):
    vowels = {'a': ___, 'e': ___, 'i': ___, 'o': ___, 'u': ___}
    for char in sentence.lower():
        if char in vowels:
            vowels[char] += ___
    return vowels

sentence = 'Hello World'  
print(count_vowels(sentence)) # Output = {'a': ___, 'e': ___, 'i': ___, 'o': ___, 'u': ___}"
Can you generate a Python program that takes a string as input and returns a dictionary with the count of each letter in the string?,"""hello world""","def letter_count(s):
    count = {}
    for c in s:
        if c not in count:
            count[c] = 1
        else:
            count[c] += 1
    return count

s = ""hello world""
count = letter_count(s)
print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}",Data Type,2108,"def letter_count(s):
    count = {}
    for c in s:
        if c not in count:
            count[c] = ___
        else:
            count[c] += ___
    return count

s = ""hello world""
count = letter_count(s)
print(count) # {'h': ___, 'e': ___, 'l': ___, 'o': ___, ' ': ___, 'w': ___, 'r': ___, 'd': ___}"
"Create a string formatting function in Python that takes a first name, last name, and age as parameters.","firstName - ""John""
lastName - ""Doe""
age - 35","def format_name(firstName, lastName, age):
 return f'{lastName}, {firstName} is {age} years old.'

# Usage example
print(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old.",Data Type,2122,"def format_name(firstName, lastName, age):
 return f'{lastName}, {firstName} is {age} years old.'

# Usage example
print(format_name('John', 'Doe', ___)) # Output: Doe, John is ___ years old."
How can we create a function to check if a given string is a palindrome in Python?,No input,"def is_palindrome(s): 
    s = s.lower() 
    return s == s[::-1]",Data Type,2145,"def is_palindrome(s): 
    s = s.lower() 
    return s == s[::-___]"
Can you write a Python script that prints out the number of 'a's found in a text string?,"string = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""","text = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""

count = 0 
for char in text:
    if char == 'a':
        count += 1

print(count)",Data Type,2147,"text = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""

count = ___ 
for char in text:
    if char == 'a':
        count += ___

print(count)"
Create a program in Python to calculate the length of a given string without using the len() method.,"string=""Python""","def length(string):
    count = 0
    for char in string:
        count += 1
    return count

string=""Python""

print(length(string))",Data Type,2149,"def length(string):
    count = ___
    for char in string:
        count += ___
    return count

string=""Python""

print(length(string))"
Create a function to generate a random string of fixed length using Python.,length=8,"import random
import string

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
     
    return result_str

random_string = generate_random_string(8)
print(random_string) # Outputs 'yezrtsyz'",Data Type,2162,"import random
import string

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
     
    return result_str

random_string = generate_random_string(___)
print(random_string) # Outputs 'yezrtsyz'"
"Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False.",MyString,"def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return True
    return False",Data Type,2194,"def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return ___
    return ___"
Create a python program to check the following string for palindrome,"""madam""","def check_palindrome(string):
  rev_str = string[::-1]
  if rev_str == string:
    return ""The string is a palindrome""
  return ""The string is not a palindrome""

print(check_palindrome(""madam""))",Data Type,2213,"def check_palindrome(string):
  rev_str = string[::-___]
  if rev_str == string:
    return ""The string is a palindrome""
  return ""The string is not a palindrome""

print(check_palindrome(""madam""))"
Create a Python dictionary that stores the number of occurrences of each character in a string.,"s = ""Hello World!""","def countCharacters(s):
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
  for char in s:
    # If the character is not in the dictionary, set the value to 1
    if char not in chars_dict:
      chars_dict[char] = 1
    # Otherwise, increment the value
    else:
      chars_dict[char] += 1
  
  return chars_dict",Data Type,2226,"def countCharacters(s):
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
  for char in s:
    # If the character is not in the dictionary, set the value to ___
    if char not in chars_dict:
      chars_dict[char] = ___
    # Otherwise, increment the value
    else:
      chars_dict[char] += ___
  
  return chars_dict"
"Create a program in Python that takes two parameters, a string and an integer, and returns the string repeated that many times.","""Hello"", 4","def repeat_string(string, n):
    repeated_string = string * n
    return repeated_string

print(repeat_string(""Hello"", 4))",Data Type,2230,"def repeat_string(string, n):
    repeated_string = string * n
    return repeated_string

print(repeat_string(""Hello"", ___))"
"In Python, write a function that takes a string as input and reverses it.","""Hello World!""","def reverseString(text):
    return text[::-1]
 
result = reverseString(""Hello World!"")
print(result)",Data Type,2238,"def reverseString(text):
    return text[::-___]
 
result = reverseString(""Hello World!"")
print(result)"
Generate a correct python program to identify a particular character in a string.,Search for the letter 'e' in the given string,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True
    return False",Data Type,2239,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return ___
    return ___"
Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.,"List of strings: [""Hello"", ""World"", ""Hello"", ""World""]
Search String: ""World""","def search_string(lst, s):
 for i, item in enumerate(lst):
 if item == s:
 return i
 return -1",Data Type,2241,"def search_string(lst, s):
 for i, item in enumerate(lst):
 if item == s:
 return i
 return -___"
Write a function in Python that takes in a string and then reverses each word in the string.,"string = ""This is a string""","def reverse_words(s):
  words = s.split()
  reversed_words = [word[::-1] for word in words]
  return ' '.join(reversed_words)

string = ""This is a string""
print(reverse_words(string))
// Output: sihT si a gnirts",Data Type,2242,"def reverse_words(s):
  words = s.split()
  reversed_words = [word[::-___] for word in words]
  return ' '.join(reversed_words)

string = ""This is a string""
print(reverse_words(string))
// Output: sihT si a gnirts"
Create a function in Python to determine whether a given string contains any whitespace character.,"""Hello World""","def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return True
 return False

print(hasWhitespace(""Hello World""))",Data Type,2243,"def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return ___
 return ___

print(hasWhitespace(""Hello World""))"
Write a Python program to add two numbers given in string format.,"first number: ""2""
second number: ""3""","def addStringNumbers(num1,num2): 
    return int(num1) + int(num2)",Data Type,2245,"def addStringNumbers(num1,num2): 
    return ___ + ___"
"Develop a Python program that takes an array of strings, and returns an object that contains the frequency of each string in the array.","[‘a’, ‘a’, ‘b’, ‘a’, ‘c’, ‘a’]","def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}",Data Type,2273,"def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += ___
        else: 
            freq_dict[ele] = ___
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': ___, 'b': ___, 'c': ___}"
"Write a Python program to create a new string from a given string, where the first and last chars have been exchanged.",Hello,"def exchange_first_last(str1):
  str2 = """" 
  str2 = str1[-1] + str1[1:-1] + str1[0]
  return str2

print(exchange_first_last('Hello'))",Data Type,2286,"def exchange_first_last(str1):
  str2 = """" 
  str2 = str1[-___] + str1[___:-___] + str1[___]
  return str2

print(exchange_first_last('Hello'))"
Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.,"items = [1,2,3,4,5]","def detect_item(items, item):
  if item in items:
    return True
  else:
    return False",Data Type,2312,"def detect_item(items, item):
  if item in items:
    return ___
  else:
    return ___"
Construct a function in Python that takes a list of strings and returns the original list with each string replaced by its reverse.,"list = ['hello', 'world', 'example']","def reverse_list(lst):
    return [s[::-1] for s in lst]

print(reverse_list(list))
# Output: ['olleh', 'dlrow', 'elpmaxe']",Data Type,2315,"def reverse_list(lst):
    return [s[::-___] for s in lst]

print(reverse_list(list))
# Output: ['olleh', 'dlrow', 'elpmaxe']"
Create a function using Python to reverse the order of the characters in each word of a given string,string = “Hello World”,"def reverse_words(string): 
  splitted_words = string.split("" "") 

  reversed_words = [word[::-1] for word in splitted_words] 

  reversed_string = "" "".join(reversed_words) 
 
  return reversed_string 

reverse_words(string)",Data Type,2338,"def reverse_words(string): 
  splitted_words = string.split("" "") 

  reversed_words = [word[::-___] for word in splitted_words] 

  reversed_string = "" "".join(reversed_words) 
 
  return reversed_string 

reverse_words(string)"
Find the number 10 in a string using a Python regular expression.,"String: ""This string contains the number 10 in it""","re.search(""10"", ""This string contains the number 10 in it"")",Data Type,2339,"re.search(""___"", ""This string contains the number ___ in it"")"
Create a Python script to reverse a given string.,'Hello World',"def reverse_string(string):
    return string[::-1]

result = reverse_string('Hello World')
print(result)",Data Type,2350,"def reverse_string(string):
    return string[::-___]

result = reverse_string('Hello World')
print(result)"
Write a Python program to convert a list of numbers into a string.,"[2, 3, 10]","def list_to_str(lst):
    result = "","".join(map(str, lst))
    return result

result = list_to_str([2, 3, 10])
print(result)",Data Type,2351,"def list_to_str(lst):
    result = "","".join(map(str, lst))
    return result

result = list_to_str([___, ___, ___])
print(result)"
Write a script in Python to return the cryptographic hash of a string.,string = 'Welcome to the world of programming!',"import hashlib

def get_hash(string):
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-8'))
    return sha1.hexdigest()

print(get_hash(string))",Data Type,2368,"import hashlib

def get_hash(string):
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-___'))
    return sha1.hexdigest()

print(get_hash(string))"
"Write a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results.","""Hello World!""","str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

for char in chars:
    if char in char_counts:
        char_counts[char] += 1
    else:
        char_counts[char] = 1

# printing result
for char, count in char_counts.items():
    print(""{} : {}"".format(char, count))",Data Type,2374,"str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

for char in chars:
    if char in char_counts:
        char_counts[char] += ___
    else:
        char_counts[char] = ___

# printing result
for char, count in char_counts.items():
    print(""{} : {}"".format(char, count))"
Generate a list in Python that contains all the words from a source string that start with a certain letter.,"source_string = ""My dog loves to play in the park!""
letter = ""p""","def generate_list(source_string, letter):
  words = source_string.split()
  result = []
  for word in words:
    if word[0].lower() == letter:
      result.append(word)
  return result

print(generate_list(source_string, letter))",Data Type,2382,"def generate_list(source_string, letter):
  words = source_string.split()
  result = []
  for word in words:
    if word[___].lower() == letter:
      result.append(word)
  return result

print(generate_list(source_string, letter))"
"Write a python program to convert a time string ""hh:mm:ss"" into total number of seconds","time = ""08:11:15""",time_in_secs = 8 * 3600 + 11 * 60 + 15,Data Type,2402,time_in_secs = ___ * ___ + ___ * ___ + ___
Create a Python program to check if a string ends with a given substring.,"s = 'Hello World', substring = 'ld'","def endswith(s, substring): 
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints True",Data Type,2406,"def endswith(s, substring): 
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints ___"
Create a program in Python which takes a string and an integer as input and prints the string the given number of times.,"String: Hello
Integer: 3","string = ""Hello""
num = 3

for i in range(num):
    print(string)",Data Type,2407,"string = ""Hello""
num = ___

for i in range(num):
    print(string)"
Create a function in Python to calculate the total of all the characters in a given input string.,string: 'Hello World!',"def char_total(string):
total = 0

for char in string:
 total += ord(char)

return total

print(char_total('Hello World!')) 
# Output: 1116",Data Type,2411,"def char_total(string):
total = ___

for char in string:
 total += ord(char)

return total

print(char_total('Hello World!')) 
# Output: ___"
Write a function in Python to display all the words beginning with a given alphabet in a given string.,"str = ""This is a sample sentence""","def all_words_beginning_with(str, alphabet):
  words = str.split()
  result = []
  for word in words:
    if word[0].upper() == alphabet.upper():
      result.append(word)
  
  return result",Data Type,2425,"def all_words_beginning_with(str, alphabet):
  words = str.split()
  result = []
  for word in words:
    if word[___].upper() == alphabet.upper():
      result.append(word)
  
  return result"
Create a python code to generate a dictionary of char counts for a given string.,"input_string = ""Hello World!""","def char_count_dict(input_string):
    char_dict = {}

    for char in input_string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    
    return char_dict

print(char_count_dict(input_string))",Data Type,2433,"def char_count_dict(input_string):
    char_dict = {}

    for char in input_string:
        if char in char_dict:
            char_dict[char] += ___
        else:
            char_dict[char] = ___
    
    return char_dict

print(char_count_dict(input_string))"
"Write a Python program to find all the words in a string, that begin with a vowel.",This is a sample string,"vowels = ['a', 'e', 'i', 'o', 'u']
words = ""This is a sample string"".split()

for word in words:
 if word[0].lower() in vowels:
 print(word)",Data Type,2469,"vowels = ['a', 'e', 'i', 'o', 'u']
words = ""This is a sample string"".split()

for word in words:
 if word[___].lower() in vowels:
 print(word)"
Create a program in Python to reverse a string using a recursive algorithm.,"string = ""Hello world!""","def reverse_string_recursive(string: str) -> str: 
  if len(string) == 0:
    return string 
  else: 
    return reverse_string_recursive(string[1:]) + string[0]

print(reverse_string_recursive(string)) 
# Output: ""!dlrow olleH""",Data Type,2479,"def reverse_string_recursive(string: str) -> str: 
  if len(string) == ___:
    return string 
  else: 
    return reverse_string_recursive(string[___:]) + string[___]

print(reverse_string_recursive(string)) 
# Output: ""!dlrow olleH"""
Develop a script in Python to find all numbers in a given string.,This sentence has two numbers: 35 and 347.,"import re

s = ""This sentence has two numbers: 35 and 347.""
numlist = []
for item in re.findall('\d+', s):
    numlist.append(int(item))
    
print(numlist) # prints [35, 347]",Data Type,2480,"import re

s = ""This sentence has two numbers: ___ and ___.""
numlist = []
for item in re.findall('\d+', s):
    numlist.append(___)
    
print(numlist) # prints [___, ___]"
Create a Python function that takes a string and returns the longest prefix that is a palindrome.,"The input string is ""abca"".","def longest_prefix_palindrome(s):
  if len(s) <= 1: 
    return s
  
  max_length = 0
  for i in range(1,len(s)): 
    if s[:i] == s[i-1::-1]:
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))",Data Type,2506,"def longest_prefix_palindrome(s):
  if len(s) <= ___: 
    return s
  
  max_length = ___
  for i in range(___,len(s)): 
    if s[:i] == s[i-___::-___]:
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))"
Create a Python function to input a string and then return the number of vowels found in the string.,hello,"def count_vowels(string):
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 count = 0
 for letter in string.lower():
 if letter in vowels:
  count += 1
 return count

output = count_vowels(""Hello"")
print(output)  # output = 2",Data Type,2526,"def count_vowels(string):
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 count = ___
 for letter in string.lower():
 if letter in vowels:
  count += ___
 return count

output = count_vowels(""Hello"")
print(output)  # output = ___"
"Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.","myString = ""Hello World!""
substring = ""World""","def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False",Data Type,2559,"def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + ___):
    if myString[i:i+len(substring)] == substring:
      return ___
  return ___"
Create a python program that takes a string and prints the reverse of it.,Hello,"""""""
Create a python program that takes a string and prints the reverse of it
""""""

# Get the input string 
my_string = input('Enter a string: ') 

# Reverse the string 
rev_string = my_string[::-1] 

# Print the reversed string
print(rev_string)",Data Type,2578,"""""""
Create a python program that takes a string and prints the reverse of it
""""""

# Get the input string 
my_string = input('Enter a string: ') 

# Reverse the string 
rev_string = my_string[::-___] 

# Print the reversed string
print(rev_string)"
Develop a Python program to count the frequency of each word in a given string.,"string = ""This is a string""","def countFreq(str): 
      
    # break the string into words  
    str = str.split("" "")  
      
    # Count each word using Dictionary  
    freq = {} 
    for word in str: 
        if word in freq: 
            freq[word] += 1
        else: 
            freq[word] = 1
    return freq",Data Type,2581,"def countFreq(str): 
      
    # break the string into words  
    str = str.split("" "")  
      
    # Count each word using Dictionary  
    freq = {} 
    for word in str: 
        if word in freq: 
            freq[word] += ___
        else: 
            freq[word] = ___
    return freq"
Generate python code to encode a given string in base64.,string = 'This is a test string.',"def base64_encode(string):
    encoded_string = base64.b64encode(string.encode('utf-8')) 
    return encoded_string.decode('utf-8')",Data Type,2635,"def base64_encode(string):
    encoded_string = base64.b64encode(string.encode('utf-___')) 
    return encoded_string.decode('utf-___')"
Create a Completion function in Python that takes a string and returns a list of strings that match the input string.,string = “th”,"def completion(string):
  results = []
  words = [""the"", ""that"", ""this"", ""those"", ""thing"", ""think"", ""thought""]
  for word in words:
    if len(word) > 2 and word.startswith(string):
      results.append(word)
  return results
  
print(completion(""th"")) # Output: [""those"", ""think"", ""thought""]",Data Type,2644,"def completion(string):
  results = []
  words = [""the"", ""that"", ""this"", ""those"", ""thing"", ""think"", ""thought""]
  for word in words:
    if len(word) > ___ and word.startswith(string):
      results.append(word)
  return results
  
print(completion(""th"")) # Output: [""those"", ""think"", ""thought""]"
"Using Python, detect if the given string is a palindrome or not.",madam,"def isPalindrome(s): 
    s = s.lower()
    return s == s[::-1]

string_input = ""madam""
palindrome_status = isPalindrome(string_input)

if palindrome_status:
    print(""The given string is a Palindrome"")
else:
    print(""The given string is not a Palindrome"")",Data Type,2660,"def isPalindrome(s): 
    s = s.lower()
    return s == s[::-___]

string_input = ""madam""
palindrome_status = isPalindrome(string_input)

if palindrome_status:
    print(""The given string is a Palindrome"")
else:
    print(""The given string is not a Palindrome"")"
Write a Python script to check if the given string is a palindrome.,"string_to_test = ""racecar""","def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True
    return False",Data Type,2690,"def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return ___
    return ___"
Write a Python program to check if a given string is a rotation of another given string.,"str1 = ""waterbottle""
str2 = ""erbottlewat""","def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)",Data Type,2695,"def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return ___
 
 concat_str2 = str2 * ___
 
 return str1 in concat_str2
 
is_rotation(str1, str2)"
Write a Python function to edit the given input string such that all consecutive duplicate characters in the string are removed.,"inputstring = ""aabbcccdddd""","def remove_duplicates(inputstring):
    result = """"
    for i in range(len(inputstring)):
        if i == 0 or inputstring[i] != inputstring[i-1]:
            result += inputstring[i]
    return result",Data Type,2714,"def remove_duplicates(inputstring):
    result = """"
    for i in range(len(inputstring)):
        if i == ___ or inputstring[i] != inputstring[i-___]:
            result += inputstring[i]
    return result"
"Generate a Python function that reverses a given string, and test the function with an input of ""Hello"".","""Hello""","def reverse(string):
    return string[::-1]

print(reverse('Hello')) #prints ""olleH""",Data Type,2754,"def reverse(string):
    return string[::-___]

print(reverse('Hello')) #prints ""olleH"""
Create a Python program that takes a string as input and prints all permutations of it in lexicographical order.,ABC,"def permutations(string):
 if len(string) == 0:
 return

 else:
 first_char = string[0]
 remainder = string[1:]
 permutations(remainder)
 for perm in permutations(remainder):
 for i in range(len(perm)+1):
 result = perm[:i] + first_char + perm[i:]
 print(result)

permutations(""ABC"") #run the code

# Output
ABC
ACB
BAC
BCA
CBA
CAB",Data Type,2791,"def permutations(string):
 if len(string) == ___:
 return

 else:
 first_char = string[___]
 remainder = string[___:]
 permutations(remainder)
 for perm in permutations(remainder):
 for i in range(len(perm)+___):
 result = perm[:i] + first_char + perm[i:]
 print(result)

permutations(""ABC"") #run the code

# Output
ABC
ACB
BAC
BCA
CBA
CAB"
Write a Python program to find the most common letter in the given string.,"str = ""hello world""","str = ""hello world""

from collections import Counter

def most_common_letter(str):
    letters_count = Counter(str).most_common()
    return letters_count[0][0]

print(most_common_letter(str))",Data Type,2800,"str = ""hello world""

from collections import Counter

def most_common_letter(str):
    letters_count = Counter(str).most_common()
    return letters_count[___][___]

print(most_common_letter(str))"
"Given an URL as a string, write a program in Python to find the domain name.","url = ""https://www.google.com""","def get_domain_name(url): 
    return url.split(""/"")[2]

print(get_domain_name(""https://www.google.com""))  # prints www.google.com",Data Type,2827,"def get_domain_name(url): 
    return url.split(""/"")[___]

print(get_domain_name(""https://www.google.com""))  # prints www.google.com"
Create a Python script that takes a given text string and outputs the number of words in the string.,Text string: “I love programming”,"def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # 3",Data Type,2831,"def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # ___"
Generate a python program to parse a string and extract the number of vowels.,"Input string: “Hello World!""","def count_vowels(s):
    vowels = [""a"", ""e"", ""i"" , ""o"", ""u""]
    count = 0 
    for character in s.lower():
        if character in vowels:
            count += 1
    print(""Number of vowels :"", count)",Data Type,2859,"def count_vowels(s):
    vowels = [""a"", ""e"", ""i"" , ""o"", ""u""]
    count = ___ 
    for character in s.lower():
        if character in vowels:
            count += ___
    print(""Number of vowels :"", count)"
Write a Python script to parse a given string and construct a dictionary from its content.,"""bio: John Smith, age: 32""","def parse_string(s):
    info = s.split("", "")

    result = {}
    for item in info:
        k, v = item.split("": "")
        result[k] = v

    return result

result = parse_string(""bio: John Smith, age: 32"")
print(result)",Data Type,2867,"def parse_string(s):
    info = s.split("", "")

    result = {}
    for item in info:
        k, v = item.split("": "")
        result[k] = v

    return result

result = parse_string(""bio: John Smith, age: ___"")
print(result)"
Write a script in Python to generate a dictionary of words from a given string.,def words_dict(string):,"def words_dict(string):
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
    
    return word_dict",Data Type,2872,"def words_dict(string):
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    for word in words:
        if word in word_dict:
            word_dict[word] += ___
        else: 
            word_dict[word] = ___
    
    return word_dict"
Create a function in Python that takes a string as input and replaces the character at a given index with the character '*'.,"Input string: ""Hello world""
Index: 3","def replace_character(string, index):
    new_string = """"
    for i in range(len(string)):
        if i == index:
            new_string += ""*""
        else:
            new_string += string[i]
    return new_string

print(replace_character(""Hello world"", 3)) # Output: Hel*lo world",Data Type,2881,"def replace_character(string, index):
    new_string = """"
    for i in range(len(string)):
        if i == index:
            new_string += ""*""
        else:
            new_string += string[i]
    return new_string

print(replace_character(""Hello world"", ___)) # Output: Hel*lo world"
Create a Python code to split a given string into an array with all of the individual sentences.,'This is a test string with three sentences!',"def split_sentences(text):
    sentences = []
    start = 0
    for i in range(len(text)):
        if text[i] == '.' or text[i] == '!' or text[i] == '?':
            sentences.append(text[start:i+1])
            start = i+1
    return sentences

split_sentences('This is a test string with three sentences!')",Data Type,2904,"def split_sentences(text):
    sentences = []
    start = ___
    for i in range(len(text)):
        if text[i] == '.' or text[i] == '!' or text[i] == '?':
            sentences.append(text[start:i+___])
            start = i+___
    return sentences

split_sentences('This is a test string with three sentences!')"
Write a Python program to classify the type of an angle based on the measure of the angle.,angle = 180,"def classify_angle(angle):
  if angle == 0:
    return ""Zero angle""
  elif angle > 0 and angle < 90:
    return ""Acute angle""
  elif angle == 90:
    return ""Right angle""
  elif angle > 90 and angle < 180:
    return ""Obtuse angle""
  elif angle == 180:
    return ""Straight angle""

result = classify_angle(angle)",Data Type,2934,"def classify_angle(angle):
  if angle == ___:
    return ""Zero angle""
  elif angle > ___ and angle < ___:
    return ""Acute angle""
  elif angle == ___:
    return ""Right angle""
  elif angle > ___ and angle < ___:
    return ""Obtuse angle""
  elif angle == ___:
    return ""Straight angle""

result = classify_angle(angle)"
Identify the data type of the following input and provide a code to convert it to an integer in Python.,"""123""","input_type = type(""123"") # str

converted_int = int(""123"") # 123",Data Type,2958,"input_type = type(""___"") # str

converted_int = int(""___"") # ___"
Create a program to search for a substring in a string and return the starting position of the substring.,"String: ""Python is powerful & fun""
Substring: ""pow""","string = ""Python is powerful & fun""
substring = ""pow""
 
start_pos = string.find(substring)
if start_pos == -1:
    print(""substring not found"")
else:
    print(""substring found at position:"", start_pos)",Data Type,2967,"string = ""Python is powerful & fun""
substring = ""pow""
 
start_pos = string.find(substring)
if start_pos == -___:
    print(""substring not found"")
else:
    print(""substring found at position:"", start_pos)"
Implement a Python program that takes an input string and returns the first character that appears more than once in that string.,"input_string = ""programming""","def find_duplicate_char(input_string):
 char_count = {}
 for char in input_string:
  if char in char_count:
   return char
  else:
   char_count[char] = 1
 return 'No duplicates found'

input_string = ""programming""
print(find_duplicate_char(input_string))

# Output:
# 'r'",Data Type,2980,"def find_duplicate_char(input_string):
 char_count = {}
 for char in input_string:
  if char in char_count:
   return char
  else:
   char_count[char] = ___
 return 'No duplicates found'

input_string = ""programming""
print(find_duplicate_char(input_string))

# Output:
# 'r'"
Build a function in Python to test whether a string is a palindrome.,"""aba""","def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")",Data Type,2996,"def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-___] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return ___
    return ___
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == ___: 
    print(""Yes"") 
else: 
    print(""No"")"
Write a Python code snippet to find the words which are at least 4 characters long in a given string.,"string = ""This is a sample sentence""","def find_words(string):
    words = string.split()
    result = []
    for word in words:
        if len(word) >= 4:
            result.append(word)
    return result",Data Type,3023,"def find_words(string):
    words = string.split()
    result = []
    for word in words:
        if len(word) >= ___:
            result.append(word)
    return result"
Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.,"""ABACD"", ""CDABA""","def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))",Data Type,3037,"def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return ___
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return ___
    return ___

print(is_rotation(""ABACD"", ""CDABA""))"
Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.,"8, 8, 12","a = 8
b = 8
c = 12

if a == b and b == c:
    print(""Equilateral triangle"")
elif a == b or b == c or a == c:
    print(""Isosceles triangle"")
else:
    print(""Scalene triangle"")",Data Type,3042,"a = ___
b = ___
c = ___

if a == b and b == c:
    print(""Equilateral triangle"")
elif a == b or b == c or a == c:
    print(""Isosceles triangle"")
else:
    print(""Scalene triangle"")"
Create a solution that detects the presence of a character in a string.,Python,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return True
    return False

string = 'Python'
char = 'y'
print(detect_character(string, char))",Data Type,3058,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return ___
    return ___

string = 'Python'
char = 'y'
print(detect_character(string, char))"
"Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not.","haystack: ""This is a string"" 
needle: ""is""","def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False",Data Type,3084,"def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns ___ 
contains_substring(""This is a string"", ""xyz"") # returns ___"
Create a function in Python that takes a dictionary and a string as an argument and checks if the key is present in the given dictionary.,"dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""","def checkKeyExists(dictionary, key):
    return key in dictionary.keys()

dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""

print(checkKeyExists(dict, String))",Data Type,3088,"def checkKeyExists(dictionary, key):
    return key in dictionary.keys()

dict = {
    ""Name"":""John"",
    ""Age"":___
}
String = ""Name""

print(checkKeyExists(dict, String))"
Write code in Python to count the number of distinct substrings for a given string.,string = “abcd”,"def count_distinct_substrings(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            count += 1
    return count

result = count_distinct_substrings(""abcd"")
print(result)",Data Type,3094,"def count_distinct_substrings(string):
    count = ___
    for i in range(len(string)):
        for j in range(i+___, len(string)+___):
            count += ___
    return count

result = count_distinct_substrings(""abcd"")
print(result)"
Build a Python program that extracts all email addresses from a given string.,"""This is an example with two emails: john@example.com, and jane@example.com""","import re

def find_emails(text):
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)",Data Type,3105,"import re

def find_emails(text):
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-___-]+\.[a-zA-Z0-___-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)"
Out put the first 3 characters of a given string.,Python,"string = ""Python""

print(string[:3])",Data Type,3110,"string = ""Python""

print(string[:___])"
Create a python program for creating a dictionaries of char count in a given string.,"string = ""Hello World""","def get_char_count(s):
    """"""
    This function returns a dictionary of character count in a given string.
    :param s: string
    :return: dictionary
    """"""
    char_count = dict()
    for char in s:
        if char not in char_count.keys():
            char_count[char] = 1
        else:
            char_count[char] += 1
    return char_count",Data Type,3115,"def get_char_count(s):
    """"""
    This function returns a dictionary of character count in a given string.
    :param s: string
    :return: dictionary
    """"""
    char_count = dict()
    for char in s:
        if char not in char_count.keys():
            char_count[char] = ___
        else:
            char_count[char] += ___
    return char_count"
Generate a Python function that takes a list of strings and returns a dictionary with each string as the key and the length of the string as the value.,"['one', 'two', 'three', 'four']","def count_lengths(strings):
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}",Data Type,3133,"def count_lengths(strings):
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': ___, 'two': ___, 'three': ___, 'four': ___}"
Create a program in Python to to compute the sum of all the numbers present in a given string.,string = 'The sum of 5 and 9 is 14',"def sum_of_numbers_in_string(string):
    number_list = []
    for word in string.split(' '):
        if word.isdigit():
            number_list.append(int(word))

    return sum(number_list)",Data Type,3139,"def sum_of_numbers_in_string(string):
    number_list = []
    for word in string.split(' '):
        if word.isdigit():
            number_list.append(___)

    return sum(number_list)"
Can you write a Python3 program to calculate the number of times a character appears in a given string?,"""Hello World!""","str1 = ""Hello World!""

char = 'l'
count = 0

for i in str1:
     if i == char:
          count = count + 1

# Print the result 
print (f'The character {char} appears {count} times in the string {str1}')",Data Type,3148,"str1 = ""Hello World!""

char = 'l'
count = ___

for i in str1:
     if i == char:
          count = count + ___

# Print the result 
print (f'The character {char} appears {count} times in the string {str1}')"
Convert a given list of integers to a string in Python.,"[56, 23, 7]","def list_to_string(int_list):
  return ' '.join(str(x) for x in int_list)

int_list = [56, 23, 7]
print(list_to_string(int_list))",Data Type,3149,"def list_to_string(int_list):
  return ' '.join(___ for x in int_list)

int_list = [___, ___, ___]
print(list_to_string(int_list))"
"Given two strings, write a python function to check whether one string is a substring of another.","String1 = ""abc""
String2 = ""abcdef""","def is_substring(string1, string2): 
    if string1 in string2:
        return True
    else:
        return False",Data Type,3156,"def is_substring(string1, string2): 
    if string1 in string2:
        return ___
    else:
        return ___"
Design an algorithm in Python to convert a binary string into its decimal representation.,"""1010""","def binaryToDecimals(binary_number):
  decimal = 0
  for i, digit in enumerate(reversed(binary_number)):
    decimal += int(digit) * (2**i)
  return decimal

print (binaryToDecimals(""1010""))  # Output 10",Data Type,3157,"def binaryToDecimals(binary_number):
  decimal = ___
  for i, digit in enumerate(reversed(binary_number)):
    decimal += int(digit) * (___**i)
  return decimal

print (binaryToDecimals(""___""))  # Output ___"
Write a function in Python that takes a single string argument and prints it out in reverse.,"""Hello World!""","def printReverseString(in_str): 
  
    reversed_str = in_str[::-1] 
    print(reversed_str) 

printReverseString(""Hello World!"")",Data Type,3161,"def printReverseString(in_str): 
  
    reversed_str = in_str[::-___] 
    print(reversed_str) 

printReverseString(""Hello World!"")"
Can you convert a given dictionary into a string using Python?,"{""foo"": ""bar"", ""hello"": ""world""}","dictionary_string = str({""foo"": ""bar"", ""hello"": ""world""})",Data Type,3181,dictionary_string = ___
Develop a function to search for a character into a given string and return its index if present.,"String: Python
Character: y","#function to search for a character
def search_char(str, char):
	idx = -1
	for i in range(len(str)):
		if str[i] == char:
			idx = i
			break
	return idx
    
#call the function
str = 'Python'
char = 'y'

index = search_char(str, char)
#print the result
if index != -1:
	print('Character found at index:', index)
else:
	print('Character not found')",Data Type,3190,"#function to search for a character
def search_char(str, char):
	idx = -___
	for i in range(len(str)):
		if str[i] == char:
			idx = i
			break
	return idx
    
#call the function
str = 'Python'
char = 'y'

index = search_char(str, char)
#print the result
if index != -___:
	print('Character found at index:', index)
else:
	print('Character not found')"
Write a Python program to generate all possible strings by rearranging the characters of a given string.,"String = ""ABC""","def generate_all_strings(string):
   if len(string) == 1: 
       return [string]
    result = []
    for i, letter in enumerate(string):
        for permutation in generate_all_strings(string[:i] + string[i+1:]):
            result += [letter + permutation]
    return result",Data Type,3212,"def generate_all_strings(string):
   if len(string) == ___: 
       return [string]
    result = []
    for i, letter in enumerate(string):
        for permutation in generate_all_strings(string[:i] + string[i+___:]):
            result += [letter + permutation]
    return result"
Create a function in Python for converting currencies from one type to another.,"currency_from = 'USD'
currency_to = 'EUR'
exchange_rate = 0.9","def convert_currencies(currency_from, currency_to, exchange_rate):
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', 0.9)
print(c) # Output: 0.9",Data Type,3219,"def convert_currencies(currency_from, currency_to, exchange_rate):
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', ___.___)
print(c) # Output: ___.___"
Write a python program to detect the occurrence of a given string in another large string.,"String 1: ""This is a test.""
String 2: ""test""","def str_find(str1, str2):
    return str1.find(str2) != -1

str_find(""This is a test."", ""test"")",Data Type,3224,"def str_find(str1, str2):
    return str1.find(str2) != -___

str_find(""This is a test."", ""test"")"
Write a Python program to turn a string into Pig Latin.,"string = ""Hello World""","def toPigLatin(s):
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
   if s[0] in vowels:
      return s + 'way'
   else:
      return s[1:] + s[0] + 'ay'
      
print(toPigLatin(""Hello World""))",Data Type,3233,"def toPigLatin(s):
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
   if s[___] in vowels:
      return s + 'way'
   else:
      return s[___:] + s[___] + 'ay'
      
print(toPigLatin(""Hello World""))"
Write a Python program to convert a query string into a dictionary.,"queryString = ""country=usa&city=ny&lang=en&temp=77""","queryString = ""country=usa&city=ny&lang=en&temp=77""

queryDict = {}

for keyValueString in queryString.split('&'):
 key, value = keyValueString.split('=')
 queryDict[key] = value

print(queryDict)
# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'}",Data Type,3242,"queryString = ""country=usa&city=ny&lang=en&temp=___""

queryDict = {}

for keyValueString in queryString.split('&'):
 key, value = keyValueString.split('=')
 queryDict[key] = value

print(queryDict)
# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '___'}"
Generate a Python program to implement the following feature: Search a phrase in a given string.,"Search the phrase ""to be or not to be"" in the string ""Whether 'tis nobler in the mind to suffer"".","def search(phrase, string):
  if phrase in string:
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)",Data Type,3269,"def search(phrase, string):
  if phrase in string:
     return ___ 
  else:
     return ___ 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)"
Create a Python program to generate all the permutations of a string using backtracking.,ABC,"def permute(s, l, r):
 if l == r:
  print(''.join(s))
 else:
  for i in range(l, r+1):
   s[l], s[i] = s[i], s[l]
   permute(s, l + 1, r)
   s[l], s[i] = s[i], s[l] 

def generate_all_permutations(s):
 n = len(s)
 permute(list(s), 0, n-1)

s = 'ABC'
generate_all_permutations(s)",Data Type,3272,"def permute(s, l, r):
 if l == r:
  print(''.join(s))
 else:
  for i in range(l, r+___):
   s[l], s[i] = s[i], s[l]
   permute(s, l + ___, r)
   s[l], s[i] = s[i], s[l] 

def generate_all_permutations(s):
 n = len(s)
 permute(list(s), ___, n-___)

s = 'ABC'
generate_all_permutations(s)"
Suppose you are given a list of strings in Python. Write a function that takes the list of strings as input and prints out the first string that is longer than 10 characters.,"[""cat"", ""doggo"", ""elephant"", ""giraffe""]","def find_long_string(string_list):
    for string in string_list:
        if len(string) > 10:
            print(string)
            break

string_list = [""cat"", ""doggo"", ""elephant"", ""giraffe""]
find_long_string(string_list)",Data Type,3275,"def find_long_string(string_list):
    for string in string_list:
        if len(string) > ___:
            print(string)
            break

string_list = [""cat"", ""doggo"", ""elephant"", ""giraffe""]
find_long_string(string_list)"
Create a Python program to replace all vowels in a given string with a given character.,"string = ""replace all vowels""
character = '*'","def replace_vowels(s, c): 
    return s.translate(str.maketrans('aeiou', c*5))

print(replace_vowels(string, character)) 

# Output: 
 r*pl*c* *ll v*w*ls",Data Type,3288,"def replace_vowels(s, c): 
    return s.translate(str.maketrans('aeiou', c*___))

print(replace_vowels(string, character)) 

# Output: 
 r*pl*c* *ll v*w*ls"
Design a Python program that computes the reverse of a given string.,Hello,"def reverseString(s):
    return s[::-1]
 
s = ""Hello""
print(reverseString(s))",Data Type,3289,"def reverseString(s):
    return s[::-___]
 
s = ""Hello""
print(reverseString(s))"
Create a Python program to count the number of upper case and lower case letters in a given string,Hello World,"def countLetters(s): 
   uppercase, lowercase = 0, 0
   for x in s: 
      if x.islower(): 
         lowercase+= 1
      elif x.isupper(): 
         uppercase+= 1
   print (""No. of Upper case characters : "", uppercase) 
   print (""No. of Lower case Characters : "", lowercase) 

countLetters('Hello World')",Data Type,3293,"def countLetters(s): 
   uppercase, lowercase = ___, ___
   for x in s: 
      if x.islower(): 
         lowercase+= ___
      elif x.isupper(): 
         uppercase+= ___
   print (""No. of Upper case characters : "", uppercase) 
   print (""No. of Lower case Characters : "", lowercase) 

countLetters('Hello World')"
Develop a Python program to determine the frequency of characters in an input string.,Input string: hello world,"def frequency(string):
 freq = {}
 for c in string:
 if c not in freq:
 freq[c] = 1
 else:
 freq[c] += 1
 return freq

string = input('Please enter your string: ')
print(frequency(string))",Data Type,3296,"def frequency(string):
 freq = {}
 for c in string:
 if c not in freq:
 freq[c] = ___
 else:
 freq[c] += ___
 return freq

string = input('Please enter your string: ')
print(frequency(string))"
Create a function to find the number of times the given string appears in the array.,"Python, ""Python""","def count_occurrences(items, string):
  count = 0
  for item in items: 
    if item == string:
      count += 1
  return count

print(count_occurrences(['Python', 'Python'], ""Python""))

# Output: 2",Data Type,3299,"def count_occurrences(items, string):
  count = ___
  for item in items: 
    if item == string:
      count += ___
  return count

print(count_occurrences(['Python', 'Python'], ""Python""))

# Output: ___"
Write a Python program for converting a decimal number into its corresponding binary string.,56,"def decimal_to_binary(n):
 binary_string = """"
 while n > 0:
 binary_string += str(n % 2)
 n //= 2
 return binary_string[::-1]

# Example
result = decimal_to_binary(5)
print(result) 

# Output
101",Data Type,3309,"def decimal_to_binary(n):
 binary_string = """"
 while n > ___:
 binary_string += str(n % ___)
 n //= ___
 return binary_string[::-___]

# Example
result = decimal_to_binary(___)
print(result) 

# Output
___"
Develop a Python program that encrypts a given string using 'Caeser Cipher',string = 'Hello World',"def caesarCipherEncryptor(string, key):
  newLetters = []
  newKey = key % 26
  for letter in string:
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
def getNewLetter(letter, key):
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)",Data Type,3356,"def caesarCipherEncryptor(string, key):
  newLetters = []
  newKey = key % ___
  for letter in string:
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
def getNewLetter(letter, key):
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= ___ else chr(___ + newLetterCode % ___)"
Create a Python program to reverse a string in place.,"""Hello World!""","def reverse_string_in_space(s): 
    temp_list = list(s) 
    start = 0
    end = len(temp_list) - 1
  
    while start < end: 
        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] 
        start += 1
        end -= 1
  
    s = """".join(temp_list) 
      
    return s
  
s = ""Hello World!""
print(reverse_string_in_space(s))",Data Type,3368,"def reverse_string_in_space(s): 
    temp_list = list(s) 
    start = ___
    end = len(temp_list) - ___
  
    while start < end: 
        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] 
        start += ___
        end -= ___
  
    s = """".join(temp_list) 
      
    return s
  
s = ""Hello World!""
print(reverse_string_in_space(s))"
Write a Python program that takes in a string of numbers delimited by spaces and returns the largest number.,64 8 224 54 21,"def findMax(string):
  numbers = string.split("" "")
  largest = 0
  
  for number in numbers:
    if number > largest:
      largest = number
      
  return largest
  
string = ""64 8 224 54 21""
print(f""The largest number is {findMax(string)}."")",Data Type,3382,"def findMax(string):
  numbers = string.split("" "")
  largest = ___
  
  for number in numbers:
    if number > largest:
      largest = number
      
  return largest
  
string = ""___ ___ ___ ___ ___""
print(f""The largest number is {findMax(string)}."")"
Write a code in Python to parse a JSON string.,"{
    ""name"": ""James"",
    ""age"": 27
}","import json

json_string = '{""name"": ""James"",""age"": 27}'
data = json.loads(json_string)
print(data[""name""], data[""age""])",Data Type,3398,"import json

json_string = '{""name"": ""James"",""age"": ___}'
data = json.loads(json_string)
print(data[""name""], data[""age""])"
Create a function in Python that can tell if a string is a palindrome or not.,civic,"def is_palindrome(word):
    reversed_word = word[::-1]

    if word == reversed_word:
        return True
    else:
        return False
        
result = is_palindrome('civic')
print(result)",Data Type,3406,"def is_palindrome(word):
    reversed_word = word[::-___]

    if word == reversed_word:
        return ___
    else:
        return ___
        
result = is_palindrome('civic')
print(result)"
Create a Python script that will create a dictionary that contains the character count of the given string.,"""Python""","from collections import Counter 
  
str = ""Python""

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print(""Count of all characters in GeeksforGeeks is :\n ""
                                        +  str(res))",Data Type,3420,"from collections import Counter 
  
str = ""Python""

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print(""Count of all characters in GeeksforGeeks is :\n ""
                                        +  ___)"
Design a function in Python which takes a string and returns the string with the last word capitalized.,"mystring = ""This is a simple string""","def capitalize_last_word(mystring):
    words = mystring.split()
    words[-1] = words[-1].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)",Data Type,3426,"def capitalize_last_word(mystring):
    words = mystring.split()
    words[-___] = words[-___].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)"
Create a Python program that takes in a string and counts the number of vowels in it.,"""Hello""","def count_vowels(s):
    count = 0
    for char in s:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

s = ""Hello""
result = count_vowels(s)
print(result)",Data Type,3428,"def count_vowels(s):
    count = ___
    for char in s:
        if char in ""aeiouAEIOU"":
            count += ___
    return count

s = ""Hello""
result = count_vowels(s)
print(result)"
"Write a function in Python which takes two parameters, a string and a single character, and returns a count of occurrence of the single character in the string.","String = ""The quick brown fox""
Character = ""q""","def countOccurrence(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

String = ""The quick brown fox""
Character = ""q""
count = countOccurrence(String, Character)
print(count)",Data Type,3445,"def countOccurrence(string, char):
    count = ___
    for c in string:
        if c == char:
            count += ___
    return count

String = ""The quick brown fox""
Character = ""q""
count = countOccurrence(String, Character)
print(count)"
Create a Python function that prints a string in reverse order.,"""GPT-3""","def reverse_string(string): 
  return string[::-1] 
  
print(reverse_string(""GPT-3""))",Data Type,3448,"def reverse_string(string): 
  return string[::-___] 
  
print(reverse_string(""GPT-___""))"
Create a Python script that uses regular expressions to find all phone numbers in a string.,The following phone number should be found: (111) 111-1111,"import re

phone_string = ""(111) 111-1111""

phone_numbers = re.findall(r'\(?\d{3}\)?-?\s?\d{3}-\d{4}', phone_string)

for number in phone_numbers:
 print(number)
# Output: (111) 111-1111",Data Type,3467,"import re

phone_string = ""(___) ___-___""

phone_numbers = re.findall(r'\(?\d{___}\)?-?\s?\d{___}-\d{___}', phone_string)

for number in phone_numbers:
 print(number)
# Output: (___) ___-___"
"Given a string which humans can read, write a Python program to create a list that contains all the words in the string in reverse order","input_string = ""I love to write code""","input_words = input_string.split()
output_words = [word[::-1] for word in input_words]
print(output_words)",Data Type,3502,"input_words = input_string.split()
output_words = [word[::-___] for word in input_words]
print(output_words)"
Make a program that finds the reverse of a string in Python.,Hello World,"def reverse(s): 
    return s[::-1] 

reverse(""Hello World"")",Data Type,3504,"def reverse(s): 
    return s[::-___] 

reverse(""Hello World"")"
Generate a python script that replaces each character in a string with its reverse:,string = 'Hello World',"def reverseString(string):
    n = len(string) 
    # create an empty array
    revString = [0 for i in range(n)] 
  
    for i in range(n):
        revString[n-i-1] = string[i] 
  
    return ""("" + ''.join(revString) + "")""
print(reverseString(""Hello World""))",Data Type,3519,"def reverseString(string):
    n = len(string) 
    # create an empty array
    revString = [___ for i in range(n)] 
  
    for i in range(n):
        revString[n-i-___] = string[i] 
  
    return ""("" + ''.join(revString) + "")""
print(reverseString(""Hello World""))"
What Python code can you create to remove the second character from a given string?,"string = ""example""","removed_string = string[:1] + string[2:]
print(removed_string) # ""xample""",Data Type,3521,"removed_string = string[:___] + string[___:]
print(removed_string) # ""xample"""
Create a function in Python that takes a list of strings and replaces each string with its length.,"[""apple"", ""banana"", ""mango""]","def length_strings(string_list):
  new_list = []
  for string in string_list:
    new_list.append(len(string))
  return new_list

print(length_strings([""apple"", ""banana"", ""mango""])) # [5, 6, 5]",Data Type,3534,"def length_strings(string_list):
  new_list = []
  for string in string_list:
    new_list.append(len(string))
  return new_list

print(length_strings([""apple"", ""banana"", ""mango""])) # [___, ___, ___]"
Design a program to reverse a given string.,Python,"def reverse_string(input_string):
    reversed_string = """"
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))",Data Type,3536,"def reverse_string(input_string):
    reversed_string = """"
    for i in range(len(input_string)-___, -___, -___):
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))"
Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.,"'waterbottle', 'erbottlewat'","def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > 0:
        return (str1 + str1).find(str2) != -1
    return False
    
is_rotation('waterbottle', 'erbottlewat')",Data Type,3541,"def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > ___:
        return (str1 + str1).find(str2) != -___
    return ___
    
is_rotation('waterbottle', 'erbottlewat')"
"Generate an algorithm in Python that given a string of words, should check if it is a Palindrome.","""racecar""","def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True",Data Type,3563,"def isPalindrome(s):
 s = s.lower()
 
 left = ___
 right = len(s) - ___
 
 while left < right:
 if s[left] != s[right]:
 return ___
 left += ___
 right -= ___
 
 return ___

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: ___"
Implement a Python program that takes in a string and prints out the ASCII codes for each character in the string.,"""Hello""","def get_ascii_codes(string):
    ascii_codes = [] 
  
    for char in string: 
        ascii_codes.append(ord(char)) 
  
    return ascii_codes 


print(get_ascii_codes(""Hello""))

# Output: [72, 101, 108, 108, 111]",Data Type,3574,"def get_ascii_codes(string):
    ascii_codes = [] 
  
    for char in string: 
        ascii_codes.append(ord(char)) 
  
    return ascii_codes 


print(get_ascii_codes(""Hello""))

# Output: [___, ___, ___, ___, ___]"
Compose a Python program that takes a list of strings and checks if each string length is 2 or more.,"['dog', 'cat', 'mouse', 'snake', 'python', 'go']","def isStringLengthMoreThanTwo(list): 
    new_list = [] 
  
    for string in list:
        if len(string) >= 2: 
            new_list.append(string) 
     
    return new_list
  
# Driver Code 
list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']
print(isStringLengthMoreThanTwo(list))",Data Type,3587,"def isStringLengthMoreThanTwo(list): 
    new_list = [] 
  
    for string in list:
        if len(string) >= ___: 
            new_list.append(string) 
     
    return new_list
  
# Driver Code 
list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']
print(isStringLengthMoreThanTwo(list))"
Create a Python script that searches the string for a given pattern and returns the starting position.,"""Hello world""","def find_pattern_position(string, pattern):
    for i in range(len(string) - len(pattern) + 1):
        if string[i:i+len(pattern)] == pattern:
            return i
    else:
        return -1

position = find_pattern_position(""Hello world"", ""world"")
print(position)",Data Type,3601,"def find_pattern_position(string, pattern):
    for i in range(len(string) - len(pattern) + ___):
        if string[i:i+len(pattern)] == pattern:
            return i
    else:
        return -___

position = find_pattern_position(""Hello world"", ""world"")
print(position)"
Generate a Python program that finds all palindromes in a given string.,"input_str = ""madamabcdcba""","input_str = ""madamabcdcba""

def find_palindromes(input_str):
 palindromes = []
 for i in range(len(input_str)):
  for j in range(i+1, len(input_str)):
   curr_str = input_str[i:j+1]
   if curr_str == curr_str[::-1]:
    palindromes.append(curr_str)
 return palindromes

print(find_palindromes(input_str))

# Output: ['madam', 'aba', 'bcdbcd', 'cba']",Data Type,3605,"input_str = ""madamabcdcba""

def find_palindromes(input_str):
 palindromes = []
 for i in range(len(input_str)):
  for j in range(i+___, len(input_str)):
   curr_str = input_str[i:j+___]
   if curr_str == curr_str[::-___]:
    palindromes.append(curr_str)
 return palindromes

print(find_palindromes(input_str))

# Output: ['madam', 'aba', 'bcdbcd', 'cba']"
Write down logic to generate all permutations of a given string in Python.,"String = ""ABC""","def permutations(str): 
    ans = []
    if len(str) == 1: 
        ans = [str] 
    else: 
        for i, letter in enumerate(str):
            for perm in permutations(str[:i] + str[i+1:]):
                ans += [letter + perm]
    return ans

print (permutations(""ABC""))",Data Type,3606,"def permutations(str): 
    ans = []
    if len(str) == ___: 
        ans = [str] 
    else: 
        for i, letter in enumerate(str):
            for perm in permutations(str[:i] + str[i+___:]):
                ans += [letter + perm]
    return ans

print (permutations(""ABC""))"
Generate a python program for creating a function to take a list of strings as input and return the longest string,"list of strings: ['hello', 'world', 'this', 'is', 'awesome']","def find_longest_string(arr):
    longest = arr[0]
    for string in arr:
        if len(string) > len(longest):
            longest = string
    return longest

result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome'])
print(result)",Data Type,3640,"def find_longest_string(arr):
    longest = arr[___]
    for string in arr:
        if len(string) > len(longest):
            longest = string
    return longest

result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome'])
print(result)"
Create a function in Python which can take in a string and capitalize the first character of the string.,"mystring = ""hello world""","def capitalize_first_character(mystring):
    return mystring[0].upper() + mystring[1:]",Data Type,3655,"def capitalize_first_character(mystring):
    return mystring[___].upper() + mystring[___:]"
Generate a Python program to convert a given binary string to its equivalent decimal value.,1110,"def binary_to_decimal(n):
    num = n
    dec_value = 0
    base = 1
    temp = num
    
    while temp > 0:
        last_digit = temp % 10
        temp = temp // 10
        dec_value += last_digit * base
        base = base * 2
    return dec_value",Data Type,3672,"def binary_to_decimal(n):
    num = n
    dec_value = ___
    base = ___
    temp = num
    
    while temp > ___:
        last_digit = temp % ___
        temp = temp // ___
        dec_value += last_digit * base
        base = base * ___
    return dec_value"
Develop a program in Python to identify the longest string in a list of strings.,"[‘apple’, ‘bee’, ‘cat’]","def longest_string(string_list):
    longest_str = string_list[0]
    longest_len = len(longest_str)
    for string in string_list:
        if len(string) > longest_len:
            longest_str = string
            longest_len = len(string)
    return longest_str

string_list = ['apple', 'bee', 'cat']
longest_str = longest_string(string_list)
print(longest_str)",Data Type,3698,"def longest_string(string_list):
    longest_str = string_list[___]
    longest_len = len(longest_str)
    for string in string_list:
        if len(string) > longest_len:
            longest_str = string
            longest_len = len(string)
    return longest_str

string_list = ['apple', 'bee', 'cat']
longest_str = longest_string(string_list)
print(longest_str)"
Create a Python program to check for anagrams of a string.,"""listen"", ""silent""","def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return False

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return False
 
    return True",Data Type,3706,"def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return ___

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return ___
 
    return ___"
Implement a python function to remove all special characters from a string.,"string = “@#$&#() <>, +/”","import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)",Data Type,3728,"import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-___]+', '', string)"
Create a function in Python which takes a given string and returns a dictionary containing the frequency of each word in the string.,"""Hello world hello world""","def word_frequency(string):
    word_freq = {} 
  
    for word in string.split(): 
        if word in word_freq: 
            word_freq[word] += 1
        else: 
            word_freq[word] = 1
  
    return word_freq 
      
string = ""Hello world hello world""
print(word_frequency(string))",Data Type,3739,"def word_frequency(string):
    word_freq = {} 
  
    for word in string.split(): 
        if word in word_freq: 
            word_freq[word] += ___
        else: 
            word_freq[word] = ___
  
    return word_freq 
      
string = ""Hello world hello world""
print(word_frequency(string))"
Create a Python function that converts an integer into a binary representation as a string.,13,"def to_binary(num):
  result = """"
  while num > 0:
   remainder = num % 2
   num = num // 2
   result = str(remainder) + result
  return result

print(to_binary(13)) # '1101'",Data Type,3741,"def to_binary(num):
  result = """"
  while num > ___:
   remainder = num % ___
   num = num // ___
   result = ___ + result
  return result

print(to_binary(___)) # '___'"
"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character.","words = ['apple','ball','cat','dog','elephant']
char = 'a'","def find_words(words, char):
    count_dict = dict()
    for word in words:
        if word.startswith(char):
            count_dict[word] = count_dict.get(word, 0) + 1
    return count_dict",Data Type,3747,"def find_words(words, char):
    count_dict = dict()
    for word in words:
        if word.startswith(char):
            count_dict[word] = count_dict.get(word, ___) + ___
    return count_dict"
"Input a text string, and build a function in Python to count the number of vowels in the string.",The quick brown fox jumps over the lazy dog,"def countVowels(sentence):
    vowels = 'aeiouAEIOU'
    count = 0
    for ch in sentence:
        if ch in vowels:
            count += 1
    return count

result = countVowels('The quick brown fox jumps over the lazy dog')
print(result)",Data Type,3748,"def countVowels(sentence):
    vowels = 'aeiouAEIOU'
    count = ___
    for ch in sentence:
        if ch in vowels:
            count += ___
    return count

result = countVowels('The quick brown fox jumps over the lazy dog')
print(result)"
Create a Python program which takes a list of strings as input and outputs a dictionary containing the count of each string.,"A list of strings including:
['Python', 'Java', 'C', 'Python', 'JavaScript']","string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']

string_dict = {}
for string in string_list:
 if string in string_dict:
 string_dict[string] += 1
 else:
 string_dict[string] = 1

print(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}",Data Type,3758,"string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']

string_dict = {}
for string in string_list:
 if string in string_dict:
 string_dict[string] += ___
 else:
 string_dict[string] = ___

print(string_dict) # Output: {'Python': ___, 'Java': ___, 'C': ___, 'JavaScript': ___}"
Write code in Python to find the frequency of words in a given string.,"String: ""The apple is red and the banana is yellow.""","str = ""The apple is red and the banana is yellow.""
wordfreq = {}
 
for rawword in str.lower().split():
    word = rawword.replace(""."","""")
    if word not in wordfreq:
        wordfreq[word] = 0
    wordfreq[word] += 1
    
print(""Frequency of the words:"")
for key, value in wordfreq.items():
  print(key, value)",Data Type,3780,"str = ""The apple is red and the banana is yellow.""
wordfreq = {}
 
for rawword in str.lower().split():
    word = rawword.replace(""."","""")
    if word not in wordfreq:
        wordfreq[word] = ___
    wordfreq[word] += ___
    
print(""Frequency of the words:"")
for key, value in wordfreq.items():
  print(key, value)"
Create a function using Python that reverses the order of the words in a given string.,Please reverse the order of the words.,"def reverse_words(string): 
    words = string.split(' ') 
    reverse = words[::-1] 
    return ' '.join(reverse)",Data Type,3819,"def reverse_words(string): 
    words = string.split(' ') 
    reverse = words[::-___] 
    return ' '.join(reverse)"
Create an algorithm to detect a palindrome string in Python.,"String str = ""madam"";","def isPalindrome(str):
  left, right = 0, len(str) - 1
  while right >= left:
    if not str[left] == str[right]:
      return False
    left += 1
    right -= 1
  return True",Data Type,3824,"def isPalindrome(str):
  left, right = ___, len(str) - ___
  while right >= left:
    if not str[left] == str[right]:
      return ___
    left += ___
    right -= ___
  return ___"
Implement a Python method to encrypt a given string.,"text = ""Hello, World!""","def encrypt(text): 
    result = """" 
    for i in range(len(text)): 
        char = text[i] 
        if (char.isupper()): 
            result += chr((ord(char) + 7)) 
        else: 
            result += chr((ord(char) + 3)) 
    return result 

text = ""Hello, World!""
print(encrypt(text))",Data Type,3850,"def encrypt(text): 
    result = """" 
    for i in range(len(text)): 
        char = text[i] 
        if (char.isupper()): 
            result += chr((ord(char) + ___)) 
        else: 
            result += chr((ord(char) + ___)) 
    return result 

text = ""Hello, World!""
print(encrypt(text))"
Construct a Python function that takes as input a string and returns the length of the longest word in the string.,"""This is an example string.""","def longest_word_length(input_string):
    longest_word_length = 0
    words = input_string.split()
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length",Data Type,3861,"def longest_word_length(input_string):
    longest_word_length = ___
    words = input_string.split()
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length"
Create a program in Python that reads a string from standard input and prints the frequency of each letter in the input.,"""Hello World!""","from collections import Counter

def frequency(string):
    count = Counter()
    for letter in string:
        count[letter] += 1
    return count

if __name__ == ""__main__"":
    input_string = input(""Enter the string: "")
    count = frequency(input_string)
    print(count)",Data Type,3864,"from collections import Counter

def frequency(string):
    count = Counter()
    for letter in string:
        count[letter] += ___
    return count

if __name__ == ""__main__"":
    input_string = input(""Enter the string: "")
    count = frequency(input_string)
    print(count)"
Create a program in Python to normalize a given input string.,"input_string = ""david_Xq3r5""","import re 

def normalize_string(input_string): 
  ## convert to lowercase 
  normalized_string = input_string.lower() 
  
  ## remove special characters 
  normalized_string = re.sub(""[^a-z0-9]"", """", normalized_string) 
  
  ## return the normalized string
  return normalized_string

normalized_string = normalize_string(input_string) 
print(normalized_string) # davidxq35",Data Type,3879,"import re 

def normalize_string(input_string): 
  ## convert to lowercase 
  normalized_string = input_string.lower() 
  
  ## remove special characters 
  normalized_string = re.sub(""[^a-z0-___]"", """", normalized_string) 
  
  ## return the normalized string
  return normalized_string

normalized_string = normalize_string(input_string) 
print(normalized_string) # davidxq35"
"Create a function in Python to apply a discount rate to a given price. This should accept two parameters, a float for the discount rate between 0 and 1 and the price. The function should return the discounted price.","discountRate = 0.9
price = 200","def applyDiscount(discountRate, price):
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # 180",Data Type,3880,"def applyDiscount(discountRate, price):
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # ___"
Create a Python function that takes a string as an argument and reverses it.,testing,"def reverse_string(str_input):
    reversed_string = ''
    index = len(str_input)
    while index > 0: 
        reversed_string += str_input[ index - 1 ]
        index = index - 1
    return reversed_string

print(reverse_string(""testing""))",Data Type,3900,"def reverse_string(str_input):
    reversed_string = ''
    index = len(str_input)
    while index > ___: 
        reversed_string += str_input[ index - ___ ]
        index = index - ___
    return reversed_string

print(reverse_string(""testing""))"
Create a Python script that prints the number of unique characters in a given string and their frequency.,Hello World,"inputString = ""Hello World"" 
freq = {}
  
for ch in inputString:
    if ch in freq:
        freq[ch] += 1
    else:
        freq[ch] = 1

for key, value in freq.items():
    print (key + "" has a frequency of "" + str(value))",Data Type,3901,"inputString = ""Hello World"" 
freq = {}
  
for ch in inputString:
    if ch in freq:
        freq[ch] += ___
    else:
        freq[ch] = ___

for key, value in freq.items():
    print (key + "" has a frequency of "" + ___)"
Create a function in Python which takes a string as an input and adds the number 1 to each character in the string.,"mystring = ""Hello""","def add_one_to_each_char(mystring):
    new_str = """"
    for c in mystring:
        new_str += chr(ord(c) + 1)
    return new_str",Data Type,3923,"def add_one_to_each_char(mystring):
    new_str = """"
    for c in mystring:
        new_str += chr(ord(c) + ___)
    return new_str"
Implement a program in Python that encodes a given string of text.,"encoding_string = ""Hello World""","def encode_string(encoding_string):
    encoded_string = """"
    for char in encoding_string : 
        encoded_string += str(ord(char)) + "" ""
    return encoded_string",Data Type,3930,"def encode_string(encoding_string):
    encoded_string = """"
    for char in encoding_string : 
        encoded_string += ___) + "" ""
    return encoded_string"
Generate a Python dictionary that contains the count of the characters in a given string.,"""Hello World""","def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",Data Type,3941,"def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += ___
        else:
            count_dict[char] = ___

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': ___, 'e': ___, 'l': ___, 'o': ___, ' ': ___, 'W': ___, 'r': ___, 'd': ___}"
Write a function in Python that takes a string as input and returns the length of the longest word.,"string = ""the quick brown fox jumps over the lazy dog""","def length_longest_word(s):
    longest_word = """"
    longest_len = 0
  
    words = s.split()
    for word in words:
        if len(word) > longest_len:
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)",Data Type,3955,"def length_longest_word(s):
    longest_word = """"
    longest_len = ___
  
    words = s.split()
    for word in words:
        if len(word) > longest_len:
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)"
Write a python program to check if a given string contains all alphabetic characters.,"String: ""Hello World!""","def is_alpha(word): 
    if word.isalpha(): 
        return True 
    else: 
        return False",Data Type,3968,"def is_alpha(word): 
    if word.isalpha(): 
        return ___ 
    else: 
        return ___"
Generate a Python dictionary that tracks the frequency of letters in a given string.,"test_string = ""This is a test string!""","frequency_dict = {}

for letter in test_string:
    if letter not in frequency_dict:
        frequency_dict[letter] = 0
    frequency_dict[letter] += 1",Data Type,3980,"frequency_dict = {}

for letter in test_string:
    if letter not in frequency_dict:
        frequency_dict[letter] = ___
    frequency_dict[letter] += ___"
Write a function in Python that finds all possible substrings of a string and prints them.,"String =  ""Hello World""","def printSubstrings(s): 
    n = len(s) 
      
    for i in range(n):
        for j in range(i+1, n+1):
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)",Data Type,3993,"def printSubstrings(s): 
    n = len(s) 
      
    for i in range(n):
        for j in range(i+___, n+___):
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)"
Create a Python program to edit a given string and insert a given word into the middle of the string.,"String = 'I am a programmer';
Word = 'software'","def insert_word(string, word):
  mid_index = len(string)//2
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))",Data Type,4001,"def insert_word(string, word):
  mid_index = len(string)//___
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))"
Create a python function that takes in a string and reverse any words that contain a certain character.,"String: ""Hello World!-Abc""
Character: ""-""","def string_reverse(string, character):
    new_string = []
    for word in string.split(' '):
        if character in word:
            new_string.append(word[::-1])
        else:
            new_string.append(word)
    return ' '.join(new_string)

string_reverse(""Hello World!-Abc"", ""-"") # Output: ""Hello dlroW!-cbA""",Data Type,4004,"def string_reverse(string, character):
    new_string = []
    for word in string.split(' '):
        if character in word:
            new_string.append(word[::-___])
        else:
            new_string.append(word)
    return ' '.join(new_string)

string_reverse(""Hello World!-Abc"", ""-"") # Output: ""Hello dlroW!-cbA"""
"Given a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds.",32400,"def to_time_string(duration):
    hours, remainder = divmod(duration, 3600)
    minutes, seconds = divmod(remainder, 60)
    return ""%02d:%02d:%02d"" % (hours, minutes, seconds)

print(to_time_string(32400))",Data Type,4010,"def to_time_string(duration):
    hours, remainder = divmod(duration, ___)
    minutes, seconds = divmod(remainder, ___)
    return ""%02d:%02d:%02d"" % (hours, minutes, seconds)

print(to_time_string(___))"
Create a Python function to classify a given string as either a palindrome or not.,"string=""kayak""","def is_palindrome(string):
    string_temp = string.lower()
    reverse_string = string_temp[::-1]
    if string_temp == reverse_string:
        print(""yes, this is a palindrome"")
    else:
        print(""no, this is not a palindrome"")

is_palindrome(string)",Data Type,4033,"def is_palindrome(string):
    string_temp = string.lower()
    reverse_string = string_temp[::-___]
    if string_temp == reverse_string:
        print(""yes, this is a palindrome"")
    else:
        print(""no, this is not a palindrome"")

is_palindrome(string)"
"Write a Python function that takes a string as input and returns true if the string starts with the letter ""a"".",String: awesome,"def starts_with_a(string):
    if string[0] == 'a':
        return True
    else:
        return False

result = starts_with_a('awesome')
print(result)",Data Type,4035,"def starts_with_a(string):
    if string[___] == 'a':
        return ___
    else:
        return ___

result = starts_with_a('awesome')
print(result)"
Create a method in Python which takes a string and an integer as arguments and returns an integer representing the number of times that character appears.,"s = ""hello world"", c = 'l'","def findCount(s, c):
    count = 0
    for char in s:
        if char == c:
            count += 1
    return count 

print(findCount(s, c))",Data Type,4061,"def findCount(s, c):
    count = ___
    for char in s:
        if char == c:
            count += ___
    return count 

print(findCount(s, c))"
Implement a program in Python that takes a string as an input and prints out the length of the longest word in the string.,"string = ""The quick brown fox jumps over the lazy dog""","def longest_word(string):
    words = string.split("" "")
    max_length = 0
    longest_word = """"
    for word in words:
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))",Data Type,4069,"def longest_word(string):
    words = string.split("" "")
    max_length = ___
    longest_word = """"
    for word in words:
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))"
Generate a Python function that checks to see if a given string is a palindrome.,Input: madam,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - 1, -1, -1): 
        reversed_str += str[i]

    if str == reversed_str: 
        return True
    else: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)",Data Type,4121,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - ___, -___, -___): 
        reversed_str += str[i]

    if str == reversed_str: 
        return ___
    else: 
        return ___

string = ""madam""
result = is_palindrome(string)
print(result)"
Generate a Python program to give an output as true if the given string contains at least two distinct characters,"""AbcdABC""","def containsTwoDistinctChars(string):
    distinctChars = set()
    for char in string:
        distinctChars.add(char)
    
    return len(distinctChars) >= 2

print(containsTwoDistinctChars(""AbcdABC""))",Data Type,4125,"def containsTwoDistinctChars(string):
    distinctChars = set()
    for char in string:
        distinctChars.add(char)
    
    return len(distinctChars) >= ___

print(containsTwoDistinctChars(""AbcdABC""))"
"Create a Python program that takes in a string and counts how many vowels are in it, regardless of case.",amazing,"def count_vowels(word):
  answer = 0
  for letter in word:
    if letter.lower() in 'aeiou':
      answer += 1
  return answer

print(count_vowels('amazing'))",Data Type,4139,"def count_vowels(word):
  answer = ___
  for letter in word:
    if letter.lower() in 'aeiou':
      answer += ___
  return answer

print(count_vowels('amazing'))"
Write a Python program that determines whether the given string is a palindrome.,"String: ""racecar""","def is_palindrome(string):
  if len(string) <= 1:
    return True
  else:
    letter_1 = string[0]
    letter_2 = string[-1]
    if letter_1 != letter_2:
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)",Data Type,4156,"def is_palindrome(string):
  if len(string) <= ___:
    return ___
  else:
    letter_1 = string[___]
    letter_2 = string[-___]
    if letter_1 != letter_2:
      return ___
    else:
      new_word = string[___:-___]
      return is_palindrome(new_word)"
Parse the following JSON string into a Python dictionary.,"{""name"":""John"",""age"":30,""city"":""New York""}","import json

data = '{""name"":""John"",""age"":30,""city"":""New York""}'

parsed_data = json.loads(data)
print(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}",Data Type,4159,"import json

data = '{""name"":""John"",""age"":___,""city"":""New York""}'

parsed_data = json.loads(data)
print(parsed_data) # {'name': 'John', 'age': ___, 'city': 'New York'}"
Create a Python function that takes a string as input and returns a dictionary that counts the frequency of every character.,hello,"def char_freq(s):
    freq = dict()
    for i in s:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

string = 'hello'
result = char_freq(string)

print(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}",Data Type,4162,"def char_freq(s):
    freq = dict()
    for i in s:
        if i in freq:
            freq[i] += ___
        else:
            freq[i] = ___
    return freq

string = 'hello'
result = char_freq(string)

print(result) # {'h': ___, 'e': ___, 'l': ___, 'o': ___}"
Generate a program in Python that counts the number of words in a string.,"String: ""This is a sentence""","def count_words(string):
    words = 0
    for x in string.split():
        words += 1
    return words",Data Type,4175,"def count_words(string):
    words = ___
    for x in string.split():
        words += ___
    return words"
Create a Python program to extract the first three characters of a string.,"string = ""programming""","result = string[:3]
print(result) #pro",Data Type,4178,"result = string[:___]
print(result) #pro"
Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?,"s1 = ""restful""
s2 = ""fluster""","def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True",Data Type,4189,"def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return ___
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(___, len(str1)): 
        if (list1[i] != list2[i]): 
            return ___
  
    return ___"
Write a Python program to sort the characters in a given string in reverse alphabetical order.,Hello,"def sortReverseString(string):
 char_list = list(string)
 char_list.sort(reverse=True)
 return ''.join(char_list)

# Usage:
string = ""Hello""
sortedString = sortReverseString(string)
print(sortedString) # Output: olleH",Data Type,4217,"def sortReverseString(string):
 char_list = list(string)
 char_list.sort(reverse=___)
 return ''.join(char_list)

# Usage:
string = ""Hello""
sortedString = sortReverseString(string)
print(sortedString) # Output: olleH"
Create a text parser in Python that converts a given string into an integer.,"""47""","def parse_int(string):
 return int(string)

result = parse_int(""47"")
print(result)

# Result: 47",Data Type,4226,"def parse_int(string):
 return ___

result = parse_int(""___"")
print(result)

# Result: ___"
Round an input float to two decimal places in Python.,8.374,"num = 8.374
rounded_num = round(num, 2)
print(rounded_num)",Data Type,4287,"num = ___.___
rounded_num = round(num, ___)
print(rounded_num)"
Write a Python function that takes a string as input and counts the number of occurrences of each character in that string.,String: 'python',"def count_characters(string):
    counts = {}
    for s in string:
        counts[s] = counts.get(s, 0) + 1
    return counts

result = count_characters('python')
print(result)",Data Type,4326,"def count_characters(string):
    counts = {}
    for s in string:
        counts[s] = counts.get(s, ___) + ___
    return counts

result = count_characters('python')
print(result)"
Take an input string and write a python program to determine if it is a palindrome.,racecar,"def isPalindrome(s):
 left, right = 0, len(s) - 1
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True",Data Type,4330,"def isPalindrome(s):
 left, right = ___, len(s) - ___
 while left < right:
 if s[left] != s[right]:
 return ___
 left += ___
 right -= ___
 return ___

s = ""racecar""
print(isPalindrome(s))  # ___"
Suggest a completion for the following python code to count the number of a given character in a string.,"def count_characters(s, c):","def count_characters(s, c):
 count = 0
 for ch in s:
  if ch == c:
   count += 1
 return count",Data Type,4338,"def count_characters(s, c):
 count = ___
 for ch in s:
  if ch == c:
   count += ___
 return count"
Write a python program that will generate a password containing numbers and letters from an entered string.,Hello,"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))",Data Type,4341,"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(___, len(word)):
      letters += word[i]
      numbers += ___

    password = letters + numbers
    return password

print(generate_password(""Hello""))"
Create a Python program to find out if a string contains any characters from another given string.,"String 1: Hello
String 2: eo","def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True
 return False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True",Data Type,4348,"def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return ___
 return ___

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: ___"
"Convert a Python list into a string with each item separated by a comma, with no additional characters or whitespace","my_list = [1, 2, 3]","','.join(str(item) for item in my_list)",Data Type,4355,"','.join(___ for item in my_list)"
Create a python function that takes a string as an argument and substitues each letter with its corresponding number in the alphabet.,Input String = “Data Science”,"def letterToNumber(input_string):
    result_string = """"
    for letter in input_string:
        result_string += str(ord(letter)-64)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)",Data Type,4374,"def letterToNumber(input_string):
    result_string = """"
    for letter in input_string:
        result_string += str(ord(letter)-___)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)"
Convert a given python data structure into a json string using json package,"data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}","import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": 30, ""location"": ""Greece""}'",Data Type,4376,"import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": ___,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": ___, ""location"": ""Greece""}'"
Create a Python program to count the occurrence of a specific word in a string.,The quick brown fox,"def count_occurences(string, word):
    count = 0
    words = string.split(' ')
    for w in words:
        if w == word:
            count += 1
    return count
 
string = 'The quick brown fox'
word = 'The'
 
occurrences = count_occurences(string, word)
print('""The"" occurs', occurrences , 'times in the string.')",Data Type,4384,"def count_occurences(string, word):
    count = ___
    words = string.split(' ')
    for w in words:
        if w == word:
            count += ___
    return count
 
string = 'The quick brown fox'
word = 'The'
 
occurrences = count_occurences(string, word)
print('""The"" occurs', occurrences , 'times in the string.')"
Design an algorithm in Python to detect an anagram in a string.,"Input string: ""eat tea""","def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return True
    return False",Data Type,4393,"def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + ___, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return ___
    return ___"
Create a program in Python to capitalize the first letter of a given string.,hello world,"def capitalize_first_letter(text):
  return text[0].upper() + text[1:]

print(capitalize_first_letter(""hello world"")) # Output: Hello world",Data Type,4396,"def capitalize_first_letter(text):
  return text[___].upper() + text[___:]

print(capitalize_first_letter(""hello world"")) # Output: Hello world"
Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer.,"string = ‘Hello’

int = 3","def repeat_string(s, n):
    return s*n

print(repeat_string('Hello', 3))
# Output: 'HelloHelloHello'",Data Type,4400,"def repeat_string(s, n):
    return s*n

print(repeat_string('Hello', ___))
# Output: 'HelloHelloHello'"
Create an API endpoint in Python that takes a text string as input and outputs a JSON response with the text reversed.,Hello world,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/reverse', methods=['POST'])
def reverse():
 data = request.get_json()
 text = data['text']
 reversed_text = text[::-1]

 return jsonify({'reversed_text': reversed_text})

if __name__ == '__main__':
 app.run()",Data Type,4402,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/reverse', methods=['POST'])
def reverse():
 data = request.get_json()
 text = data['text']
 reversed_text = text[::-___]

 return jsonify({'reversed_text': reversed_text})

if __name__ == '__main__':
 app.run()"
Develop a Python program that reads in a string and reverses the words in it maintaining their order.,This is a sample string,"def reverseWords(str): 
    words = str.split("" "") 
  
    newWords = [word[::-1] for word in words] 
  
    newString = "" "".join(newWords) 
  
    return newString 
      
print(reverseWords(""This is a sample string"")) 
# Result: sihT si a elpmas gnirts",Data Type,4410,"def reverseWords(str): 
    words = str.split("" "") 
  
    newWords = [word[::-___] for word in words] 
  
    newString = "" "".join(newWords) 
  
    return newString 
      
print(reverseWords(""This is a sample string"")) 
# Result: sihT si a elpmas gnirts"
"Write and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.","my_list = [""cat"", ""dog"", ""monkey"", ""kite""]","def filter_list(list):
    return [item for item in list if len(item) < 4 or 'k' not in item]

my_list = filter_list(my_list)
print(my_list)

# Output:
# ['cat', 'dog']",Data Type,4416,"def filter_list(list):
    return [item for item in list if len(item) < ___ or 'k' not in item]

my_list = filter_list(my_list)
print(my_list)

# Output:
# ['cat', 'dog']"
Write a Python script to generate a dictionary with counts of unique characters in a given string.,"String = ""Hello World!""","def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

string = ""Hello World!""
result = char_count(string)
print(result)

# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",Data Type,4417,"def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += ___
        else:
            char_dict[char] = ___
    return char_dict

string = ""Hello World!""
result = char_count(string)
print(result)

# Outputs: {'H': ___, 'e': ___, 'l': ___, 'o': ___, ' ': ___, 'W': ___, 'r': ___, 'd': ___, '!': ___}"
Calculate the number of possible permutations of a string using the following Python function.,"word = ""helloworld""","def factorial(string): 
   len_string = len(string) 
   permutations = 1
   for i in range(1, len_string + 1): 
      permutations *= i 
   return permutations 

result = factorial(word) 
print(result)",Data Type,4420,"def factorial(string): 
   len_string = len(string) 
   permutations = ___
   for i in range(___, len_string + ___): 
      permutations *= i 
   return permutations 

result = factorial(word) 
print(result)"
"Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.","s1 = 'Hello World'
s2 = 'World'","def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True
 
 return False",Data Type,4423,"def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return ___
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -___:
 return ___
 
 return ___"
Create a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.,'hello world',"def frequency(string): 
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq

print(frequency('hello world'))",Data Type,4452,"def frequency(string): 
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += ___
        else: 
            freq[i] = ___
    return freq

print(frequency('hello world'))"
Create a Python 3 function to calculate the length of a string.,"string = 'hello, world!'","def get_str_length(string):
  return len(string)

print(get_str_length(string)) # outputs 13",Data Type,4462,"def get_str_length(string):
  return len(string)

print(get_str_length(string)) # outputs ___"
Create a Python function that takes a string and rotates the characters in the string by a specified integer.,"""Hello"", 3","def rotateString(s, n):
    output = """"
    for char in s:
        output += chr(ord(char) + n)
    return output

result = rotateString(""Hello"", 3)
print(result)",Data Type,4466,"def rotateString(s, n):
    output = """"
    for char in s:
        output += chr(ord(char) + n)
    return output

result = rotateString(""Hello"", ___)
print(result)"
Generate a program in Python to count the number of times a substring appears in a string?,"str=""The quick brown fox jumps over the lazy dog."", substr=""the""","def countSubstrings(str, subStr):
    lengthSubStr = len(subStr)
    count = 0
   
    for i in range(len(str)):
        if str[i:i+lengthSubStr] == subStr:
            count += 1
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))",Data Type,4476,"def countSubstrings(str, subStr):
    lengthSubStr = len(subStr)
    count = ___
   
    for i in range(len(str)):
        if str[i:i+lengthSubStr] == subStr:
            count += ___
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))"
Modify the code to output a float in python instead of integer.,"def multiply(a, b): 
    return a * b","def multiply(a, b): 
    return float(a * b)",Data Type,4477,"def multiply(a, b): 
    return ___"
Create a Python class with a constructor and a `to_string` method that takes two integers and returns a formatted string.,The two integers are 7 and 5.,"class MyClass:
 def __init__(self, x, y):
 self.x = x
 self.y = y

def to_string(self):
 return f'The numbers are {self.x} and {self.y}.'

c = MyClass(7,5)
print(c.to_string())",Data Type,4517,"class MyClass:
 def __init__(self, x, y):
 self.x = x
 self.y = y

def to_string(self):
 return f'The numbers are {self.x} and {self.y}.'

c = MyClass(___,___)
print(c.to_string())"
Create a program to find the frequency of characters in a given string in Python.,"Example string: ""abbccccdddde""","def find_character_frequency(string):
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq
 
# example
string = ""abbccccdddde""
print(find_character_frequency(string))
# Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1}",Data Type,4563,"def find_character_frequency(string):
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += ___
        else: 
            freq[i] = ___
    return freq
 
# example
string = ""abbccccdddde""
print(find_character_frequency(string))
# Output: {'a': ___, 'b': ___, 'c': ___, 'd': ___, 'e': ___}"
Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string.,"Example binary string: ""1101011000""","def longestZeroSeq(inputStr):
    maxLength = 0 
   
    currentLength = 0
   
    for c in inputStr:
        if c == '0':
            currentLength += 1
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = 0
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength",Data Type,4567,"def longestZeroSeq(inputStr):
    maxLength = ___ 
   
    currentLength = ___
   
    for c in inputStr:
        if c == '___':
            currentLength += ___
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = ___
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength"
Design a program in Python to reverse the words of a given string.,"String s = ""This is an example sentence.""","def reverseWords(s): 
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-1] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = ""This is an example sentence.""
print(reverseWords(s)) 
# Output: sentence. example an is This",Data Type,4588,"def reverseWords(s): 
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-___] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = ""This is an example sentence.""
print(reverseWords(s)) 
# Output: sentence. example an is This"
Write a python function to format a string according to provided parameters.,"Input string: ""Hello World""
Upper-Case Letters: True
Lower-Case Letters: False","def formatString(s, upperCaseLetters, lowerCaseLetters):
    newStr = """"
    if upperCaseLetters: 
        newStr = s.upper()
    elif lowerCaseLetters: 
        newStr = s.lower()
    return newStr

print(formatString(""Hello World"", True, False)) # Output: ""HELLO WORLD""",Data Type,4596,"def formatString(s, upperCaseLetters, lowerCaseLetters):
    newStr = """"
    if upperCaseLetters: 
        newStr = s.upper()
    elif lowerCaseLetters: 
        newStr = s.lower()
    return newStr

print(formatString(""Hello World"", ___, ___)) # Output: ""HELLO WORLD"""
Design a solution in Python for determining the frequency of characters in a given string.,"""A quick brown fox jumps over the lazy dog.""","text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
for character in text: 
    if character in count: 
            count[character] += 1
    else: 
            count[character] = 1
  
for key in count: 
    print('%s appears %d times' % (key, count[key]))",Data Type,4607,"text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
for character in text: 
    if character in count: 
            count[character] += ___
    else: 
            count[character] = ___
  
for key in count: 
    print('%s appears %d times' % (key, count[key]))"
Create a python program to test if a given string is a palindrome,"str = ""level""","def is_palindrome(str):
    for i in range(len(str) // 2):
        if str[i] != str[-i - 1]:
            return False
    return True

# Test
result = is_palindrome(""level"")
print(result) # Output: True",Data Type,4614,"def is_palindrome(str):
    for i in range(len(str) // ___):
        if str[i] != str[-i - ___]:
            return ___
    return ___

# Test
result = is_palindrome(""level"")
print(result) # Output: ___"
Write a function that takes a string and prints out the string in reverse.,Python,"def reverse_string(s):
  return s[::-1]
  
print(reverse_string('Python'))  # nohtyP",Data Type,4623,"def reverse_string(s):
  return s[::-___]
  
print(reverse_string('Python'))  # nohtyP"
Create a program in Python to extract the first and last names from a string of full names.,Elizabeth W. Jennings,"names = input().split()

first_name = names[0]
last_name = names[-1]

print('First Name:', first_name)
print('Last Name:', last_name)",Data Type,4641,"names = input().split()

first_name = names[___]
last_name = names[-___]

print('First Name:', first_name)
print('Last Name:', last_name)"
Write a Python program that parses a single URL from a given string.,"""https://www.example.com/index.php?p=1&q=2""","import re

def parse_url(url):
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(1), match.group(2)

url, query = parse_url(""https://www.example.com/index.php?p=1&q=2"")
print(""URL:"", url)
print(""Query:"", query)",Data Type,4646,"import re

def parse_url(url):
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(___), match.group(___)

url, query = parse_url(""https://www.example.com/index.php?p=___&q=___"")
print(""URL:"", url)
print(""Query:"", query)"
Write a Python function to check if a given string is an anagram or not.,"str1 = ""listen"", str2 = ""silent""","def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2",Data Type,4658,"def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return ___ 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2"
Create a Python function for reversing a string.,"string = ""hello world!""","def reverse_string(string):
    string = string[::-1]
    return string

result = reverse_string(string)
print(result) # output -> ""!dlrow olleh""",Data Type,4662,"def reverse_string(string):
    string = string[::-___]
    return string

result = reverse_string(string)
print(result) # output -> ""!dlrow olleh"""
Write a Python program to format a given string with a coefficient of over 66%.,"s = ""Hello World""","def format_string(s):
 return s.upper() if (s.count("" "")+1) / len(s) > 0.66 else s

s = ""Hello World""
print(format_string(s))
# Output: HELLO WORLD",Data Type,4670,"def format_string(s):
 return s.upper() if (s.count("" "")+___) / len(s) > ___.___ else s

s = ""Hello World""
print(format_string(s))
# Output: HELLO WORLD"
Create a function in Python that takes an input string and returns whether it is a palindrome.,"txt = ""madam""","def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True",Data Type,4686,"def isPalindrome(txt):
    i = ___
    j = len(txt) - ___
    
    while i < j:
        if txt[i] != txt[j]:
            return ___
        i += ___
        j -= ___
    
    return ___

print(isPalindrome(txt)) // ___"
Write a Python program to format a specified string to limit the number of characters to 6.,String: Hello World,"def limit_chars(string):
    # Limit the number of character to 6
    limited_string = string[:6]
    return limited_string

string = ""Hello World""
result = limit_chars(string)
print(result)",Data Type,4691,"def limit_chars(string):
    # Limit the number of character to ___
    limited_string = string[:___]
    return limited_string

string = ""Hello World""
result = limit_chars(string)
print(result)"
"Given an input string, write a Python program to count the occurrence of each character in the string.","""Hello, World!""","def char_occurrences(a_string):
 char_count = {}
 for char in a_string:
 if char in char_count:
 char_count[char] += 1
 else:
 char_count[char] = 1
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",Data Type,4709,"def char_occurrences(a_string):
 char_count = {}
 for char in a_string:
 if char in char_count:
 char_count[char] += ___
 else:
 char_count[char] = ___
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': ___, 'e': ___, 'l': ___, 'o': ___, ', ': ___, 'W': ___, 'r': ___, 'd': ___, '!': ___}"
Write a Python program that takes a list of strings as an input and returns a dictionary containing the count of each string in the list.,"['a', 'b', 'c', 'a', 'b']","def count_strings(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += 1
        else:
            result[item] = 1
    return result

list_of_strings = ['a', 'b', 'c', 'a', 'b']
result = count_strings(list_of_strings)
print(result)",Data Type,4729,"def count_strings(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += ___
        else:
            result[item] = ___
    return result

list_of_strings = ['a', 'b', 'c', 'a', 'b']
result = count_strings(list_of_strings)
print(result)"
Write a Python program that counts the occurrence of each string in a dictionary.,"data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}","data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}

counts = {}
for key, value in data.items():
    if key in counts:
        counts[key] += 1
    else:
        counts[key] = 1

print(counts)",Data Type,4748,"data = {""foo"": ___, ""bar"": ___, ""baz"": ___, ""foo"": ___, ""bar"": ___}

counts = {}
for key, value in data.items():
    if key in counts:
        counts[key] += ___
    else:
        counts[key] = ___

print(counts)"
Write a function in Python that takes a string as input and converts it to title case.,"s = ""this is a test string""","def convertToTitleCase(s):
    return ' '.join(word[0].upper() + word[1:] for word in s.split())
 
print(convertToTitleCase(""this is a test string""))  # Output: This Is A Test String",Data Type,4754,"def convertToTitleCase(s):
    return ' '.join(word[___].upper() + word[___:] for word in s.split())
 
print(convertToTitleCase(""this is a test string""))  # Output: This Is A Test String"
Write a python code to extract the phone number and email address from a provided string,"txt =""John Smith-555-1234, john.s@example.com""","import re

txt =""John Smith-555-1234, john.s@example.com""

# Phone Number
phone = re.findall(r'\d{3}-\d{4}', txt)[0]
print(""Phone Number ="", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[0]
print(""Email Address ="", email)",Data Type,4759,"import re

txt =""John Smith-___-___, john.s@example.com""

# Phone Number
phone = re.findall(r'\d{___}-\d{___}', txt)[___]
print(""Phone Number ="", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[___]
print(""Email Address ="", email)"
Implement a Python function that will take two strings and return true if the first string contains the second.,"query = ""catering""
word = ""cat""","def check_contains(query, word): 
    if query.find(word) != -1:
        return True
    return False

result = check_contains(query, word)",Data Type,4770,"def check_contains(query, word): 
    if query.find(word) != -___:
        return ___
    return ___

result = check_contains(query, word)"
Produce a Python program which parses a given html string and extracts all text from it.,"HTML String: ""<p>This is a <strong>html</strong> string.</p>""","def get_text_from_html(html_str):
    soup = BeautifulSoup(html_str, 'html.parser')
    all_text = soup.find_all(text=True)
    return ' '.join(all_text)",Data Type,4777,"def get_text_from_html(html_str):
    soup = BeautifulSoup(html_str, 'html.parser')
    all_text = soup.find_all(text=___)
    return ' '.join(all_text)"
"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.","String1: 'abc'
String2: 'xyz'","def strings_swap(s1, s2): 
	new_s1 = s2[:2] + s1[2:] 
	new_s2 = s1[:2] + s2[2:] 
	return new_s1 + ' ' + new_s2 
	
strings_swap('abc', 'xyz') # 'xyc abz'",Data Type,4789,"def strings_swap(s1, s2): 
	new_s1 = s2[:___] + s1[___:] 
	new_s2 = s1[:___] + s2[___:] 
	return new_s1 + ' ' + new_s2 
	
strings_swap('abc', 'xyz') # 'xyc abz'"
Compose a Python script to find the longest word in a given string.,"Str = ""Hello World!""","def longest_word(str):
    words = str.split() 
    longest_word = """"
    max_length = 0
  
    for word in words: 
        if len(word) > max_length: 
            max_length = len(word) 
            longest_word = word 
  
    return longest_word
  
str = ""Hello World!""
print(longest_word(str))",Data Type,4808,"def longest_word(str):
    words = str.split() 
    longest_word = """"
    max_length = ___
  
    for word in words: 
        if len(word) > max_length: 
            max_length = len(word) 
            longest_word = word 
  
    return longest_word
  
str = ""Hello World!""
print(longest_word(str))"
Create an algorithm in Python that takes in a string and returns the number of words in the string.,"""Hello world""","def word_count(s):
	words = s.split()
	return len(words)

s = ""Hello world""

print(word_count(s)) # 2",Data Type,4827,"def word_count(s):
	words = s.split()
	return len(words)

s = ""Hello world""

print(word_count(s)) # ___"
Construct a python program which will receive a string and output the same string in reverse.,"string = ""Hello World!""","def reverse_string(string):
    return string[::-1]",Data Type,4860,"def reverse_string(string):
    return string[::-___]"
Build a Python program to sort a list of strings by the length of the string in descending order.,"[""cat"", ""dog"", ""elephant"", ""tiger""]","def sort_list(list):
    return sorted(list, key=lambda x: len(x), reverse=True)

list = [""cat"", ""dog"", ""elephant"", ""tiger""]
print(sort_list(list))

# Output: [""elephant"", ""tiger"", ""dog"", ""cat""]",Data Type,4898,"def sort_list(list):
    return sorted(list, key=lambda x: len(x), reverse=___)

list = [""cat"", ""dog"", ""elephant"", ""tiger""]
print(sort_list(list))

# Output: [""elephant"", ""tiger"", ""dog"", ""cat""]"
"Create a Python 3 program that takes as input a list of numbers (num1, num2,...,numN) and transforms it into the string “num1 + num2 + ... + numN = sum”, where sum is the sum of the numbers.","[5, 3, 2, 6, 8]","nums = [5, 3, 2, 6, 8]
sum = 0
out_string = """"

for num in nums:
 sum += num
 out_string += str(num)
 
 if num != nums[-1]:
  out_string += "" + ""
 else:
  out_string += "" = ""
  
out_string += str(sum)

print(out_string)",Data Type,4904,"nums = [___, ___, ___, ___, ___]
sum = ___
out_string = """"

for num in nums:
 sum += num
 out_string += ___
 
 if num != nums[-___]:
  out_string += "" + ""
 else:
  out_string += "" = ""
  
out_string += ___

print(out_string)"
Write a Python program to convert the input array of strings into a dictionary with keys as the string and the values as the index of the string in the array.,"['foo', 'bar', 'baz', 'qux']","my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], 
                  range(len(['foo', 'bar', 'baz', 'qux']))))

print(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3}",Data Type,4910,"my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], 
                  range(len(['foo', 'bar', 'baz', 'qux']))))

print(my_dict) # {'foo': ___, 'bar': ___, 'baz': ___, 'qux': ___}"
Optimize the following python code to search for a substring in a given string.,"String = “GeeksforGeeks”, Substring = “for”","def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True
    return False",Data Type,4939,"def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+___):
        j = ___
        while j < len(sub) and sub[j] == str[i+j]:
            j += ___
        if j == len(sub):
            return ___
    return ___"
Develop a function in Python that takes a string and an integer as input and returns the string with the length of the integer.,"'Hello World', 5","def truncateString(inputString, length):
    return inputString[:length]

print(truncateString('Hello World', 5))",Data Type,4947,"def truncateString(inputString, length):
    return inputString[:length]

print(truncateString('Hello World', ___))"
Write a function in Python to check whether a given string is in lower case or not.,String: ThisIsAnExample,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False
    return True",Data Type,4957,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return ___
    return ___"
Reverse a string via a Python function.,String: Hello,"def reverse_string(string):
    return string[::-1]

result = reverse_string(""Hello"")
print(result)",Data Type,4960,"def reverse_string(string):
    return string[::-___]

result = reverse_string(""Hello"")
print(result)"
Design a program using Python that capitalizes the first letter of every word in a given string.,"string = ""this is a sentence""","def capitalize(string):
    words = string.split() 
    capitalized_words = [word[0].upper() + word[1:] for word in words]
    return "" "".join(capitalized_words)

print(capitalize(""this is a sentence""))",Data Type,4968,"def capitalize(string):
    words = string.split() 
    capitalized_words = [word[___].upper() + word[___:] for word in words]
    return "" "".join(capitalized_words)

print(capitalize(""this is a sentence""))"
Generate code in Python to identify the type of an input number.,Number: 100,"if(type(100) == int):
    print(""It is an integer"")
elif(type(100) == float):
    print(""It is a float"")",Data Type,4975,"if(type(___) == int):
    print(""It is an integer"")
elif(type(___) == float):
    print(""It is a float"")"
Write a Python function to split a given string into equal parts in a loop.,"string = ""Hello World""","def split_string(string):
    result = []
    for i in range(0, len(string), int(len(string) / 2)):
        result.append(string[i: i + int(len(string) / 2)])
    return result",Data Type,4987,"def split_string(string):
    result = []
    for i in range(___, len(string), int(len(string) / ___)):
        result.append(string[i: i + int(len(string) / ___)])
    return result"
Implement a function in Python to determine the number of each character in a string.,"String: ""Hello, World!""","def count_characters(my_string):
    my_dict = dict()
    for character in my_string:
        if character in my_dict:
            my_dict[character] += 1
        else:
            my_dict[character] = 1
    return my_dict

String = ""Hello, World!""
print(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",Data Type,4989,"def count_characters(my_string):
    my_dict = dict()
    for character in my_string:
        if character in my_dict:
            my_dict[character] += ___
        else:
            my_dict[character] = ___
    return my_dict

String = ""Hello, World!""
print(count_characters(String)) # Output: {'H': ___, 'e': ___, 'l': ___, 'o': ___, ', ': ___, 'W': ___, 'r': ___, 'd': ___, '!': ___}"
Write a Python code snippet for encrypting a given string using secret key.,"secret_key = 'test'
string = 'hello world'","import base64

def encrypt(key, string):
    enc = []
    for i in range(len(string)):
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("""".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)",Data Type,5018,"import base64

def encrypt(key, string):
    enc = []
    for i in range(len(string)):
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % ___)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("""".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)"
Develop a method in Python that takes a string as an input and outputs the number of vowels in the string.,"string = ""Hello World""","def vowel_count(string):
  count = 0
  vowels = 'aeiou'
  for char in string.lower():
    if char in vowels:
      count += 1
  
  return count

print(vowel_count(""Hello World""))",Data Type,5035,"def vowel_count(string):
  count = ___
  vowels = 'aeiou'
  for char in string.lower():
    if char in vowels:
      count += ___
  
  return count

print(vowel_count(""Hello World""))"
Write a python code to extract the year from a string.,"string = ""This movie was released in 1980""","import re

string = ""This movie was released in 1980""

# search for substring of 4 digits
result = re.search(r'\d{4}', string)

# print the year
if result:
    print(result.group())",Data Type,5040,"import re

string = ""This movie was released in ___""

# search for substring of ___ digits
result = re.search(r'\d{___}', string)

# print the year
if result:
    print(result.group())"
"In Python, create a function to find the difference in number of a's and b's in a string.",abcdba,"def countDifference(s): 
   a_count = 0
   b_count = 0
   for i in range(len(s)):  
       if (s[i] == 'a'): 
           a_count = a_count + 1
       elif (s[i] == 'b'): 
           b_count = b_count + 1
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))",Data Type,5060,"def countDifference(s): 
   a_count = ___
   b_count = ___
   for i in range(len(s)):  
       if (s[i] == 'a'): 
           a_count = a_count + ___
       elif (s[i] == 'b'): 
           b_count = b_count + ___
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))"
Write a Python program to convert ratings in a list of strings to a float.,"['4.5', '3.0', '2.5', '4.0']","def str_to_float(ratings):
    return [float(x) for x in ratings]",Data Type,5083,"def str_to_float(ratings):
    return [___ for x in ratings]"
Write a function in Python to select the 3rd character from each string in the given list.,"['IronMan', 'Hulk', 'Thor', 'Captain America']","def third_char(lst):
 third_chars = """"
 for word in lst:
 third_chars += word[2]
 return third_chars

third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])",Data Type,5088,"def third_char(lst):
 third_chars = """"
 for word in lst:
 third_chars += word[___]
 return third_chars

third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])"
"Create a function in Python to convert a hexadecimal string (e.g. ""0xBA"") to a binary string (e.g. ""10111010"").","""0xA2""","def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010""",Data Type,5095,"def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, ___)
    # convert int to binary string
    bin_str = bin(num)[___:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""___"""
"Implement a function in Python to extract all the words from the given string with their keyboard shifted character. For example, a letter ""a"" should be replaced by ""b"".","String: ""hello world""","def shift_words(s):
    shifted_s = """"
    for c in s:
        if c.isalpha():
            shifted_s += chr(ord(c)+1)
        else:
            shifted_s += c
    return shifted_s

print(shift_words(""hello world""))
# Output: ifmmp xpsme",Data Type,5113,"def shift_words(s):
    shifted_s = """"
    for c in s:
        if c.isalpha():
            shifted_s += chr(ord(c)+___)
        else:
            shifted_s += c
    return shifted_s

print(shift_words(""hello world""))
# Output: ifmmp xpsme"
Convert the following array of Python objects into a JSON string.,"[{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]","import json

data = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]

json_str = json.dumps(data)
print(json_str)",Data Type,5137,"import json

data = [{'name': 'John', 'age': '___'}, {'name': 'Bob', 'age': '___'}]

json_str = json.dumps(data)
print(json_str)"
Create a Python program that takes a string as input and returns the longest word in it.,"""This is an example sentence.""","def find_longest_word(sentence):
    words = sentence.split()
    longest_word = words[0]
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = ""This is an example sentence.""
longest_word = find_longest_word(sentence)
print(longest_word)",Data Type,5146,"def find_longest_word(sentence):
    words = sentence.split()
    longest_word = words[___]
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = ""This is an example sentence.""
longest_word = find_longest_word(sentence)
print(longest_word)"
Create a program in Python that uses a machine learning approach to classify a type of data.,"dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]","import numpy as np
from sklearn.svm import SVC

# Intialize dataset and labels
dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]

# Fit the model
clf = SVC(gamma='auto')
clf.fit(dataset, labels)

# Make predictions 
x = [2, 3, 4]
prediction = clf.predict([x])
print(""The prediction is"", prediction[0])",Data Type,5188,"import numpy as np
from sklearn.svm import SVC

# Intialize dataset and labels
dataset = [[___,___,___], [___,___,___], [___,___,___]]
labels = [""a"", ""b"", ""c""]

# Fit the model
clf = SVC(gamma='auto')
clf.fit(dataset, labels)

# Make predictions 
x = [___, ___, ___]
prediction = clf.predict([x])
print(""The prediction is"", prediction[___])"
Find all possible substrings in a given string.,"my_string = ""Python""","def find_substrings(string):
    substrings = []
    length = len(string) 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            substrings.append(string[i: j]) 
    return substrings

substrings = find_substrings(my_string)
print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']",Data Type,5207,"def find_substrings(string):
    substrings = []
    length = len(string) 
    for i in range(length): 
        for j in range(i + ___, length + ___): 
            substrings.append(string[i: j]) 
    return substrings

substrings = find_substrings(my_string)
print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']"
Design an algorithm in Python to count the number of occurrences of each character in a given string.,Hello World,"def count_chars(string):
 chars = {}
 
 for c in string:
 if c not in chars:
 chars[c] = 0
 chars[c] += 1
 
 return chars
 
str = ""Hello World""
print(count_chars(str))
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",Data Type,5211,"def count_chars(string):
 chars = {}
 
 for c in string:
 if c not in chars:
 chars[c] = ___
 chars[c] += ___
 
 return chars
 
str = ""Hello World""
print(count_chars(str))
# {'H': ___, 'e': ___, 'l': ___, 'o': ___, ' ': ___, 'W': ___, 'r': ___, 'd': ___}"
Write a function in Python which takes one string as input and checks if the string starts with a vowel.,"String ""abc""","def start_vowel(input_string):
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    if input_string[0] in vowel_list: 
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")",Data Type,5232,"def start_vowel(input_string):
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    if input_string[___] in vowel_list: 
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")"
Write a Python program to insert a given string at the beginning of all items in a list.,"List: ['Red', 'Green', 'Black']
String: 'White'","def add_string_beginning(list_string, add_string):
    new_list = [add_string + str(item) for item in list(list_string)]
    return  new_list

list_string = ['Red', 'Green', 'Black']
add_string = 'White'

print(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']",Data Type,5250,"def add_string_beginning(list_string, add_string):
    new_list = [add_string + ___ for item in list(list_string)]
    return  new_list

list_string = ['Red', 'Green', 'Black']
add_string = 'White'

print(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']"
Write a Python program to remove the characters which have odd index values of a given string.,Hello World,"def remove_odd_index_characters(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result

print(remove_odd_index_characters(""Hello World""))",Data Type,5287,"def remove_odd_index_characters(string):
    result = """"
    for i in range(len(string)):
        if i % ___ == ___:
            result += string[i]
    return result

print(remove_odd_index_characters(""Hello World""))"
Generate a reverse string of each word present in the list.,"[""Python"", ""Java"", ""C++""]","def reverseStringOfList(list):
    revList = []
    for string in list:
        revList.append(string[::-1])
    return revList

result = reverseStringOfList([""Python"", ""Java"", ""C++""])
print(result)",Data Type,5321,"def reverseStringOfList(list):
    revList = []
    for string in list:
        revList.append(string[::-___])
    return revList

result = reverseStringOfList([""Python"", ""Java"", ""C++""])
print(result)"
create a function in Python that takes an array of integers and returns a string of the array in reverse order.,"[1, 3, 5, 7]","def reverse_list(arr):
    rev_arr = []
    for i in range(len(arr)-1,-1,-1):
        rev_arr.append(arr[i])
    return ''.join(map(str,rev_arr))

arr = [1, 3, 5, 7]
output_string = reverse_list(arr) 
print(output_string)",Data Type,5331,"def reverse_list(arr):
    rev_arr = []
    for i in range(len(arr)-___,-___,-___):
        rev_arr.append(arr[i])
    return ''.join(map(str,rev_arr))

arr = [___, ___, ___, ___]
output_string = reverse_list(arr) 
print(output_string)"
"Write a Python function that takes a string, checks if it is a palindrome and returns true or false.","""level""","def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True
    else:
        return False 

print(is_palindrome(""level""))",Data Type,5356,"def is_palindrome(string):
    rev_string = string[::-___]
    if string == rev_string:
        return ___
    else:
        return ___ 

print(is_palindrome(""level""))"
Generate a valid python program to calculate the frequency of occurrence of a character in a given string.,"""Hello World!""","def char_frequency(string):
    frequencies = {}
    for char in string:
        if char in frequencies:
            frequencies[char] += 1
        else:
            frequencies[char] = 1
    return frequencies

freq = char_frequency(""Hello World!"")
print(freq)",Data Type,5362,"def char_frequency(string):
    frequencies = {}
    for char in string:
        if char in frequencies:
            frequencies[char] += ___
        else:
            frequencies[char] = ___
    return frequencies

freq = char_frequency(""Hello World!"")
print(freq)"
Write a Python program to remove the nth index character from a nonempty string.,"text = ""Python""
n = 0","def remove_nth_index(text, n):
    return text[:n] + text[n + 1:]",Data Type,5369,"def remove_nth_index(text, n):
    return text[:n] + text[n + ___:]"
Write a python script which reformats the json string below,"data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'","import json

def reformat_json(data):
    data = json.loads(data)
    return json.dumps(data, indent=4)

data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'
updated_data = reformat_json(data)

print(updated_data)
# {""name"": ""Jason"",
#  ""age"": 42,
#  ""favorite_food"": ""Lasagna""}",Data Type,5372,"import json

def reformat_json(data):
    data = json.loads(data)
    return json.dumps(data, indent=___)

data = '{""name"":""Jason"",""age"":___,""favorite_food"":""Lasagna""}'
updated_data = reformat_json(data)

print(updated_data)
# {""name"": ""Jason"",
#  ""age"": ___,
#  ""favorite_food"": ""Lasagna""}"
Create a function in Python that takes two strings as arguments and returns the first string repeated as many times as specified by the second argument.,Abstract,"def repeat_string (string, repeat):
    """"""Return the supplied string repeated as many times as specified.""""""
    
    repeated_string = string * repeat
    
    return repeated_string
    
print(repeat_string(""Abstract"", 3)) # Output: AbstractAbstractAbstract",Data Type,5424,"def repeat_string (string, repeat):
    """"""Return the supplied string repeated as many times as specified.""""""
    
    repeated_string = string * repeat
    
    return repeated_string
    
print(repeat_string(""Abstract"", ___)) # Output: AbstractAbstractAbstract"
Create a Python script to convert an input JSON string into a Python dictionary.,"{""name"": ""John"", ""age"": 30, ""country"": ""USA""}","import json

input_string = '{""name"": ""John"", ""age"": 30, ""country"": ""USA""}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}",Data Type,5443,"import json

input_string = '{""name"": ""John"", ""age"": ___, ""country"": ""USA""}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': ___, 'country': 'USA'}"
Generate a string of random characters in Python. The length of the string should be determined by a parameter.,length = 20,"import string 
import random
 
def generate_random_string(length):
 return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
 
length = 20
print(generate_random_string(length))",Data Type,5454,"import string 
import random
 
def generate_random_string(length):
 return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
 
length = ___
print(generate_random_string(length))"
How would you parse the following JSON string in Python?,"{
    ""name"": ""John Doe"", 
    ""age"": 34, 
    ""email"": ""john@example.com""
}","import json

json_string = '{""name"": ""John Doe"", ""age"": 34, ""email"": ""john@example.com""}'
data = json.loads(json_string)

name = data['name']
age = data['age']
email = data['email']",Data Type,5455,"import json

json_string = '{""name"": ""John Doe"", ""age"": ___, ""email"": ""john@example.com""}'
data = json.loads(json_string)

name = data['name']
age = data['age']
email = data['email']"
Generate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated.,"[""Hello"", ""World"", ""This"", ""Is"", ""A"", ""Test""]","def first_letter_concat(l):
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    for s in l:
        result += s[0]
    return result",Data Type,5498,"def first_letter_concat(l):
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    for s in l:
        result += s[___]
    return result"
Create a python script to identify if a given string is a valid IPv4 address or not.,String: 192.168.25.688,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit():
            return False
        if int(part) < 0 or int(part) > 255:
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False",Data Type,5504,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != ___:
        return ___
    for part in parts:
        if not part.isdigit():
            return ___
        if int(part) < ___ or int(part) > ___:
            return ___
    return ___

print(is_valid_ipv4('___.___.___.___'))

Output: ___"
Cut at current position in a string by 1 letter in Python.,"mystring = ""This is my string""",mystring = mystring[:-1],Data Type,5506,mystring = mystring[:-___]
Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.,A quick brown fox jumps over the lazy dog,"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)",Data Type,5521,"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += ___
 else:
 words_dict[word] = ___
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)"
Implement a function in Python to take a string of comma separated numbers and return the average of the numbers.,"""3, 4, 5, 6, 7""","def calculate_average(nums):
 nums_list = nums.split("","")
 total = 0
 for num in nums_list:
 total += float(num)
 return total / len(nums_list)
 
# test code
print(calculate_average(""3, 4, 5, 6, 7"")) # should print 5.0",Data Type,5525,"def calculate_average(nums):
 nums_list = nums.split("","")
 total = ___
 for num in nums_list:
 total += ___
 return total / len(nums_list)
 
# test code
print(calculate_average(""___, ___, ___, ___, ___"")) # should print ___.___"
Code a Python program to calculate the permutation of a given string.,"String = ""ABC""","def permutations(string):
 if len(string) == 0:
  return []

 if len(string) == 1:
  return [string]

 perm_list = []
 for c in string:
  for perm in permutations(string.replace(c, '')):
   perm_list.append(c + perm)
 return perm_list

string = ""ABC""
print(permutations(string))",Data Type,5533,"def permutations(string):
 if len(string) == ___:
  return []

 if len(string) == ___:
  return [string]

 perm_list = []
 for c in string:
  for perm in permutations(string.replace(c, '')):
   perm_list.append(c + perm)
 return perm_list

string = ""ABC""
print(permutations(string))"
Design an algorithm in Python for finding the longest string in an input.,"['cat', 'dog', 'elephant']","def longest_string(strings):
    longest_len = 0
    longest_str = ''
    for s in strings:
        str_len = len(s)
        if str_len > longest_len:
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)",Data Type,5554,"def longest_string(strings):
    longest_len = ___
    longest_str = ''
    for s in strings:
        str_len = len(s)
        if str_len > longest_len:
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)"
Generate a programming code with Python to count the frequency of each character in a given string.,hello,"def count_frequency(text):
  char_frequency = {}
  for i in text:
    if i in char_frequency:
      char_frequency[i] += 1
    else:
      char_frequency[i] = 1
  return char_frequency

str1 = 'hello'
res = count_frequency(str1) 

print (""Per character frequency is : \n"" +  str(res))",Data Type,5561,"def count_frequency(text):
  char_frequency = {}
  for i in text:
    if i in char_frequency:
      char_frequency[i] += ___
    else:
      char_frequency[i] = ___
  return char_frequency

str1 = 'hello'
res = count_frequency(str1) 

print (""Per character frequency is : \n"" +  ___)"
Create a Python script to evaluate an expression given as a string.,"Expression string: ""2 * (3 + 1)""","# input expression as a string
expr = ""2 * (3 + 1)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)",Data Type,5568,"# input expression as a string
expr = ""___ * (___ + ___)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)"
"Write a Python program to clean a given string. The given string should be stripped of special characters, converted to lowercase and only words with more than three characters should be returned.","This is , MY string!?","s= ""This is, MY string!?""
 
output=""""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print(""Cleaned String: ""+output)",Data Type,5571,"s= ""This is, MY string!?""
 
output=""""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>___)
 
print(""Cleaned String: ""+output)"
Create a Python program to split a string in the match of a regular expression and return a list of the split strings.,"string = ""102030-abc-5060""","import re

string = ""102030-abc-5060"" 
pattern = r'-\w+-' 
result = re.split(pattern, string)
print(result)

# Output -> ['102030', '5060']",Data Type,5600,"import re

string = ""___-abc-___"" 
pattern = r'-\w+-' 
result = re.split(pattern, string)
print(result)

# Output -> ['___', '___']"
Make a program to search for a given string in a list of strings.,"search_string = 'python'
list_of_strings = ['java', 'javascript', 'python', 'ruby']","def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return True
    return False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)",Data Type,5613,"def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return ___
    return ___

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)"
Create a Python program for splitting a given string by every nth character.,"String = ""Hello World""
n = 3","#Function for splitting a given string by every nth character
def splitStringByN(string, n): 
    res = [string[i:i+n] for i in range(0, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = 3
splitString = splitStringByN(string, n)
print(splitString)",Data Type,5615,"#Function for splitting a given string by every nth character
def splitStringByN(string, n): 
    res = [string[i:i+n] for i in range(___, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = ___
splitString = splitStringByN(string, n)
print(splitString)"
"Use Python to check whether a given string is a palindrome (e.g. ""abccba"" is a palindrome).",abcba,"def isPalindrome(string):
 if string == string[::-1]: # Check if string is the same backwards
return True
 else:
 return False

isPalindrome('abcba') # Output: True",Data Type,5670,"def isPalindrome(string):
 if string == string[::-___]: # Check if string is the same backwards
return ___
 else:
 return ___

isPalindrome('abcba') # Output: ___"
Create a function to replace substring 'old' with 'new' in the given string.,Python is very old,"def replace_substring(string, old, new):
  new_string = """"
  l = len(old)
  for i in range(len(string)-l+1):
    if string[i:i+l] == old:
      new_string += new
    else:
      new_string += string[i]
  return new_string

print(replace_substring('Python is very old', 'old', 'new'))

# Output: Python is very new",Data Type,5672,"def replace_substring(string, old, new):
  new_string = """"
  l = len(old)
  for i in range(len(string)-l+___):
    if string[i:i+l] == old:
      new_string += new
    else:
      new_string += string[i]
  return new_string

print(replace_substring('Python is very old', 'old', 'new'))

# Output: Python is very new"
"Given a dictionary and a string, write a Python program to compute the number of times each character appears in the string.","dict = {'a': 0, 'b': 0, 'c': 0}
str = 'abacab'","def freq_char_dict(dict, str): 
    for char in str: 
        dict[char] += 1
    return dict
  
dict = {'a': 0, 'b': 0, 'c': 0} 
str = 'abacab'
print(freq_char_dict(dict, str))",Data Type,5677,"def freq_char_dict(dict, str): 
    for char in str: 
        dict[char] += ___
    return dict
  
dict = {'a': ___, 'b': ___, 'c': ___} 
str = 'abacab'
print(freq_char_dict(dict, str))"
Write a Python function to check if a given substring is contained in a string.,"String = ""This is an example""
SubString = ""ex""","def check_substring(String, SubString):
    if SubString in String : 
        return True
    else: 
        return False",Data Type,5686,"def check_substring(String, SubString):
    if SubString in String : 
        return ___
    else: 
        return ___"
Generate a Python program which takes in a string and returns each of its characters in reverse order.,Hello,"def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - 1, -1 , -1):
        reversed_string += string[i]
    return reversed_string

result = reverse_string('Hello')
print(result)",Data Type,5689,"def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - ___, -___ , -___):
        reversed_string += string[i]
    return reversed_string

result = reverse_string('Hello')
print(result)"
Develop a Python function to check if a given string contains a palindrome.,"""moon""","def is_palindrome(s):
  return s == s[::-1]

print(is_palindrome(""moon""))",Data Type,5708,"def is_palindrome(s):
  return s == s[::-___]

print(is_palindrome(""moon""))"
Create a Python script to transform every item from a list into a string.,"[1, 2, 3]","# Transform each item to a string 
list_ = [1, 2, 3]

# Transform the list
string_list = [str(item) for item in list_]

# Print the transformed list
print(string_list)

# Output
['1', '2', '3']",Data Type,5721,"# Transform each item to a string 
list_ = [___, ___, ___]

# Transform the list
string_list = [___ for item in list_]

# Print the transformed list
print(string_list)

# Output
['___', '___', '___']"
Construct a function in Python to reverse the order of the words in a given string.,hello world,"def reverse_words(str):
    words = str.split()
    reversed_words = words[::-1]
    reversed_str = ' '.join(reversed_words)
    return reversed_str

result = reverse_words('hello world')
print(result)",Data Type,5726,"def reverse_words(str):
    words = str.split()
    reversed_words = words[::-___]
    reversed_str = ' '.join(reversed_words)
    return reversed_str

result = reverse_words('hello world')
print(result)"
Create a function in Python that takes in a string and returns the characters in reverse order.,Hello,"def reverse_string(s): 
    return s[::-1]

result = reverse_string(""Hello"") 
print(result)",Data Type,5729,"def reverse_string(s): 
    return s[::-___]

result = reverse_string(""Hello"") 
print(result)"
"Given a string, write a Python program to count the number of words in it.","""This is an example string.""","def count_words(sentence):
    words = sentence.split(' ')
    count = 0
    for word in words:
        if word != '':
            count+=1
    return count

sentence = ""This is an example string.""
print(count_words(sentence))",Data Type,5738,"def count_words(sentence):
    words = sentence.split(' ')
    count = ___
    for word in words:
        if word != '':
            count+=___
    return count

sentence = ""This is an example string.""
print(count_words(sentence))"
Create a Python program to find the shortest string in a given list of strings.,"[‘Geeks’, ‘for’, ‘Geek’, ‘a’, ‘Geekeee’]","def shortest_string(strings):
    shortest_string = strings[0]
   
    for string in strings:
        if len(string) < len(shortest_string):
            shortest_string = string
    
    return shortest_string",Data Type,5741,"def shortest_string(strings):
    shortest_string = strings[___]
   
    for string in strings:
        if len(string) < len(shortest_string):
            shortest_string = string
    
    return shortest_string"
Generate a Python program that accepts an integer as an input and then outputs a string composed of stars,5,"# Get the number from the user
num = int(input(""Enter a number: ""))

# Generate a string of stars
star_string = '*' * num

print(star_string)",Data Type,5765,"# Get the number from the user
num = ___)

# Generate a string of stars
star_string = '*' * num

print(star_string)"
"Generate a Python function to reverse the order of each word in a string, leaving the absolute order of each word unchanged.","hello, world.","def reverser(string):
    reversed_string = []
    words = string.split()
    for word in words:
        reversed_string.append(word[::-1])
    return "" "".join(reversed_string)",Data Type,5838,"def reverser(string):
    reversed_string = []
    words = string.split()
    for word in words:
        reversed_string.append(word[::-___])
    return "" "".join(reversed_string)"
Develop a program in Python for counting the occurrences of a given character in a string.,"String: abcdefg
Character: a","def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))",Data Type,5846,"def countOccurences(str, char):
    count = ___
    for ch in str:
        if ch == char:
            count += ___
    return count

print(countOccurences('abcdefg', 'a'))"
Optimize the following Python code for counting the number of vowels in a string.,"def count_vowels(str):
 count = 0
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 for i in str:
  if i in vowels:
   count += 1
 return count","def count_vowels(str):
 count = 0
 vowels = set(""aeiou"")
 for i in str:
  if i in vowels:
   count += 1
 return count",Data Type,5850,"def count_vowels(str):
 count = ___
 vowels = set(""aeiou"")
 for i in str:
  if i in vowels:
   count += ___
 return count"
"Write a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.","text = ""racecar""","def is_palindrome(text):
    return text == text[::-1]",Data Type,5895,"def is_palindrome(text):
    return text == text[::-___]"
Write a Python code to encode a given string using the Caesar cipher.,"string = ""Hello World""","def caesar_encrypt(string, shift_amount):
 encrypted_string = """"
 for i in range(len(string)):
  char = string[i]
  x = ord(char) + shift_amount
  encrypted_string += chr(x)
 
 return encrypted_string

encoded_string = caesar_encrypt(string, 3)
print(encoded_string) // Output: Khoor Zruog",Data Type,5906,"def caesar_encrypt(string, shift_amount):
 encrypted_string = """"
 for i in range(len(string)):
  char = string[i]
  x = ord(char) + shift_amount
  encrypted_string += chr(x)
 
 return encrypted_string

encoded_string = caesar_encrypt(string, ___)
print(encoded_string) // Output: Khoor Zruog"
Create a Python program to convert a string to its equivalent unicode value.,"""hello""","import unicodedata
 
#example string
s = ""hello""
 
#printing string to unicode
print(""The unicode value of '"" + s + ""' is: "" + str(ord(unicodedata.normalize('NFKD', s)[0])))
 
#output
#The unicode value of 'hello' is: 104",Data Type,5912,"import unicodedata
 
#example string
s = ""hello""
 
#printing string to unicode
print(""The unicode value of '"" + s + ""' is: "" + str(ord(unicodedata.normalize('NFKD', s)[___])))
 
#output
#The unicode value of 'hello' is: ___"
Write a Python program to translate a string into pig latin.,Hello,"def toPigLatin(word):
    vowels = [""a"",""e"",""i"",""o"",""u""]
    first_letter = word[0]
    if first_letter in vowels:
        modified_word = word + ""way""
    else:
        modified_word = word[1:] + first_letter + ""ay""
    return modified_word

result = toPigLatin(""Hello"")
print(result)",Data Type,5931,"def toPigLatin(word):
    vowels = [""a"",""e"",""i"",""o"",""u""]
    first_letter = word[___]
    if first_letter in vowels:
        modified_word = word + ""way""
    else:
        modified_word = word[___:] + first_letter + ""ay""
    return modified_word

result = toPigLatin(""Hello"")
print(result)"
What is the size of the memory required by a given string in Python?,"The given string is ""Hello World!""","The size of the memory required for the string ""Hello World!"" is 12 bytes.",Data Type,5938,"The size of the memory required for the string ""Hello World!"" is ___ bytes."
Generate a Python program that takes one string and returns the most frequently used character from the string.,"string = ""test string""","def most_frequent_character(string): 
    counts = dict() 
    max = -1
    character = '' 

    for char in string: 
        if char in counts: 
            counts[char] += 1
        else: 
            counts[char] = 1

        if counts[char] > max: 
            max = counts[char] 
            character = char 
    return character",Data Type,5951,"def most_frequent_character(string): 
    counts = dict() 
    max = -___
    character = '' 

    for char in string: 
        if char in counts: 
            counts[char] += ___
        else: 
            counts[char] = ___

        if counts[char] > max: 
            max = counts[char] 
            character = char 
    return character"
Create a python 3 function to encode the input string.,Hello World!,"def encode_string(s):
    # Function to encode a string
    encoded_string = ''
    for c in s:
        encoded_string += hex(ord(c)).upper()[2:]
    return encoded_string",Data Type,5953,"def encode_string(s):
    # Function to encode a string
    encoded_string = ''
    for c in s:
        encoded_string += hex(ord(c)).upper()[___:]
    return encoded_string"
Write a Python program to evaluate a mathematical expression given as string.,"""2 + 3 * 5""","expression = ""2 + 3 * 5""
result = eval(expression)
print(result)",Data Type,5957,"expression = ""___ + ___ * ___""
result = eval(expression)
print(result)"
Create a Python program to convert a given date string to a datetime object and return the week number.,"""2020-05-18""","import datetime
def get_week_number(date_string):
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number",Data Type,5963,"import datetime
def get_week_number(date_string):
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[___]  # isocalendar() is used to get the ISO week number"
Compress the following string using the gzip library in Python.,"String: ""This is a sample string to compress.""","import gzip

string = ""This is a sample string to compress.""
compressed_string = gzip.compress(string.encode('utf-8'))
print(compressed_string)",Data Type,5964,"import gzip

string = ""This is a sample string to compress.""
compressed_string = gzip.compress(string.encode('utf-___'))
print(compressed_string)"
Write a Python program to format a given string with a desired length.,"string = ""GPT-3""
length = 10","def format_string(string, length):
  format_string = string.ljust(length)
  return format_string

string = ""GPT-3""
length = 10
result = format_string(string, length)
print(result)  # -> GPT-3    (9 spaces added after GPT-3)",Data Type,5969,"def format_string(string, length):
  format_string = string.ljust(length)
  return format_string

string = ""GPT-___""
length = ___
result = format_string(string, length)
print(result)  # -> GPT-___    (___ spaces added after GPT-___)"
Create a Python program to identify words of length k in a given string.,"String: ""This is a program to identify words of length 3""

Length: 3","def find_words_of_length_k(sentence, k):
    words = sentence.split(' ')
    words_of_length_k = []
    for word in words:
        if len(word) == k:
            words_of_length_k.append(word)
    return words_of_length_k

sentence = ""This is a program to identify words of length 3""
k = 3
print(find_words_of_length_k(sentence, k))",Data Type,5987,"def find_words_of_length_k(sentence, k):
    words = sentence.split(' ')
    words_of_length_k = []
    for word in words:
        if len(word) == k:
            words_of_length_k.append(word)
    return words_of_length_k

sentence = ""This is a program to identify words of length ___""
k = ___
print(find_words_of_length_k(sentence, k))"
Write a function in Python for encrypting a given string with a given key.,"Key: ""mykey123""
String: ""My secret message""","import base64
from Crypto.Cipher import AES

def encrypt(key, message):
 cipher = AES.new(key.encode(), AES.MODE_ECB)
 padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())
 encrypted = cipher.encrypt(padded_msg)
 encoded = base64.b64encode(encrypted)
 return encoded.decode()

encrypt('mykey123', 'My secret message')",Data Type,5997,"import base64
from Crypto.Cipher import AES

def encrypt(key, message):
 cipher = AES.new(key.encode(), AES.MODE_ECB)
 padded_msg = message.encode() + ((___ - len(message) % ___) * '{'.encode())
 encrypted = cipher.encrypt(padded_msg)
 encoded = base64.b64encode(encrypted)
 return encoded.decode()

encrypt('mykey123', 'My secret message')"
Write a Python method that takes a string and returns its reverse.,text = 'hello',"def reverse(text):
 return text[::-1]",Data Type,6019,"def reverse(text):
 return text[::-___]"
Create a function in Python that takes a string and returns a new string with the characters in reverse order.,"""Hello World!""","def reverse_string(input_str):
    reversed_str = """"
    for i in range(len(input_str)-1,-1,-1):
        reversed_str += input_str[i]
    return reversed_str

print (reverse_string(""Hello World!""))",Data Type,6036,"def reverse_string(input_str):
    reversed_str = """"
    for i in range(len(input_str)-___,-___,-___):
        reversed_str += input_str[i]
    return reversed_str

print (reverse_string(""Hello World!""))"
Generate all the permutations of a string using Python.,"str = ""abc""","def permutations(str):
	if len(str) <= 1:
		return [str]

	perms = [] 
	for i in range(len(str)):
		rest_strings = str[:i] + str[i+1:]
		for perm in permutations(rest_strings):
			perms.append(str[i:i+1] + perm)
	
	return perms

str = ""abc""
perms = permutations(str)
print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",Data Type,6048,"def permutations(str):
	if len(str) <= ___:
		return [str]

	perms = [] 
	for i in range(len(str)):
		rest_strings = str[:i] + str[i+___:]
		for perm in permutations(rest_strings):
			perms.append(str[i:i+___] + perm)
	
	return perms

str = ""abc""
perms = permutations(str)
print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']"
Develop a Python script to encode and decode a string using Base64.,"""Hello""","import base64

def encode(s):
    encoded = base64.b64encode(s.encode('utf-8'))
    return encoded.decode('utf-8')

def decode(s):
    decoded = base64.b64decode(s.encode('utf-8'))
    return decoded.decode('utf-8')",Data Type,6074,"import base64

def encode(s):
    encoded = base64.b64encode(s.encode('utf-___'))
    return encoded.decode('utf-___')

def decode(s):
    decoded = base64.b64decode(s.encode('utf-___'))
    return decoded.decode('utf-___')"
Write a Python program to parse a string of JSON data and display each entry on the command line.,"{""name"": ""John"", ""age"": 30, ""city"": ""New York""}","import json

data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

data_dict = json.loads(data)

for key, value in data_dict.items():
    print(f'{key}: {value}')",Data Type,6080,"import json

data = '{""name"": ""John"", ""age"": ___, ""city"": ""New York""}'

data_dict = json.loads(data)

for key, value in data_dict.items():
    print(f'{key}: {value}')"
Create a python code to format a given string as an email,"""John Doe jdoe@example.com""","""""""
This code formats a given string to an email address
""""""

def format_string(s):
    s = s.split("" "")
    name = s[0] + "" "" + s[1]
    email = s[2]
    return name + "" <"" + email + "">""

if __name__ == '__main__':
    string = ""John Doe jdoe@example.com""
    print(format_string(string))",Data Type,6090,"""""""
This code formats a given string to an email address
""""""

def format_string(s):
    s = s.split("" "")
    name = s[___] + "" "" + s[___]
    email = s[___]
    return name + "" <"" + email + "">""

if __name__ == '__main__':
    string = ""John Doe jdoe@example.com""
    print(format_string(string))"
Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character.,"""helloWorld12345""","def count_frequency(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    return counts",Data Type,6100,"def count_frequency(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += ___
        else:
            counts[char] = ___
    return counts"
Code a function in Python that takes an array of strings as parameter and returns the longest string.,"[""apple"", ""banana"", ""orange""]","def longest_string(arr):
    max_length = 0
    max_string = """"
    
    for s in arr:
        if len(s)> max_length:
            max_length = len(s)
            max_string = s
            
    return max_string",Data Type,6106,"def longest_string(arr):
    max_length = ___
    max_string = """"
    
    for s in arr:
        if len(s)> max_length:
            max_length = len(s)
            max_string = s
            
    return max_string"
Generate code to identify the type of data stored in a given variable in Python.,"val1 = [""Hello"", 10, 3.14]","# Identify the type of data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float",Data Type,6110,"# Identify the type of data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", ___, ___.___] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of ___ is int
# Data type of ___.___ is float"
Create a Python program to detect whether an input string is palindrome or not.,Example input string: 'racecar',"def is_palindrome(input_string):
 rev_string = input_string[::-1]
 return input_string == rev_string 

input_string = 'racecar'

if is_palindrome(input_string):
 print('The input string', input_string, 'is a palindrome.')
else:
 print('The input string', input_string, 'is not a palindrome.')",Data Type,6140,"def is_palindrome(input_string):
 rev_string = input_string[::-___]
 return input_string == rev_string 

input_string = 'racecar'

if is_palindrome(input_string):
 print('The input string', input_string, 'is a palindrome.')
else:
 print('The input string', input_string, 'is not a palindrome.')"
Write a Python program to generate a dictionary that holds the count of each character present in a given string.,"""Programming""","def char_count(str): 
 result = {}
 for char in str: 
  if char in result:
  result[char] += 1
  else:
  result[char] = 1
 return result

result = char_count(""Programming"")
print(result)",Data Type,6191,"def char_count(str): 
 result = {}
 for char in str: 
  if char in result:
  result[char] += ___
  else:
  result[char] = ___
 return result

result = char_count(""Programming"")
print(result)"
Create a Python function that takes a string and a number as arguments. The function replaces all digits in the string with the supplied number.,"str = ""I am 8 years old.""
num = 3","def replace_digit(str, num):
    new_str = """"
    for char in str:
        if char.isnumeric():
            new_str += str(num)
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)",Data Type,6194,"def replace_digit(str, num):
    new_str = """"
    for char in str:
        if char.isnumeric():
            new_str += ___
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)"
Write a function in Python to check if a given string is a palindrome.,"String : ""racecar""","def is_palindrome(input):
 s = input.lower()
 return s == s[::-1]

print(is_palindrome(""racecar"")) # True",Data Type,6195,"def is_palindrome(input):
 s = input.lower()
 return s == s[::-___]

print(is_palindrome(""racecar"")) # ___"
Write a function in Python to search for a character in a given string.,"String: “Hello”
Character: ‘l’","def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True
  return False",Data Type,6200,"def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return ___
  return ___"
Use regex in Python to extract all the words in a string and calculate the total number of words in the string.,This is an example string,"import re

text = ""This is an example string""
words = re.findall(r'\w+', text)
print(""Total words: "" + str(len(words)))",Data Type,6208,"import re

text = ""This is an example string""
words = re.findall(r'\w+', text)
print(""Total words: "" + ___))"
Write a function in Python that takes two arguments—a string and a positive integer n—and returns a list of size n containing the string repeated n times.,"string = ""Hello""
n = 4","def repeat_string(string, n):
     return [string]*n
     
# example
print(repeat_string(""Hello"", 4)) 
# Output: ['Hello', 'Hello', 'Hello', 'Hello']",Data Type,6213,"def repeat_string(string, n):
     return [string]*n
     
# example
print(repeat_string(""Hello"", ___)) 
# Output: ['Hello', 'Hello', 'Hello', 'Hello']"
"Write a function in Python that will take two input strings, concatenate them, and return the reversed string.","string1 = 'Hello'
string2 = 'World'","def reverseString(s1, s2):
 s = s1 + s2
 return s[::-1]

reverseString(string1, string2)
# Result: dlroW olleH",Data Type,6221,"def reverseString(s1, s2):
 s = s1 + s2
 return s[::-___]

reverseString(string1, string2)
# Result: dlroW olleH"
Generate a Python function that takes in a string x and returns a substring of x that is the longest palindrome.,x = 'abacdbcdbafeaccba',"def longest_palindrome(x):
    longest = ''
    for i in range(len(x)):
        j = i + len(longest) + 1
        while j <= len(x):
            substring = x[i:j]
            if substring == substring[::-1] and len(substring) > len(longest):
                longest = substring
            j = j + 1
    return longest",Data Type,6230,"def longest_palindrome(x):
    longest = ''
    for i in range(len(x)):
        j = i + len(longest) + ___
        while j <= len(x):
            substring = x[i:j]
            if substring == substring[::-___] and len(substring) > len(longest):
                longest = substring
            j = j + ___
    return longest"
Create a Python script that checks whether a given string is a palindrome.,"""malayalam""","def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False
    return True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")",Data Type,6240,"def isPalindrome(str): 
    # Run loop from ___ to len/___ 
    for i in range(___, len(str)//___): 
        if str[i] != str[len(str)-i-___]: 
            return ___
    return ___
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")"
"Create a Python script to generate random passwords. The script should take one parameter, an integer representing the length of the password, and should return a random string of the specified length.",Length: 8,"import string
import random

def generate_password(length):
 password = ''
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(8))",Data Type,6261,"import string
import random

def generate_password(length):
 password = ''
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(___))"
"Create a Python method which takes a String and two integers as parameters, and returns the String with the characters between the integers reversed.","String: ""Hello world""
1st Integer: 0
2nd Integer: 5","def reverse_substring(sentence, start, end):
    reversed = sentence[end:start-1:-1]
    return sentence[:start] + reversed + sentence[end+1:]

result = reverse_substring(""Hello world"", 0, 5)
print(result)",Data Type,6262,"def reverse_substring(sentence, start, end):
    reversed = sentence[end:start-___:-___]
    return sentence[:start] + reversed + sentence[end+___:]

result = reverse_substring(""Hello world"", ___, ___)
print(result)"
Generate an algorithm in Python to determine the count of each occurrence of a given character in a string,"string: ""abracadabra""
character: 'a'","def count_characters(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count

count_characters(""abracadabra"", 'a')  # 5",Data Type,6288,"def count_characters(string, character):
    count = ___
    for c in string:
        if c == character:
            count += ___
    return count

count_characters(""abracadabra"", 'a')  # ___"
Create a Python function that returns the longest string from a given list.,"[""my"", ""cat"", ""is"", ""lazy""]","def longest_string(strings):
  max_length = 0
  longest_string = """"
  
  for s in strings:
    if len(s) > max_length:
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string([""my"", ""cat"", ""is"", ""lazy""])
print(result)",Data Type,6315,"def longest_string(strings):
  max_length = ___
  longest_string = """"
  
  for s in strings:
    if len(s) > max_length:
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string([""my"", ""cat"", ""is"", ""lazy""])
print(result)"
Write a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string.,"String 1 = ""Hello World!""
String 2 = ""World""","def contains(s1, s2):
 return s2 in s1

string1 = ""Hello World!""
string2 = ""World""

print(contains(string1, string2)) # True",Data Type,6337,"def contains(s1, s2):
 return s2 in s1

string1 = ""Hello World!""
string2 = ""World""

print(contains(string1, string2)) # ___"
Create a python function for encrypting information that takes a string and a key.,"String = ""This is a secret message""
Key = ""12345678""","import secrets

def encrypt(string, key):
 cipher = ''
 for i in range(len(string)):
 cipher += chr(ord(string[i]) + ord(key[i % len(key)]))
 return cipher

encrypt(""This is a secret message"", ""12345678"") 
# prints ""\x18\x01\x15\x05\x1a\x12\x1b\x1f\x1f\x1e\x10\x04\x1f\x1f\x19\x0f\x02\x03\x07\x08""",Data Type,6343,"import secrets

def encrypt(string, key):
 cipher = ''
 for i in range(len(string)):
 cipher += chr(ord(string[i]) + ord(key[i % len(key)]))
 return cipher

encrypt(""This is a secret message"", ""___"") 
# prints ""\x18\x01\x15\x05\x1a\x12\x1b\x1f\x1f\x1e\x10\x04\x1f\x1f\x19\x0f\x02\x03\x07\x08"""
Design and write a Python program to extract all public email addresses from a given string,"""My email is john@example.com and yours is john@gmail.com.""","import re

def extract_emails(text):
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)",Data Type,6353,"import re

def extract_emails(text):
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-___-]+\.[a-zA-Z0-___-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)"
Generate a code snippet in Python to split a given string into substrings based on a specific delimiter.,"""1, 2, 3, 4""","str = ""1, 2, 3, 4""
list = str.split(', ') 
print(list) # Output is ['1', '2', '3', '4']",Data Type,6354,"str = ""___, ___, ___, ___""
list = str.split(', ') 
print(list) # Output is ['___', '___', '___', '___']"
Rewrite a Python script in Swift to generate random string of length n.,Length: 8,"import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((0..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: 8)
print(str)",Data Type,6356,"import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((___..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: ___)
print(str)"
Design a Python program to search for a substring in a given string.,"str = ""This is a string"";
substr = ""is""","def searchSubstring(str, substr):
  for i in range(len(str)):
    if str[i:i+len(substr)] == substr:
      return i

    return -1",Data Type,6358,"def searchSubstring(str, substr):
  for i in range(len(str)):
    if str[i:i+len(substr)] == substr:
      return i

    return -___"
Design a function in Python that accepts a string and prints the number of occurrences of each letter in the string.,"""Hello, World!""","def count_letters(text):
    letters_count = dict()

    for char in text:
        if char not in letters_count:
            letters_count[char] = 1
        else:
            letters_count[char] += 1

    return letters_count

if __name__ == '__main__':
    text = 'Hello, World!'
    print(count_letters(text))",Data Type,6369,"def count_letters(text):
    letters_count = dict()

    for char in text:
        if char not in letters_count:
            letters_count[char] = ___
        else:
            letters_count[char] += ___

    return letters_count

if __name__ == '__main__':
    text = 'Hello, World!'
    print(count_letters(text))"
Create a Node.js script for returning the longest string in an array.,"[""javascript"", ""ruby"", ""python"", ""java""]","const arr = [""javascript"", ""ruby"", ""python"", ""java""];

const longestString = (arr) => {
 let longest = arr[0];
 for (let i = 1; i < arr.length; i++) {
 if (arr[i].length > longest.length) {
 longest = arr[i];
 }
 }
 return longest;
};

const longestStr = longestString(arr);

console.log(longestStr); // Output: ""javascript""",Data Type,6387,"const arr = [""javascript"", ""ruby"", ""python"", ""java""];

const longestString = (arr) => {
 let longest = arr[___];
 for (let i = ___; i < arr.length; i++) {
 if (arr[i].length > longest.length) {
 longest = arr[i];
 }
 }
 return longest;
};

const longestStr = longestString(arr);

console.log(longestStr); // Output: ""javascript"""
Create a Python script that counts the number of vowels from a given string.,"""This is an example string""","def count_vowels(string):
    count = 0
    for char in string:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

string = ""This is an example string""
vowels = count_vowels(string)

print(f""Number of vowels in the given string: {vowels}"")",Data Type,6394,"def count_vowels(string):
    count = ___
    for char in string:
        if char in ""aeiouAEIOU"":
            count += ___
    return count

string = ""This is an example string""
vowels = count_vowels(string)

print(f""Number of vowels in the given string: {vowels}"")"
Design a function in Python that removes any characters from a given string that appears 2 or more times.,"""aabcdbb""","def remove_duplicates(string): 
    res = """" 
    for ch in string: 
        if string.count(ch) < 2: 
            res += ch 
    return res

string = ""aabcdbb""
print(remove_duplicates(string))  # prints acdb",Data Type,6408,"def remove_duplicates(string): 
    res = """" 
    for ch in string: 
        if string.count(ch) < ___: 
            res += ch 
    return res

string = ""aabcdbb""
print(remove_duplicates(string))  # prints acdb"
Create a python code to check if all characters are unique in a given string,string = 'abcdefeb',"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))",Data Type,6413,"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return ___
        else:
            chars.add(char)
    return ___

print(is_unique(string))"
Create a python code snippet to count the frequencies of words in a given string,"string = ""This is a test string""","def countFrequencies(string):
    words = string.split()
    freq_dict = {}
    for word in words:
        if word not in freq_dict:
            freq_dict[word] = 1
        else:
            freq_dict[word] += 1
    return freq_dict

# example
result = countFrequencies(""This is a test string"")",Data Type,6422,"def countFrequencies(string):
    words = string.split()
    freq_dict = {}
    for word in words:
        if word not in freq_dict:
            freq_dict[word] = ___
        else:
            freq_dict[word] += ___
    return freq_dict

# example
result = countFrequencies(""This is a test string"")"
Create a Python function that takes a string and finds the longest word in it.,"sentence = ""This is an example of a sentence with some words""","def longestWord(sentence): 
    longestWord = ''
    maxLength = 0
    for word in sentence.split(' '):
        if len(word) > maxLength:
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)",Data Type,6424,"def longestWord(sentence): 
    longestWord = ''
    maxLength = ___
    for word in sentence.split(' '):
        if len(word) > maxLength:
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)"
Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.,"String 1: abc
String 2: qaxbcy","def is_subsequence(str1, str2):
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += 1
        j += 1

    return i == len(str1)",Data Type,6441,"def is_subsequence(str1, str2):
    i = ___
    j = ___

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += ___
        j += ___

    return i == len(str1)"
"Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string.",number = 5,"def IntToBinString(number):
    if number == 0:
        return ""0""
    ret = """"
    while number > 0:
        if number % 2 == 1:
            ret = ""1"" + ret
        else:
            ret = ""0"" + ret
        number //= 2
    return ret",Data Type,6442,"def IntToBinString(number):
    if number == ___:
        return ""___""
    ret = """"
    while number > ___:
        if number % ___ == ___:
            ret = ""___"" + ret
        else:
            ret = ""___"" + ret
        number //= ___
    return ret"
"Create a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear.","json_string = '{""fruit"": [""apple"", ""banana"", ""cherry""], ""vegetable"": [""carrot"", ""potato"", ""onion""]}'","import json
 
def reformat_json(json_string):
    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)",Data Type,6483,"import json
 
def reformat_json(json_string):
    return json.dumps(json.loads(json_string), indent=4, sort_keys=___)"
Create a Python script to format a JSON string.,"json_str = ‘{”name”:”Robert”, ”age”:30, ”city”:”New York”}’","# import json library
import json

# parse input string as JSON
json_data = json.loads(json_str)

# format the json string
formatted_json = json.dumps(json_data, indent=4)

# print the formatted json string
print(formatted_json)",Data Type,6488,"# import json library
import json

# parse input string as JSON
json_data = json.loads(json_str)

# format the json string
formatted_json = json.dumps(json_data, indent=___)

# print the formatted json string
print(formatted_json)"
Generate a python program to check if the string is a palindrome or not.,"string = ""madam""","def is_palindrom(string):
    reverse_string = string[::-1]
    if string == reverse_string:
        return True
    else:
        return False",Data Type,6504,"def is_palindrom(string):
    reverse_string = string[::-___]
    if string == reverse_string:
        return ___
    else:
        return ___"
"Write a Python program that takes a string and a number as input, and returns the string repeated the given number of times.","String: xyz
Number: 3","def repeatString(string, num):
    return string * num

result = repeatString(""xyz"", 3)
print(result)",Data Type,6513,"def repeatString(string, num):
    return string * num

result = repeatString(""xyz"", ___)
print(result)"
Generate a correct python script to identify string elements whose length is even,"my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]","my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]

def find_even_length(lst):
    even_list = []
    for l in lst:
        if len(l) % 2 == 0:
            even_list.append(l)
    return even_list

even_list = find_even_length(my_list)
print(even_list)",Data Type,6537,"my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]

def find_even_length(lst):
    even_list = []
    for l in lst:
        if len(l) % ___ == ___:
            even_list.append(l)
    return even_list

even_list = find_even_length(my_list)
print(even_list)"
Write a Python script to convert a string containing temperatures in Celsius to Fahrenheit,"string celsius = '25, 15, 32'","def convertCelsiusToFahrenheit(celsius):
 temperature_fahrenheit = []

 for c in celsius.split(','):
 temperature_fahrenheit.append(float(c)*1.8 + 32)

 return temperature_fahrenheit

fahrenheit = convertCelsiusToFahrenheit(celsius)
print(fahrenheit)",Data Type,6547,"def convertCelsiusToFahrenheit(celsius):
 temperature_fahrenheit = []

 for c in celsius.split(','):
 temperature_fahrenheit.append(float(c)*___.___ + ___)

 return temperature_fahrenheit

fahrenheit = convertCelsiusToFahrenheit(celsius)
print(fahrenheit)"
Write a Python program to detect if a given string contains any of the given keywords.,"String: I love ice cream
Keywords: [""chocolate"", ""vanilla""]","def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return True
 return False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))",Data Type,6550,"def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return ___
 return ___

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))"
Create an algorithm in Python to check if a given string contains valid parentheses.,"""[[{{}}]]""","def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return False
        else:
            return False
    return stack == []

print(isValid('[[{{}}]]'))",Data Type,6551,"def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return ___
        else:
            return ___
    return stack == []

print(isValid('[[{{}}]]'))"
Program a function in Python that creates all substrings of a given string.,"The string is ""create"".","def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            subString.append(string[i:j]) 
  
    return subString",Data Type,6586,"def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + ___, length + ___): 
            subString.append(string[i:j]) 
  
    return subString"
Please write a code to extract the URL from a given string.,There is a website: https://example.com,"#!/usr/bin/python
import re

# input string
string = ""There is a website: https://example.com""

# regex
pattern = r'(https?://\S+)'

# match url
url = re.findall(pattern, string)[0]

# print result
print(url) # Output: https://example.com",Data Type,6594,"#!/usr/bin/python
import re

# input string
string = ""There is a website: https://example.com""

# regex
pattern = r'(https?://\S+)'

# match url
url = re.findall(pattern, string)[___]

# print result
print(url) # Output: https://example.com"
Create a Python program that takes a string and indicates whether it is a palindrome or not.,"""racecar""","def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))",Data Type,6596,"def is_palindrome(s):
  s = s.lower()
  left = ___
  right = len(s) - ___
  
  while left < right:
    if s[left] != s[right]:
      return ___
    left += ___
    right -= ___
  return ___
  
print(is_palindrome(""racecar""))"
Create a Python program to estimate the number of unique words in a string of text.,"""One two three four, five. Six seven eight nine, ten.""","def count_unique_words(s):
    words = s.split()
    unique_words = set(words)
    return len(unique_words)

input_string = ""One two three four, five. Six seven eight nine, ten.""
print(""The number of unique words is"", count_unique_words(input_string))

# Output
# The number of unique words is 10",Data Type,6605,"def count_unique_words(s):
    words = s.split()
    unique_words = set(words)
    return len(unique_words)

input_string = ""One two three four, five. Six seven eight nine, ten.""
print(""The number of unique words is"", count_unique_words(input_string))

# Output
# The number of unique words is ___"
"Using Python, create an algorithm to count the number of vowels in a given string.","String: ""Hello, World!""","def countVowels(string):
    string = string.lower()
    count = 0
    vowels = 'aeiou'

    for char in string:
        if char in vowels:
            count += 1
    return count

string = 'Hello, World!'
vowelCount = countVowels(string)
print(""Number of vowels is:"", vowelCount)",Data Type,6627,"def countVowels(string):
    string = string.lower()
    count = ___
    vowels = 'aeiou'

    for char in string:
        if char in vowels:
            count += ___
    return count

string = 'Hello, World!'
vowelCount = countVowels(string)
print(""Number of vowels is:"", vowelCount)"
Generate a function in Python to replace every character in a string with the character that follows it in the alphabet.,"string = ""abc""","def replace_char(string):
    encoded = """"
    for char in string:
        if char == 'z':
            encoded += 'a'
        else:
            encoded += chr(ord(char) + 1)
    return encoded",Data Type,6699,"def replace_char(string):
    encoded = """"
    for char in string:
        if char == 'z':
            encoded += 'a'
        else:
            encoded += chr(ord(char) + ___)
    return encoded"
Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.,"phrases = [""A bird in the hand"", ""is worth two in the bush""]","result = ""A bird in the hand (17)is worth two in the bush (25)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
for phrase in input_phrases:
 result += phrase + ' (' + str(len(phrase)) + ')'
 
print(result)",Data Type,6715,"result = ""A bird in the hand (___)is worth two in the bush (___)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
for phrase in input_phrases:
 result += phrase + ' (' + ___) + ')'
 
print(result)"
Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string.,"Example String: ""missisippi""","def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",Data Type,6727,"def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = ___
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': ___, 'i': ___, 's': ___, 'p': ___}"
"Develop a Python script that prints the unique words in a string, along with their respective counts.","""The quick brown fox jumped over the lazy dog.""","from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

for word in unique_words:
    print(f""{word:15} {word_counts[word]:3}"")",Data Type,6734,"from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

for word in unique_words:
    print(f""{word:___} {word_counts[word]:___}"")"
Construct a Python program that takes a string as input and creates a new string with the first character of each word in the given string,"""This is a sample string""","def first_letter_string(input_str):
    output_str = """"

    for w in input_str.split():
        output_str += w[0]

    return output_str

input_str = ""This is a sample string""
print(first_letter_string(input_str))",Data Type,6741,"def first_letter_string(input_str):
    output_str = """"

    for w in input_str.split():
        output_str += w[___]

    return output_str

input_str = ""This is a sample string""
print(first_letter_string(input_str))"
Construct a Python script to search a text for a given string and returns the number of iterations found.,"string= ""Hello World!"", search=""l""","def search_string(string, search):
    count = 0 
    for i in range(len(string)):
        if string[i] == search:
            count += 1
    return count

searched_string = search_string(""Hello World!"", ""l"") 
print(searched_string)",Data Type,6769,"def search_string(string, search):
    count = ___ 
    for i in range(len(string)):
        if string[i] == search:
            count += ___
    return count

searched_string = search_string(""Hello World!"", ""l"") 
print(searched_string)"
Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string.,"str = ""Hello World!""
index = [0, 5, 9]","def remove_chars_at_indices(str, indices):
    new_str = """"
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)",Data Type,6788,"def remove_chars_at_indices(str, indices):
    new_str = """"
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [___, ___, ___]
result = remove_chars_at_indices(str, index)
print(result)"
Create a Python function that takes two strings and checks if the second string is a substring of the first.,"string1 = ""Hello world!""
string2 = ""world""","def check_substring(string1, string2):
    if string2 in string1:
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)",Data Type,6789,"def check_substring(string1, string2):
    if string2 in string1:
        return ___
    else:
        return ___

# example
result = check_substring(""Hello world!"", ""world"")
print(result)"
Generate a Python program that uses a recursive function to reverse a given string combining with loops and conditionals.,thequickbrownfox,"def reverseString(s): 
    if len(s) == 0: 
        return s 
    else: 
        return reverseString(s[1:]) + s[0] 
  
# Driver code 
s = ""thequickbrownfox""
  
print (""The original string  is : "",end="""") 
print (s) 
  
print (""The reversed string(using recursion) is : "",end="""") 
print (reverseString(s))",Data Type,6792,"def reverseString(s): 
    if len(s) == ___: 
        return s 
    else: 
        return reverseString(s[___:]) + s[___] 
  
# Driver code 
s = ""thequickbrownfox""
  
print (""The original string  is : "",end="""") 
print (s) 
  
print (""The reversed string(using recursion) is : "",end="""") 
print (reverseString(s))"
"Write a Python script that takes a list of strings as an input and creates a dictionary containing the unique letters in each string, and their respective counts.","string_list = [""apple"",""banana"",""carrot""]","char_dict = {}

for string in string_list:
 for char in string:
 if char in char_dict:
 char_dict[char] += 1
 else:
 char_dict[char] = 1

print(char_dict)

# Output:
# {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1}",Data Type,6795,"char_dict = {}

for string in string_list:
 for char in string:
 if char in char_dict:
 char_dict[char] += ___
 else:
 char_dict[char] = ___

print(char_dict)

# Output:
# {'a': ___, 'p': ___, 'l': ___, 'e': ___, 'b': ___, 'n': ___, 'c': ___, 'r': ___, 'o': ___, 't': ___}"
Write a function in Python to return the top 3 most frequent words in a given string.,This is a sample string,"from collections import Counter

def top_3_words(str):
  word_list = list(str.split())
  word_dict = Counter(word_list)
  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)
  top_3 = sorted_words[:3]
  return [word for word, count in top_3]

top_3_words('This is a sample string')",Data Type,6828,"from collections import Counter

def top_3_words(str):
  word_list = list(str.split())
  word_dict = Counter(word_list)
  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=___)
  top_3 = sorted_words[:___]
  return [word for word, count in top_3]

top_3_words('This is a sample string')"
Can you write a Python script to search an input string for a specific character and return its position in the string?,"string = ""Python""
search_char = 'y'",pos = string.find(search_char) # 2,Data Type,6837,pos = string.find(search_char) # ___
Write a function in Python that takes a list of strings and returns a dictionary of counts for each string.,"list_of_strings = [""apple"", ""banana"", ""apple"", ""orange"", ""kiwi""]","def count_list_items(list_of_strings):
 counts = {}
 
 for item in list_of_strings:
 if item not in counts:
 counts[item] = 1
 else:
 counts[item] += 1
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": 2, ""banana"": 1, ""orange"": 1, ""kiwi"": 1}",Data Type,6868,"def count_list_items(list_of_strings):
 counts = {}
 
 for item in list_of_strings:
 if item not in counts:
 counts[item] = ___
 else:
 counts[item] += ___
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": ___, ""banana"": ___, ""orange"": ___, ""kiwi"": ___}"
Generate a Python program to process an array of strings and count the number of times each string is repeated in the array.,"const inputArray = [""a"", ""b"", ""a"", ""a"", ""b"", ""c"", ""a"", ""d""]","occurence_map = {}

for item in inputArray:
 if item not in occurence_map:
  occurence_map[item] = 1
 else:
  occurence_map[item] += 1

print(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}",Data Type,6877,"occurence_map = {}

for item in inputArray:
 if item not in occurence_map:
  occurence_map[item] = ___
 else:
  occurence_map[item] += ___

print(occurence_map) # Output: {'a': ___, 'b': ___, 'c': ___, 'd': ___}"
"Given a list of strings, write a Python program to calculate the maximum length of a string.","list_of_strings = [""dog"", ""cat"", ""elephant"", ""bird""]","max_length = 0

for string in list_of_strings:
    max_length = max(max_length, len(string))

print(max_length)",Data Type,6893,"max_length = ___

for string in list_of_strings:
    max_length = max(max_length, len(string))

print(max_length)"
What function will you use to count the number of words in a string?,"'Hello world, this is a sentence.'","There are 5 words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + 1
```",Data Type,6895,"There are ___ words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + ___
```"
Generate a function in Python to edit a given string and capitalize a given character at a specific position.,"""Hello World!"" and 5","def capitalizeCharacter(s, pos): 
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + 1:] 
    return result",Data Type,6897,"def capitalizeCharacter(s, pos): 
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + ___:] 
    return result"
Generate a code snippet to find the duplicate words in a string.,"""Python is a programming language programming used widely""","s = ""Python is a programming language programming used widely""
words = s.split(' ')

duplicate_words = []

for i in range(len(words)):
    for j in range(i + 1, len(words)):
        if words[i] == words[j]:
            duplicate_words.append(words[i])
            
print(duplicate_words)",Data Type,6905,"s = ""Python is a programming language programming used widely""
words = s.split(' ')

duplicate_words = []

for i in range(len(words)):
    for j in range(i + ___, len(words)):
        if words[i] == words[j]:
            duplicate_words.append(words[i])
            
print(duplicate_words)"
Design a Python code to extract the characters from from a given string in reverse order.,"string = ""hello""","def reverseCharacters (string):
    reverseStr = """"
    for i in range(len(string)-1, -1, -1):
        reverseStr += string[i]
    return reverseStr",Data Type,6945,"def reverseCharacters (string):
    reverseStr = """"
    for i in range(len(string)-___, -___, -___):
        reverseStr += string[i]
    return reverseStr"
Write a function in Python to count the occurrences of a given character in a string.,"string: ""hello world"", character: 'l'","def count_char(s, c):
    count = 0
    for ch in s:
        if ch == c:
            count += 1
    return count

print(count_char('hello world', 'l'))",Data Type,6948,"def count_char(s, c):
    count = ___
    for ch in s:
        if ch == c:
            count += ___
    return count

print(count_char('hello world', 'l'))"
Create a program to detect a palindrome string in Python.,"original_string = ""radar""","# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))",Data Type,6986,"# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-___]  
    if original_string == reversed_string:
        return ___ 
    else:
        return ___  
  
# Print result
print(is_palindrome(original_string))"
Find a way to split the string below into an array of length 3.,"string = ""Python is a great language""","string = ""Python is a great language""
arr = string.split(' ', 3) 
print(arr)",Data Type,7039,"string = ""Python is a great language""
arr = string.split(' ', ___) 
print(arr)"
Write a Python program to divide a given string into pairs such that each pairs has 2 characters.,"""abcd""","def split_into_pairs(inputString):
    resultList = []
    counter = 0
    
    while counter < len(inputString):
        resultList.append(inputString[counter:counter + 2])
        counter += 2
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)",Data Type,7045,"def split_into_pairs(inputString):
    resultList = []
    counter = ___
    
    while counter < len(inputString):
        resultList.append(inputString[counter:counter + ___])
        counter += ___
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)"
"Please generate a Python function that takes a string as input and prints every character in the string contained between ""a"" and ""e"" in a newline.","""Airport""","def extract_abce(string):
  output = """"
  for char in string:
                    if ord(char) >= 97 and ord(char) <= 101:
                                    output += char + ""\n""
  print(output)",Data Type,7046,"def extract_abce(string):
  output = """"
  for char in string:
                    if ord(char) >= ___ and ord(char) <= ___:
                                    output += char + ""\n""
  print(output)"
Generate a function in Python that takes an integer value from a dictionary and returns its value as a string.,"{""number1"": 8, ""number2"": 16, ""number3"": 20}","def get_string_value(input_dict):
  """"""Return string value in the input dictionary""""""
  output_value = """"
  for key, value in input_dict.items():
      output_value = str(value)
  return output_value",Data Type,7051,"def get_string_value(input_dict):
  """"""Return string value in the input dictionary""""""
  output_value = """"
  for key, value in input_dict.items():
      output_value = ___
  return output_value"
Generate a Python program to convert a given binary string into its equivalent decimal number.,"Binary String: ""1101""","# Convert the given binary string to an integer number
binary_string = ""1101""
decimal_number = int(binary_string, 2)

# Print the result
print(decimal_number) # 13",Data Type,7054,"# Convert the given binary string to an integer number
binary_string = ""___""
decimal_number = int(binary_string, ___)

# Print the result
print(decimal_number) # ___"
Write a code snippet to convert a Python object to a JSON string.,"obj = {
  ""name"": ""John"",
  ""age"": 42
}","import json

obj = {
  ""name"": ""John"",
  ""age"": 42
}

json_string = json.dumps(obj)",Data Type,7055,"import json

obj = {
  ""name"": ""John"",
  ""age"": ___
}

json_string = json.dumps(obj)"
Create a Python function that returns the longest string in a list of strings.,"list_strings = [""abc"", ""def"", ""ghij""]","def get_longest_string(list_strings):
 longest_string = list_strings[0]
 for item in list_strings:
 if len(item) > len(longest_string):
 longest_string = item
 return longest_string

list_strings = [""abc"", ""def"", ""ghij""]
print(get_longest_string(list_strings)) # prints ""ghij""",Data Type,7057,"def get_longest_string(list_strings):
 longest_string = list_strings[___]
 for item in list_strings:
 if len(item) > len(longest_string):
 longest_string = item
 return longest_string

list_strings = [""abc"", ""def"", ""ghij""]
print(get_longest_string(list_strings)) # prints ""ghij"""
Develop a Python program that tells how many characters are there in a given string.,My name is John,"# Python program to count the number of characters in a string

string = input('Enter a string: ')

count = 0
for char in string:
    count += 1

print(f'The string contains {count} characters.')",Data Type,7061,"# Python program to count the number of characters in a string

string = input('Enter a string: ')

count = ___
for char in string:
    count += ___

print(f'The string contains {count} characters.')"
Generate a code snippet to convert a string to an integer in Python.,"str = ""145""","num = int(str)
print(num) # Prints 145",Data Type,7117,"num = ___
print(num) # Prints ___"
Write a Python script to check how many words with length 5 are in the given string,The quick brown fox jumped over the lazy dog.,"def count_words_length(string):
    count = 0
    words = string.split("" "")
    for word in words:
        if len(word) == 5:
            count += 1
    return count

string = ""The quick brown fox jumped over the lazy dog.""
print(count_words_length(string))",Data Type,7120,"def count_words_length(string):
    count = ___
    words = string.split("" "")
    for word in words:
        if len(word) == ___:
            count += ___
    return count

string = ""The quick brown fox jumped over the lazy dog.""
print(count_words_length(string))"
Convert the following JSON string to a valid Python dictionary.,"'{""name"": ""John"", ""age"": 32, ""city"": ""New York""}'","data = json.loads('{""name"": ""John"", ""age"": 32, ""city"": ""New York""}')",Data Type,7129,"data = json.loads('{""name"": ""John"", ""age"": ___, ""city"": ""New York""}')"
Create a python program to extract the name and phone number from a given string.,John Doe: (+1) 555-665-8877,"# Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+1) 555-665-8877"")
print(result)",Data Type,7135,"# Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[___]
    name_phone_dict['phone'] = data[___]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+___) ___-___-___"")
print(result)"
Generate a function in Python that takes a string and counts the number of capitalized letters.,"""ViVaViVaViVa""","def countCapitalized(str): 
    count = 0
    for i in range(len(str)): 
        if str[i].isupper():
            count += 1
    return count

print(countCapitalized(""ViVaViVaViVa""))",Data Type,7136,"def countCapitalized(str): 
    count = ___
    for i in range(len(str)): 
        if str[i].isupper():
            count += ___
    return count

print(countCapitalized(""ViVaViVaViVa""))"
"Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).","""radar""","input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-1]

 if reversed_word == word:
 return True
 else:
 return False

print(is_palindrome(input_word))
# Output: True",Data Type,7154,"input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-___]

 if reversed_word == word:
 return ___
 else:
 return ___

print(is_palindrome(input_word))
# Output: ___"
Create a Python function takes a string and an integer and returns the reversed string with the first letter of each word capitalized,"String: the quick brown fox
Integer: 3","def reverse_capitalize(string, n):
    string_list = string.split() 
    reverse_list = string_list[-n:] + string_list[:-n] 
    new_string = "" "".join(reverse_list) 
    return new_string.title()

string = ""the quick brown fox""
n = 3

print(reverse_capitalize(string, n))",Data Type,7213,"def reverse_capitalize(string, n):
    string_list = string.split() 
    reverse_list = string_list[-n:] + string_list[:-n] 
    new_string = "" "".join(reverse_list) 
    return new_string.title()

string = ""the quick brown fox""
n = ___

print(reverse_capitalize(string, n))"
"Design an algorithm in Python that takes in a string and searches for a given pattern, returning it or -1 if not found.","String = ""aaaaabbbbbbcccccc""
Pattern = ""bbb""","def pattern_search(string, pattern):
    i = 0
    while i < len(string):
        j = 0
        while j < len(pattern):
            if string[i+j] != pattern[j]:
                break
            j += 1
        if j == len(pattern):
            return i
        i += 1
    return -1",Data Type,7218,"def pattern_search(string, pattern):
    i = ___
    while i < len(string):
        j = ___
        while j < len(pattern):
            if string[i+j] != pattern[j]:
                break
            j += ___
        if j == len(pattern):
            return i
        i += ___
    return -___"
Generate a Python program to edit a given string such that it reverses the words in the string.,string = 'This is a string',"def reverse_words(string):
    words = string.split(' ')
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string",Data Type,7221,"def reverse_words(string):
    words = string.split(' ')
    reversed_words = words[::-___]
    reversed_string = ' '.join(reversed_words)
    return reversed_string"
Write a Python program to format a specified string to limit the number of characters to 6.,"string = ""abcdefghijklmnopqrstuvwxyz""","def limit_string(string):
    """"""Format the specified string to limit the number of characters to 6.""""""
    return string[:6]",Data Type,7226,"def limit_string(string):
    """"""Format the specified string to limit the number of characters to ___.""""""
    return string[:___]"
"Write a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list.","['1', '2', '3', 'four', '5']","def convert_to_ints(lst):
    result = []
    for i in lst:
        try:
            result.append(int(i))
        except:
            pass
    
    return result

result = convert_to_ints(['1', '2', '3', 'four', '5'])
print(result)",Data Type,7229,"def convert_to_ints(lst):
    result = []
    for i in lst:
        try:
            result.append(___)
        except:
            pass
    
    return result

result = convert_to_ints(['___', '___', '___', 'four', '___'])
print(result)"
Create a Python program to extract the email and phone numbers within a given string.,"String:
'My email is hello@domain.com and my phone number is +123456789.'","import re

text = 'My email is hello@domain.com and my phone number is +123456789'

email = re.findall(""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
phone = re.findall(""\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|
2[98654321]\d{9}|9[8543210]\d{8})\b"", text)

print(email)
print(phone)",Data Type,7271,"import re

text = 'My email is hello@domain.com and my phone number is +___'

email = re.findall(""[a-zA-Z0-9_.+-]+@[a-zA-Z0-___-]+\.[a-zA-Z0-___-.]+"", text)
phone = re.findall(""\+(___[___]\d|___[___]\d|___[___]\d|___[___]\d|___\d|___[___]\d|
___[___]\d{___}|___[___]\d{___})\b"", text)

print(email)
print(phone)"
Create a python program to convert a string containing comma seperated values into a list of integers.,"""12,34,55,67""","def str_to_list(input_str):
    result = [int(i) for i in input_str.split("","")]
    return result

str = ""12,34,55,67""
int_list = str_to_list(str)
print(int_list) # Output: [12, 34, 55, 67]",Data Type,7283,"def str_to_list(input_str):
    result = [___ for i in input_str.split("","")]
    return result

str = ""___,___,___,___""
int_list = str_to_list(str)
print(int_list) # Output: [___, ___, ___, ___]"
Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.,This is a test,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False
    return True

print(check_vowels('This is a test'))",Data Type,7285,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return ___
    return ___

print(check_vowels('This is a test'))"
Create a Python program that takes a string of words and returns the reverse order of words.,"""Hello World""","def reverse_words(words):
    words_list = words.split(' ')
    reversed_list = words_list[::-1] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)",Data Type,7300,"def reverse_words(words):
    words_list = words.split(' ')
    reversed_list = words_list[::-___] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)"
Generate a Python program that takes in a string of text and returns the count of each unique word in the string,This is a sample string,"def count_words(string):
 word_counts = {} 
 words = string.split()
 
 for word in words:
 if word in word_counts:
 word_counts[word] += 1 
 else:
 word_counts[word] = 1
 
 return word_counts

print(count_words(""This is a sample string"")) 
# Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1}",Data Type,7306,"def count_words(string):
 word_counts = {} 
 words = string.split()
 
 for word in words:
 if word in word_counts:
 word_counts[word] += ___ 
 else:
 word_counts[word] = ___
 
 return word_counts

print(count_words(""This is a sample string"")) 
# Output {'This': ___, 'is': ___, 'a': ___, 'sample': ___, 'string': ___}"
Create a Python program to replace all the vowels in a string with a corresponding number.,"String: ""Hello World""","def replace_vowels(string):
    result = """"
    for char in string:
        if char in ""aeiouAEIOU"":
            result += str(ord(char))
        else:
            result += char 
    return result

string = ""Hello World""
result = replace_vowels(string)
print(result)",Data Type,7307,"def replace_vowels(string):
    result = """"
    for char in string:
        if char in ""aeiouAEIOU"":
            result += ___)
        else:
            result += char 
    return result

string = ""Hello World""
result = replace_vowels(string)
print(result)"
Create a program in Python to extract words of length 4 from a given string.,"s = ""extract four letter words"";","words = s.split()

four_letter_words = []
for word in words:
   if len(word) == 4:
      four_letter_words.append(word)
      
print(four_letter_words)",Data Type,7311,"words = s.split()

four_letter_words = []
for word in words:
   if len(word) == ___:
      four_letter_words.append(word)
      
print(four_letter_words)"
Can you show how to perform regular expression matching in Python with a given string and pattern?,"String s = ""Hello World""
Pattern p = ""W.*d""","import re

s = ""Hello World""
p = ""W.*d""

m = re.match(p, s)
if m is not None:
    print(""Match found!"")
    print(""Position: "" + str(m.start()) + "","" + str(m.end()))
    print(""Matched string: "" + m.group())
else:
    print(""No match found!"")",Data Type,7313,"import re

s = ""Hello World""
p = ""W.*d""

m = re.match(p, s)
if m is not None:
    print(""Match found!"")
    print(""Position: "" + ___) + "","" + ___))
    print(""Matched string: "" + m.group())
else:
    print(""No match found!"")"
"Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true).","""hello"", ""lohel""","def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True",Data Type,7360,"def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints ___"
Create a python program to classify if a given string contains any numbers.,"string = ""password123""","import re

def contains_numbers(string):
    """"""Classify if a given string contains any numbers.""""""
    return bool(re.search(r'\d', string))

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # True",Data Type,7382,"import re

def contains_numbers(string):
    """"""Classify if a given string contains any numbers.""""""
    return ___)

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # ___"
Write a Python program to parse a JSON object from a given string.,"Input String: {""name"": ""John Doe"", ""age"": 28}","import json

givenString = ""{\""name\"": \""John Doe\"", \""age\"": 28}""

data = json.loads(givenString)

print(data)",Data Type,7397,"import json

givenString = ""{\""name\"": \""John Doe\"", \""age\"": ___}""

data = json.loads(givenString)

print(data)"
Design an algorithm in Python for reversing a string.,"exampleString = ""Hello World""","def reverse_string(exampleString): 
    return exampleString[::-1] 

print(reverse_string(exampleString))",Data Type,7415,"def reverse_string(exampleString): 
    return exampleString[::-___] 

print(reverse_string(exampleString))"
Develop a Python algorithm to validate a given palindrome string.,"""level""","def isPalindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] != s[j]:
            return False
        i += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")",Data Type,7432,"def isPalindrome(s):
    i = ___
    j = len(s) - ___
    while i < j:
        if s[i] != s[j]:
            return ___
        i += ___
        j -= ___
    return ___
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")"
Write a Python program to edit a given string replacing every character after 2nd occurrence with '*'.,"string = ""Adam is my hero""","def edit_str(string):
 return string[:2] + '*' * (len(string)-2)",Data Type,7451,"def edit_str(string):
 return string[:___] + '*' * (len(string)-___)"
Create a Python program that takes a string as input and outputs the string with all characters replaced with their corresponding ASCII values.,"""Python""","def ascii_repr_str(str):
    ans = ''
    for ch in str:
        ans += str(ord(ch))
    return ans

print(ascii_repr_str(""Python"")) # result: 080 121 116 104 111 110",Data Type,7466,"def ascii_repr_str(str):
    ans = ''
    for ch in str:
        ans += ___)
    return ans

print(ascii_repr_str(""Python"")) # result: ___ ___ ___ ___ ___ ___"
"Create a Python program to convert a list of numbers to a comma separated string. The program should take a list of integers as input and return a string with the elements of the list separated by a comma (',').","list_of_integers = [1, 2, 3, 4]","def list_to_string(list):
 return ','.join(str(x) for x in list)

list_of_integers = [1, 2, 3, 4]
print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4",Data Type,7468,"def list_to_string(list):
 return ','.join(___ for x in list)

list_of_integers = [___, ___, ___, ___]
print(list_to_string(list_of_integers)) // Outputs: ___,___,___,___"
Write a Python program to find a substring in a string. The program should return the index of the beginning of the substring or -1 if the substring is not found.,"string = ""Hello World""
substring = ""World""","def findSubstring(string, substring):
 index = string.find(substring)
 if index != -1:
  return index
 else:
  return -1

string = ""Hello World""
substring = ""World""
print(findSubstring(string, substring)) # returns 6",Data Type,7470,"def findSubstring(string, substring):
 index = string.find(substring)
 if index != -___:
  return index
 else:
  return -___

string = ""Hello World""
substring = ""World""
print(findSubstring(string, substring)) # returns ___"
"Develop a Python routine that takes a string, separates words and prints the first word.","""Hello, World!""","def print_first_word(sentence):
    words = sentence.split(' ')
    print(words[0])

sentence = ""Hello, World!""
print_first_word(sentence)",Data Type,7480,"def print_first_word(sentence):
    words = sentence.split(' ')
    print(words[___])

sentence = ""Hello, World!""
print_first_word(sentence)"
Create a program in Python for counting the occurrence of a character in a string.,"String = ""Hello! What is your name?""
Character = 'o'","String = ""Hello! What is your name?""
def characterCounter(string, character):
    count = 0
    for ch in string:
        if ch == character:
            count += 1
    return count

print(characterCounter(String, 'o')) # 2",Data Type,7486,"String = ""Hello! What is your name?""
def characterCounter(string, character):
    count = ___
    for ch in string:
        if ch == character:
            count += ___
    return count

print(characterCounter(String, 'o')) # ___"
Build an algorithm in Python to check if a string is a palindrome.,"""abccba""","def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//2):
        # Compare characters from both ends
        if str[i] != str[n-i-1]:
            return False
    return True

str = ""abccba""
print(is_palindrome(str))",Data Type,7503,"def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//___):
        # Compare characters from both ends
        if str[i] != str[n-i-___]:
            return ___
    return ___

str = ""abccba""
print(is_palindrome(str))"
Design a Python program to work out the percentage of vowels present in a given string.,"Text = ""Hello World!""","def vowel_percentage(text):
    vowels = ""aeiouAEIOU""
    num_vowels = 0
    for letter in text:
        if letter in vowels:
            num_vowels += 1
    percentage = (num_vowels/len(text)) * 100
    return percentage

print(vowel_percentage(""Hello World!""))",Data Type,7504,"def vowel_percentage(text):
    vowels = ""aeiouAEIOU""
    num_vowels = ___
    for letter in text:
        if letter in vowels:
            num_vowels += ___
    percentage = (num_vowels/len(text)) * ___
    return percentage

print(vowel_percentage(""Hello World!""))"
Develop a program which reverts a string without using reverse(),Python,"def reverseString(str): 
  
    i = len(str) 
    rev_str = """" 
    while i > 0: 
        rev_str += str[i-1] 
        i = i-1
    return rev_str

str = ""Python""
print(""Original string: "" + str)
print(""Reversed string: "" + reverseString(str))",Data Type,7518,"def reverseString(str): 
  
    i = len(str) 
    rev_str = """" 
    while i > ___: 
        rev_str += str[i-___] 
        i = i-___
    return rev_str

str = ""Python""
print(""Original string: "" + str)
print(""Reversed string: "" + reverseString(str))"
Formulate a python code to remove the characters of odd index in a given string.,"string = ""welcome""","def remove_odd_index_char(string):
    """"""
    Remove the characters of odd index in a given string
    """"""
    result = """" 
    for i in range(len(string)):
        if i % 2 == 0:
            result = result + string[i] 
    return result

if __name__ == '__main__':
    string = ""welcome""
    print(remove_odd_index_char(string)) # wloe",Data Type,7539,"def remove_odd_index_char(string):
    """"""
    Remove the characters of odd index in a given string
    """"""
    result = """" 
    for i in range(len(string)):
        if i % ___ == ___:
            result = result + string[i] 
    return result

if __name__ == '__main__':
    string = ""welcome""
    print(remove_odd_index_char(string)) # wloe"
Generate a Python program that takes an input string and reverse it.,"string = ""Hello world!""","def reverse(string):
  return string[::-1]
  
string = ""Hello world!""
print(reverse(string))",Data Type,7548,"def reverse(string):
  return string[::-___]
  
string = ""Hello world!""
print(reverse(string))"
