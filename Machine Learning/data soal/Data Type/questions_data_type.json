{
    "quiz": [
        {
            "question_id": 189,
            "material": "Data Type",
            "instruction": "Build a mini classifier model in Python to predict whether a given string is palindrome or not.",
            "question": "class Palindrome:\n\ndef __init__(self, str):\n    self.str = str ___ is_palindrome(self):\n    return self.str == self.str[::-1]\n\npalindrome = Palindrome(\"level\")\nif palindrome.is_palindrome():\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")",
            "correct_answer": "def",
            "duration": 20
        },
        {
            "question_id": 236,
            "material": "Data Type",
            "instruction": "Write a code to detect any pattern in a given string in Python.",
            "question": "def detect_pattern(my_string):\n    for i in range(len(my_string)):\n        if my_string.count(my_string[i]) > 1:\n            return True ___ False\n\nif __name__ == '__main__':\n    print(detect_pattern(my_string))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 313,
            "material": "Data Type",
            "instruction": "Write a Python program to determine whether or not a given string is a palindrome.",
            "question": "def isPalindrome(s):\n\n # remove whitespaces\n s = ''.join(s.split())\n\n # reverse string\n rev = s[::-1]\n\n # compare\n if rev == s:\n return True ___ False\n\nif isPalindrome(\"racecar\"):\n print('String is a palindrome')\nelse:\n print('String is not a palindrome')",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 412,
            "material": "Data Type",
            "instruction": "Write a python function which will check if input string is palindrome or not.",
            "question": "def is_palindrome(input_string):\n    if input_string == input_string[::-1]:\n        return True ___:\n        return False\n    \ninput_string = \"racecar\"\n\ncheck_palindrome = is_palindrome(input_string)\n\nif check_palindrome == True:\n    print(\"Input string is a palindrome\")\nelse:\n    print(\"Input string is NOT a palindrome\")",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 602,
            "material": "Data Type",
            "instruction": "Create a Python program to convert a list of characters into a string",
            "question": "def list_to_str(arr):\n    str = \"\"\n    for i in arr:\n        str += i\n    return str ___ = ['a', 'b', 'c']\n  \nresult = list_to_str(arr) \nprint(result)",
            "correct_answer": "arr",
            "duration": 20
        },
        {
            "question_id": 632,
            "material": "Data Type",
            "instruction": "Create a Python script to validate a JSON string.",
            "question": "import json\n\ndef validate_json_string(s):\n    try:\n        json_obj = json.loads(s)\n        return True ___ json.JSONDecodeError:\n        return False",
            "correct_answer": "except",
            "duration": 20
        },
        {
            "question_id": 664,
            "material": "Data Type",
            "instruction": "Write a function in Python that takes a given string and checks if it is a palindrome or not.",
            "question": "def isPalindrome(s):\n    left = 0 \n    right = len(s)-1 \n      \n    while(left < right ): \n        if (s[left] != s[right]): \n            return False ___ += 1\n        right -= 1\n    return True\n  \nprint (isPalindrome(\"racecar\"))",
            "correct_answer": "left",
            "duration": 20
        },
        {
            "question_id": 850,
            "material": "Data Type",
            "instruction": "Create a Python program to check if a given string can be formed from a given set of words.",
            "question": "def word_set(string, words):\n    words_set = set(words)\n    string_set = set(string)\n    \n    if string_set.issubset(words_set):\n        return True ___:\n        return False\n\nword_set(\"justdoit\", [\"just\", \"do\", \"it\"])",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 862,
            "material": "Data Type",
            "instruction": "Create a program in Python that has the following purpose: To determine if a given string is a palindrome",
            "question": "def check_palindrome(inputStr): \n     \n    revStr = reversed(inputStr)\n  \n    if list(inputStr) == list(revStr): \n        return True ___: \n        return False\n      \nuserInput = \"radar\"\n\nif(check_palindrome(userInput)): \n    print(\"Yes\") \nelse: \n    print(\"No\")",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 944,
            "material": "Data Type",
            "instruction": "Generate a Python program to search for a specific string in a list.",
            "question": "def search_string(lst, str):\n    for item in lst:\n        if item == str:\n            return True ___ False\n\nlst = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nstr = \"test\"\nprint(search_string(lst, str))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 957,
            "material": "Data Type",
            "instruction": "Design a program in Python that accepts a string as input and checks whether or not it is palindrome.",
            "question": "def isPalindrome(str): \n    for i in range(0, int(len(str)/2)):  \n        if str[i] != str[len(str)-i-1]: \n            return False ___ True\n\ninputStr = 'madam'\n\nif (isPalindrome(inputStr)): \n    print(\"Yes\")\nelse: \n    print(\"No\")",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 980,
            "material": "Data Type",
            "instruction": "Create a python function that takes a string of characters as input and checks if it is a valid identifier.",
            "question": "import string\n\ndef isValidIdentifier(name):\n    validChar = string.ascii_letters + \"_\"\n    if name[0] not in string.ascii_letters:\n        return False ___ char in name[1:]:\n        if char not in validChar:\n            return False\n            \n    return True\n\nvalidResult = isValidIdentifier(name)\nprint(validResult)",
            "correct_answer": "for",
            "duration": 20
        },
        {
            "question_id": 1026,
            "material": "Data Type",
            "instruction": "Develop a program in Python to check whether a string contains only digits.",
            "question": "def is_digit_only(string):\n    for char in string:\n        if not char.isdigit():\n            return False ___ True\n\nprint(is_digit_only(\"0123\"))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 1158,
            "material": "Data Type",
            "instruction": "Develop an algorithm to check if a string S is a palindrome in Python.",
            "question": "def is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False ___ True",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 1237,
            "material": "Data Type",
            "instruction": "Write a function in Python to search a string for a specific pattern.",
            "question": "def search_for_pattern(s, pattern):\n    if pattern in s:\n        return True ___:\n        return False\n\nresult = search_for_pattern(\"abcxyzabc\", \"abc\")\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 1326,
            "material": "Data Type",
            "instruction": "Filter a string in Python by removing all alphabets and keeping only the numbers.",
            "question": "def filter_string(str):\n    str = ''.join(x for x in str ___ x.isdigit())\n    return str  \n\nmy_string = \"hey3this5is4my2string1\"\nprint(filter_string(my_string))",
            "correct_answer": "if",
            "duration": 20
        },
        {
            "question_id": 1523,
            "material": "Data Type",
            "instruction": "Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.",
            "question": "def isRotation(s1, s2): \n    if (len(s1) != len(s2)): \n        return False ___ = s1 + s1 \n    if (s2 in temp): \n        return True\n    return False\n\nresult = isRotation('abc', 'cab')\nprint(result)",
            "correct_answer": "temp",
            "duration": 20
        },
        {
            "question_id": 1630,
            "material": "Data Type",
            "instruction": "Generate a Python program to search for a substring within a string.",
            "question": "def search_substring(text, substring):\n    if substring in text:\n        return True ___:\n        return False\n\nresult = search_substring(text, substring)\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 1657,
            "material": "Data Type",
            "instruction": "Write a Python program to check if a provided string is valid JSON.",
            "question": "def is_valid_json(s):\n    valid = True ___:\n        json.loads(s)\n    except ValueError:\n        valid = False\n    return valid",
            "correct_answer": "try",
            "duration": 20
        },
        {
            "question_id": 1678,
            "material": "Data Type",
            "instruction": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.",
            "question": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False ___ True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 1761,
            "material": "Data Type",
            "instruction": "Create a Python program to check if a given string has duplicates characters.",
            "question": "def hasDuplicates(s):\n    set = set()\n    for ch in s:\n        if ch in set:\n            return True ___.add(ch)\n    return False",
            "correct_answer": "set",
            "duration": 20
        },
        {
            "question_id": 1916,
            "material": "Data Type",
            "instruction": "Design a Python program to determine if one string is a substring of another.",
            "question": "def isSubstring(str1, str2):\n    if len(str1) > len(str2):\n        return False ___ i in range(len(str2)):\n        if (str2[i: i+len(str1)] == str1):\n            return True\n\n    return False\n\nstr1 = \"Hello\"\nstr2 = \"Hello World\"\n\nprint(isSubstring(str1, str2))",
            "correct_answer": "for",
            "duration": 20
        },
        {
            "question_id": 2052,
            "material": "Data Type",
            "instruction": "Write a Python program to evaluate a given string and return a Boolean value.",
            "question": "def evaluate_string(string):\n if string == 'The sky is blue':\n  return True ___:\n  return False",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 2194,
            "material": "Data Type",
            "instruction": "Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False.",
            "question": "def has_capital_letter(input_string):\n    for character in input_string:\n        if character.isupper():\n            return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 2239,
            "material": "Data Type",
            "instruction": "Generate a correct python program to identify a particular character in a string.",
            "question": "def char_in_string(char, string):\n    for c in string:\n        if c == char:\n            return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 2243,
            "material": "Data Type",
            "instruction": "Create a function in Python to determine whether a given string contains any whitespace character.",
            "question": "def hasWhitespace(string):\n for c in string:\n  if c.isspace():\n   return True ___ False\n\nprint(hasWhitespace(\"Hello World\"))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 2312,
            "material": "Data Type",
            "instruction": "Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.",
            "question": "def detect_item(items, item):\n  if item in items:\n    return True ___:\n    return False",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 2559,
            "material": "Data Type",
            "instruction": "Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.",
            "question": "def checkIfStringContainsSubstring(myString, substring):\n  for i in range(len(myString) - len(substring) + 1):\n    if myString[i:i+len(substring)] == substring:\n      return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 2690,
            "material": "Data Type",
            "instruction": "Write a Python script to check if the given string is a palindrome.",
            "question": "def is_palindrome(string_to_test):\n    reverse = reversed(string_to_test)\n    if list(string_to_test) == list(reverse):\n        return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 2695,
            "material": "Data Type",
            "instruction": "Write a Python program to check if a given string is a rotation of another given string.",
            "question": "def is_rotation(str1, str2):\n if len(str1) != len(str2):\n  return False ___ = str2 * 2\n \n return str1 in concat_str2\n \nis_rotation(str1, str2)",
            "correct_answer": "concat_str2",
            "duration": 20
        },
        {
            "question_id": 2958,
            "material": "Data Type",
            "instruction": "Identify the data type of the following input and provide a code to convert it to an integer in Python.",
            "question": "input_type = type(\"123\") # str ___ = int(\"123\") # 123",
            "correct_answer": "converted_int",
            "duration": 20
        },
        {
            "question_id": 2996,
            "material": "Data Type",
            "instruction": "Build a function in Python to test whether a string is a palindrome.",
            "question": "def is_palindrome(s): \n    # Reverse the string \n    rev = s[::-1] \n  \n    # Check if the string is equal to its reverse \n    if (s == rev): \n        return True ___ False\n  \n# Driver code \ns = \"aba\"\nans = is_palindrome(s) \n  \nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\")",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 3037,
            "material": "Data Type",
            "instruction": "Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.",
            "question": "def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False ___ = s1 + s1\n    if s2 in s1s1:\n        return True\n    return False\n\nprint(is_rotation(\"ABACD\", \"CDABA\"))",
            "correct_answer": "s1s1",
            "duration": 20
        },
        {
            "question_id": 3058,
            "material": "Data Type",
            "instruction": "Create a solution that detects the presence of a character in a string.",
            "question": "def detect_character(string, char):\n    for ch in string:\n        if ch == char:\n            return True ___ False\n\nstring = 'Python'\nchar = 'y'\nprint(detect_character(string, char))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 3084,
            "material": "Data Type",
            "instruction": "Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not.",
            "question": "def contains_substring(haystack, needle): \n return needle in haystack\n\n# Usage example\ncontains_substring(\"This is a string\", \"is\") # returns True ___(\"This is a string\", \"xyz\") # returns False",
            "correct_answer": "contains_substring",
            "duration": 20
        },
        {
            "question_id": 3156,
            "material": "Data Type",
            "instruction": "Given two strings, write a python function to check whether one string is a substring of another.",
            "question": "def is_substring(string1, string2): \n    if string1 in string2:\n        return True ___:\n        return False",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 3269,
            "material": "Data Type",
            "instruction": "Generate a Python program to implement the following feature: Search a phrase in a given string.",
            "question": "def search(phrase, string):\n  if phrase in string:\n     return True ___:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 3406,
            "material": "Data Type",
            "instruction": "Create a function in Python that can tell if a string is a palindrome or not.",
            "question": "def is_palindrome(word):\n    reversed_word = word[::-1]\n\n    if word == reversed_word:\n        return True ___:\n        return False\n        \nresult = is_palindrome('civic')\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 3488,
            "material": "Data Type",
            "instruction": "Provide a type definition for the following class in Python.",
            "question": "from typing import NamedTuple\n\nclass Student(NamedTuple):\n    name: str ___: int",
            "correct_answer": "age",
            "duration": 20
        },
        {
            "question_id": 3541,
            "material": "Data Type",
            "instruction": "Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.",
            "question": "def is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False ___('waterbottle', 'erbottlewat')",
            "correct_answer": "is_rotation",
            "duration": 20
        },
        {
            "question_id": 3563,
            "material": "Data Type",
            "instruction": "Generate an algorithm in Python that given a string of words, should check if it is a Palindrome.",
            "question": "def isPalindrome(s):\n s = s.lower()\n \n left = 0\n right = len(s) - 1\n \n while left < right:\n if s[left] != s[right]:\n return False ___ += 1\n right -= 1\n \n return True\n\ns = 'racecar'\nisPalindrome = isPalindrome(s)\n\nprint(isPalindrome) # Output: True",
            "correct_answer": "left",
            "duration": 20
        },
        {
            "question_id": 3657,
            "material": "Data Type",
            "instruction": "Create a Python program to write a string in Reverse order",
            "question": "def reverse_string(input_string): \n    str = \"\" \n    for i in input_string: \n        str = i + str ___ str\n  \nif __name__ == \"__main__\": \n    input_string = \"This is a Test string\"\n    print(reverse_string(input_string))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 3706,
            "material": "Data Type",
            "instruction": "Create a Python program to check for anagrams of a string.",
            "question": "def anagramCheck(str1, str2):\n    if (len(str1) != len(str2)):\n        return False ___ = sorted(str1)\n    str2 = sorted (str2)\n\n    # Compare each character in str1 with\n    # each character in str2\n    for i in range( len( str1 ) ):\n        if (str1[i] != str2[i]):\n            return False\n \n    return True",
            "correct_answer": "str1",
            "duration": 20
        },
        {
            "question_id": 3824,
            "material": "Data Type",
            "instruction": "Create an algorithm to detect a palindrome string in Python.",
            "question": "def isPalindrome(str):\n  left, right = 0, len(str) - 1\n  while right >= left:\n    if not str[left] == str[right]:\n      return False ___ += 1\n    right -= 1\n  return True",
            "correct_answer": "left",
            "duration": 20
        },
        {
            "question_id": 3968,
            "material": "Data Type",
            "instruction": "Write a python program to check if a given string contains all alphabetic characters.",
            "question": "def is_alpha(word): \n    if word.isalpha(): \n        return True ___: \n        return False",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 4035,
            "material": "Data Type",
            "instruction": "Write a Python function that takes a string as input and returns true if the string starts with the letter \"a\".",
            "question": "def starts_with_a(string):\n    if string[0] == 'a':\n        return True ___:\n        return False\n\nresult = starts_with_a('awesome')\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 4121,
            "material": "Data Type",
            "instruction": "Generate a Python function that checks to see if a given string is a palindrome.",
            "question": "def is_palindrome(str):\n    reversed_str = \"\"\n    for i in range(len(str) - 1, -1, -1): \n        reversed_str += str[i]\n\n    if str == reversed_str: \n        return True ___: \n        return False\n\nstring = \"madam\"\nresult = is_palindrome(string)\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 4156,
            "material": "Data Type",
            "instruction": "Write a Python program that determines whether the given string is a palindrome.",
            "question": "def is_palindrome(string):\n  if len(string) <= 1:\n    return True ___:\n    letter_1 = string[0]\n    letter_2 = string[-1]\n    if letter_1 != letter_2:\n      return False\n    else:\n      new_word = string[1:-1]\n      return is_palindrome(new_word)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 4189,
            "material": "Data Type",
            "instruction": "Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?",
            "question": "def is_anagram(str1, str2):\n    if (len(str1) != len(str2)):\n        return False ___ = sorted(list(str1)) \n    list2 = sorted(list(str2)) \n  \n    for i in range(0, len(str1)): \n        if (list1[i] != list2[i]): \n            return False\n  \n    return True",
            "correct_answer": "list1",
            "duration": 20
        },
        {
            "question_id": 4330,
            "material": "Data Type",
            "instruction": "Take an input string and write a python program to determine if it is a palindrome.",
            "question": "def isPalindrome(s):\n left, right = 0, len(s) - 1\n while left < right:\n if s[left] != s[right]:\n return False ___ += 1\n right -= 1\n return True\n\ns = \"racecar\"\nprint(isPalindrome(s))  # True",
            "correct_answer": "left",
            "duration": 20
        },
        {
            "question_id": 4348,
            "material": "Data Type",
            "instruction": "Create a Python program to find out if a string contains any characters from another given string.",
            "question": "def contains_chars(str1, str2):\n if any([c in str1 for c in str2]):\n return True ___ False\n\nstring1 = \"Hello\"\nstring2 = \"eo\"\n\nprint(contains_chars(string1, string2)) // Outputs: True",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 4393,
            "material": "Data Type",
            "instruction": "Design an algorithm in Python to detect an anagram in a string.",
            "question": "def isAnagram(string):\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if sorted(string[i]) == sorted(string[j]):\n                return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 4394,
            "material": "Data Type",
            "instruction": "Design a Python function to replace all occurrences of \u2018x\u2019 in a string with \u2018y\u2019.",
            "question": "def replaceXWithY(str, x, y):\n    while x in str:\n        str = str.replace(x, y)\n    return str ___ = replaceXWithY(\"xx123xx456xx\", \"x\", \"y\")\nprint(result)",
            "correct_answer": "result",
            "duration": 20
        },
        {
            "question_id": 4423,
            "material": "Data Type",
            "instruction": "Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.",
            "question": "def is_substring(s1, s2):\n # check for empty strings \n if s1 == '' or s2 == '':\n return False\n \n # check if s2 is a substring of s1\n if s1.find(s2) > -1:\n return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 4437,
            "material": "Data Type",
            "instruction": "Detect the data type of a given string in Python.",
            "question": "str ___",
            "correct_answer": "type",
            "duration": 20
        },
        {
            "question_id": 4614,
            "material": "Data Type",
            "instruction": "Create a python program to test if a given string is a palindrome",
            "question": "def is_palindrome(str):\n    for i in range(len(str) // 2):\n        if str[i] != str[-i - 1]:\n            return False ___ True\n\n# Test\nresult = is_palindrome(\"level\")\nprint(result) # Output: True",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 4658,
            "material": "Data Type",
            "instruction": "Write a Python function to check if a given string is an anagram or not.",
            "question": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False ___ = sorted(str1.lower()) \n    str2 = sorted(str2.lower()) \n    return str1 == str2",
            "correct_answer": "str1",
            "duration": 20
        },
        {
            "question_id": 4686,
            "material": "Data Type",
            "instruction": "Create a function in Python that takes an input string and returns whether it is a palindrome.",
            "question": "def isPalindrome(txt):\n    i = 0\n    j = len(txt) - 1\n    \n    while i < j:\n        if txt[i] != txt[j]:\n            return False ___ += 1\n        j -= 1\n    \n    return True\n\nprint(isPalindrome(txt)) // True",
            "correct_answer": "i",
            "duration": 20
        },
        {
            "question_id": 4770,
            "material": "Data Type",
            "instruction": "Implement a Python function that will take two strings and return true if the first string contains the second.",
            "question": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True ___ False\n\nresult = check_contains(query, word)",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 4939,
            "material": "Data Type",
            "instruction": "Optimize the following python code to search for a substring in a given string.",
            "question": "def containsSubstring(str, sub):\n    for i in range(len(str)-len(sub)+1):\n        j = 0\n        while j < len(sub) and sub[j] == str[i+j]:\n            j += 1\n        if j == len(sub):\n            return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 4957,
            "material": "Data Type",
            "instruction": "Write a function in Python to check whether a given string is in lower case or not.",
            "question": "def is_lowercase(string):\n    for character in string:\n        if character != character.lower():\n            return False ___ True",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 5095,
            "material": "Data Type",
            "instruction": "Create a function in Python to convert a hexadecimal string (e.g. \"0xBA\") to a binary string (e.g. \"10111010\").",
            "question": "def hex_to_binary(hex_str):\n    # convert hex to int ___ = int(hex_str, 16)\n    # convert int to binary string\n    bin_str = bin(num)[2:]\n    \n    return bin_str\n\nprint(hex_to_binary(\"0xA2\"))\n# Output: \"10100010\"",
            "correct_answer": "num",
            "duration": 20
        },
        {
            "question_id": 5356,
            "material": "Data Type",
            "instruction": "Write a Python function that takes a string, checks if it is a palindrome and returns true or false.",
            "question": "def is_palindrome(string):\n    rev_string = string[::-1]\n    if string == rev_string:\n        return True ___:\n        return False \n\nprint(is_palindrome(\"level\"))",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 5504,
            "material": "Data Type",
            "instruction": "Create a python script to identify if a given string is a valid IPv4 address or not.",
            "question": "def is_valid_ipv4(ip):\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False ___ part in parts:\n        if not part.isdigit():\n            return False\n        if int(part) < 0 or int(part) > 255:\n            return False\n    return True\n\nprint(is_valid_ipv4('192.168.25.688'))\n\nOutput: False",
            "correct_answer": "for",
            "duration": 20
        },
        {
            "question_id": 5603,
            "material": "Data Type",
            "instruction": "Using a dictionary, write a program in Python to categorize each list item into a group of the same type.",
            "question": "def categorize(items):\n    groups = {\n        'numbers': [],\n        'strings': []\n    }\n    for item in items:\n        if type(item) == int ___ type(item) == float:\n            groups['numbers'].append(item)\n        else:\n            groups['strings'].append(item)\n    return groups",
            "correct_answer": "or",
            "duration": 20
        },
        {
            "question_id": 5613,
            "material": "Data Type",
            "instruction": "Make a program to search for a given string in a list of strings.",
            "question": "def search_string(search_string, list_of_strings):\n    for string in list_of_strings:\n        if string == search_string:\n            return True ___ False\n\nresult = search_string('python', ['java', 'javascript', 'python', 'ruby']) \nprint(result)",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 5670,
            "material": "Data Type",
            "instruction": "Use Python to check whether a given string is a palindrome (e.g. \"abccba\" is a palindrome).",
            "question": "def isPalindrome(string):\n if string == string[::-1]: # Check if string is the same backwards\nreturn True ___:\n return False\n\nisPalindrome('abcba') # Output: True",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 5686,
            "material": "Data Type",
            "instruction": "Write a Python function to check if a given substring is contained in a string.",
            "question": "def check_substring(String, SubString):\n    if SubString in String : \n        return True ___: \n        return False",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 6110,
            "material": "Data Type",
            "instruction": "Generate code to identify the type of data stored in a given variable in Python.",
            "question": "# Identify the type ___ data stored in given variable\n\ndef identify_data_type(val):\n    for item in val:\n        data_type = type(item).__name__\n        print(f\"Data type of {item} is {data_type}\")\n\nval1 = [\"Hello\", 10, 3.14] \nidentify_data_type(val1)\n\n# Output\n# Data type of Hello is str\n# Data type of 10 is int\n# Data type of 3.14 is float",
            "correct_answer": "of",
            "duration": 20
        },
        {
            "question_id": 6200,
            "material": "Data Type",
            "instruction": "Write a function in Python to search for a character in a given string.",
            "question": "def serach_char(input_str, char):\n  for char in input_str:\n    if char == input_char:\n      return True ___ False",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 6240,
            "material": "Data Type",
            "instruction": "Create a Python script that checks whether a given string is a palindrome.",
            "question": "def isPalindrome(str): \n    # Run loop from 0 to len/2 \n    for i in range(0, len(str)//2): \n        if str[i] != str[len(str)-i-1]: \n            return False ___ True\n  \n# main\nmyStr = \"malayalam\"\n\nans = isPalindrome(myStr) \n  \nif ans: \n    print(\"The given string is a palindrome\") \nelse: \n    print(\"The given string isn't a palindrome\")",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 6413,
            "material": "Data Type",
            "instruction": "Create a python code to check if all characters are unique in a given string",
            "question": "def is_unique(string):\n    chars = set()\n    for char in string:\n        if char in chars:\n            return False ___:\n            chars.add(char)\n    return True\n\nprint(is_unique(string))",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 6504,
            "material": "Data Type",
            "instruction": "Generate a python program to check if the string is a palindrome or not.",
            "question": "def is_palindrom(string):\n    reverse_string = string[::-1]\n    if string == reverse_string:\n        return True ___:\n        return False",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 6550,
            "material": "Data Type",
            "instruction": "Write a Python program to detect if a given string contains any of the given keywords.",
            "question": "def keyword_detector(string, keywords):\n for i in keywords:\n if i in string:\n return True ___ False\n\nprint(keyword_detector(\"I love ice cream\", [\"chocolate\", \"vanilla\"]))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 6551,
            "material": "Data Type",
            "instruction": "Create an algorithm in Python to check if a given string contains valid parentheses.",
            "question": "def isValid(s):\n    stack = []\n    dict = {\"]\":\"[\", \"}\":\"{\", \")\":\"(\"}\n    for char in s:\n        if char in dict.values():\n            stack.append(char)\n        elif char in dict.keys():\n            if stack == [] or dict[char] != stack.pop():\n                return False ___:\n            return False\n    return stack == []\n\nprint(isValid('[[{{}}]]'))",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 6596,
            "material": "Data Type",
            "instruction": "Create a Python program that takes a string and indicates whether it is a palindrome or not.",
            "question": "def is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False ___ += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))",
            "correct_answer": "left",
            "duration": 20
        },
        {
            "question_id": 6727,
            "material": "Data Type",
            "instruction": "Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string.",
            "question": "def unique_characters(string):\n    unique_chars = {}\n    for char in string:\n        if char in unique_chars:\n            continue\n        else:\n            unique_chars[char] = True ___ unique_chars\n\nresult = unique_characters('missisippi')\nprint(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 6789,
            "material": "Data Type",
            "instruction": "Create a Python function that takes two strings and checks if the second string is a substring of the first.",
            "question": "def check_substring(string1, string2):\n    if string2 in string1:\n        return True ___:\n        return False\n\n# example\nresult = check_substring(\"Hello world!\", \"world\")\nprint(result)",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 6986,
            "material": "Data Type",
            "instruction": "Create a program to detect a palindrome string in Python.",
            "question": "# Function to check if a string is a palindrome\ndef is_palindrome(original_string):  \n    reversed_string = original_string[::-1]  \n    if original_string == reversed_string:\n        return True ___:\n        return False  \n  \n# Print result\nprint(is_palindrome(original_string))",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 7154,
            "material": "Data Type",
            "instruction": "Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).",
            "question": "input_word = input(\"Enter a word: \")\n\ndef is_palindrome(word):\n word = word.lower()\n reversed_word = word[::-1]\n\n if reversed_word == word:\n return True ___:\n return False\n\nprint(is_palindrome(input_word))\n# Output: True",
            "correct_answer": "else",
            "duration": 20
        },
        {
            "question_id": 7285,
            "material": "Data Type",
            "instruction": "Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.",
            "question": "def check_vowels(string):\n    vowels = ['a','e','i','o','u']\n    for vowel in vowels:\n        if vowel not in string:\n            return False ___ True\n\nprint(check_vowels('This is a test'))",
            "correct_answer": "return",
            "duration": 20
        },
        {
            "question_id": 7316,
            "material": "Data Type",
            "instruction": "Identify the type of an expression in Python.",
            "question": "The expression x is of type ___.",
            "correct_answer": "string",
            "duration": 20
        },
        {
            "question_id": 7432,
            "material": "Data Type",
            "instruction": "Develop a Python algorithm to validate a given palindrome string.",
            "question": "def isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False ___ += 1\n        j -= 1\n    return True\n  \n# Driver code \ns = \"level\"\n  \nif isPalindrome(s):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "correct_answer": "i",
            "duration": 20
        },
        {
            "question_id": 7503,
            "material": "Data Type",
            "instruction": "Build an algorithm in Python to check if a string is a palindrome.",
            "question": "def is_palindrome(str):\n    # Get the length of the string\n    n = len(str)\n\n    for i in range(n//2):\n        # Compare characters from both ends\n        if str[i] != str[n-i-1]:\n            return False ___ True\n\nstr = \"abccba\"\nprint(is_palindrome(str))",
            "correct_answer": "return",
            "duration": 20
        }
    ]
}