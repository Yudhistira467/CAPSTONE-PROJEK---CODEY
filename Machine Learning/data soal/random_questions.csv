Instruction,Input,Output,materi,question_id,Template,correct_answer,category
Generate a Python code to print all the animal types entered in a list,"[""dog"", ""cat"", ""mouse"", ""snake""]","animal_list = [""dog"", ""cat"", ""mouse"", ""snake""] 

for animal in animal_list:
    print(animal)",Introduction Python,4457,"animal_list = [""dog"", ""cat"", ""mouse"", ""snake""] 

for animal in animal_list:
    print(___)",animal,Introduction_Python_with_placeholders
"Make a program in Python to print a staircase of height 'n', where n is an integer.",5,"def staircase(n): 
    for i in range(0, n): 
        for j in range(0, n - i - 1): 
            print(end="" "") 
        for j in range(0, i + 1): 
            print(""#"", end="""") 
        print(""\r"") 
  
# Driver code 
n = 5
staircase(n)",Introduction Python,1810,"def staircase(n): 
    for i in range(0, n): 
        for j in range(0, n - i - 1): 
            print(end="" "") 
        for j in range(0, i + 1): 
            print(""#"", end="""") 
        print(___) 
  
# Driver code 
n = 5
staircase(n)","""\r""",Introduction_Python_with_placeholders
Create an optimized Python program to print all prime numbers in a given range.,Apr-15,"def is_prime(n):
    if n <= 1:
        return False
  
    for i in range(2, n):
        if n % i == 0:
            return False
  
    return True
 
start = 4
end = 15
 
for num in range(start, end+1):
   if is_prime(num):
       print(num)",Introduction Python,2607,"def is_prime(n):
    if n <= 1:
        return False
  
    for i in range(2, n):
        if n % i == 0:
            return False
  
    return True
 
start = 4
end = 15
 
for num in range(start, end+1):
   if is_prime(num):
       print(___)",num,Introduction_Python_with_placeholders
Create a python program to calculate Fibonacci sequence for a given number.,n = 8,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    n = 8
    print(fibonacci(n))",Control Structure,7237,"def fibonacci(n):
    if ___ == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    n = 8
    print(fibonacci(n))",n,control_structure_with_placeholders
Build a Python class to identify if a provided number is prime or composite.,10,"class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
else:
    print(""Number is Composite"")",Control Structure,1638,"class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for ___ in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
else:
    print(""Number is Composite"")",i,control_structure_with_placeholders
Generate a Python script for searching for a pattern in a given text.,"Text: ""The cat jumped over the fence""
Pattern: ""cat""","import re
text = ""The cat jumped over the fence""
pattern = ""cat""
match = re.search(pattern, text)
if match:
    print(""Pattern found!"")",Control Structure,6052,"import re
text = ""The cat jumped over the fence""
pattern = ""cat""
match = re.search(pattern, text)
if ___:
    print(""Pattern found!"")",match,control_structure_with_placeholders
Create a Python script to sort a list of tuples by the second element in the tuple in ascending order.,"myList = [('Tom',7),('Harry',5),('Bob',8)]","def sortList(myList): 
 # sort list by second element  
 myList.sort(key = lambda x: x[1]) 
  
 # printing the sorted list  
 print (""The sorted list in ascending order is : "") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)",Data Structure,2786,"def sortList(myList): 
 # sort list ___ second element  
 myList.sort(key = lambda x: x[1]) 
  
 # printing the sorted list  
 print (""The sorted list in ascending order is : "") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)",by,data_structure_with_placeholders
Write a Python program to sort a given array in ascending order.,"array = [3, 1, 5, 4, 2]","def sort_ascending(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array

array = [3, 1, 5, 4, 2]
print(sort_ascending(array))",Data Structure,4663,"def sort_ascending(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array ___ = [3, 1, 5, 4, 2]
print(sort_ascending(array))",array,data_structure_with_placeholders
Generate a Python program to insert an element into a given sorted array.,"The sorted array is [1, 2, 3, 5] and the new element is 4.","def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array and element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)",Data Structure,2571,"def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array ___ element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)",and,data_structure_with_placeholders
Filter a string in Python by removing all alphabets and keeping only the numbers.,"my_string = ""hey3this5is4my2string1""","def filter_string(str):
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))",Data Type,1326,"def filter_string(str):
    str = ''.join(x for x in str ___ x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))",if,data_type_with_placeholders
Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?,"s1 = ""restful""
s2 = ""fluster""","def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True",Data Type,4189,"def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False ___ = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True",list1,data_type_with_placeholders
Write a python function which will check if input string is palindrome or not.,"input_string = ""racecar""","def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")",Data Type,412,"def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True ___:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")",else,data_type_with_placeholders
Create a function in Python that takes an integer input and prints all combinations of the numbers.,4,"def permutations(n):
 for i in range(n+1):
  for j in range(n+1):
   for k in range(n+1):
    for l in range(n+1):
     print(i,j,k,l)

# Calling the function
permutations(4)",Function,3080,"def ___(n):
 for i in range(n+1):
  for j in range(n+1):
   for k in range(n+1):
    for l in range(n+1):
     print(i,j,k,l)

# Calling the function
permutations(4)",permutations,function_with_placeholders
Create a function in Python to solve the following constraint problem.,"Given two arrays of integers, find the number of elements in the intersection of the two sets.","def intersection(arr1,arr2): 
    result = 0
    resultSet = set(arr1) & set(arr2)
    result = len(resultSet)
    return result",Function,512,"def ___(arr1,arr2): 
    result = 0
    resultSet = set(arr1) & set(arr2)
    result = len(resultSet)
    return result",intersection,function_with_placeholders
Create a function in Python that finds the common elements two arrays.,"arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 6, 7, 8]","def find_common_elements(arr1, arr2):
  common = []
  for element in arr1:
    if element in arr2:
      common.append(element)
  return common

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 6, 7, 8]

print(find_common_elements(arr1, arr2))",Function,5386,"def ___(arr1, arr2):
  common = []
  for element in arr1:
    if element in arr2:
      common.append(element)
  return common

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 6, 7, 8]

print(find_common_elements(arr1, arr2))",find_common_elements,function_with_placeholders
Create a Python class with the given attributes and functions.,"Attributes: name (string), age (integer), email address (string)
Function: toString() - return a string with the formatted attributes","class Person:
    
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email
    
    def toString(self):
        return f""Name: {self.name}, Age: {self.age}, Email: {self.email}""",OOP,3963,"class ___:
    
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email
    
    def toString(self):
        return f""Name: {self.name}, Age: {self.age}, Email: {self.email}""",Person,oop_with_placeholders
Create a python class that simulates an invoice with information about the item and the cost.,"Example of an Invoice:

Item: Pen
Price: $3","class Invoice:
    def __init__(self, item, price):
        self.item = item
        self.price = price
    
    def get_item(self):
        return self.item
    
    def get_price(self):
        return self.price

invoice = Invoice(""Pen"", 3)",OOP,2520,"class ___:
    def __init__(self, item, price):
        self.item = item
        self.price = price
    
    def get_item(self):
        return self.item
    
    def get_price(self):
        return self.price

invoice = Invoice(""Pen"", 3)",Invoice,oop_with_placeholders
"using the following Json as an example, write a Python program that reads this Json into an object.","{
   ""id"":1,
   ""name"":""Testing"",
   ""description"":""This is a test""
}","import json

# example data
data = '{""id"":1,""name"":""Testing"",""description"":""This is a test""}'

# parse data into a Python object
obj = json.loads(data)

print(obj)",OOP,2208,"import json

# example data
data = '{""id"":1,""name"":""Testing"",""description"":""This is a test""}'

# parse data into a Python object ___ = json.loads(data)

print(obj)",obj,oop_with_placeholders
"Given a json-formatted string, create a python program to parse it into a dict.","data = '{""name"": ""John"",""age"": 30,""address"": {""city"": ""New York"",""state"": ""NY""}}'","import json

data = '{""name"": ""John"",""age"": 30,""address"": {""city"": ""New York"",""state"": ""NY""}}'

data_dict = json.loads(data)",Operator,3069,"import json

data = '{""name"": ""John"",""age"": 30,""address"": {""city"": ""New York"",""state"": ""NY""}}'

data_dict = ___.loads(data)",json,operator_with_placeholders
"Given a multi-dimensional array, write a python code snippet to find the sum of its elements.","arr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]","# Use nested list comprehension to calculate the sum 
total_sum = sum([sum(row) for row in arr])",Operator,4237,"# Use nested list comprehension to calculate the sum 
total_sum = ___([sum(row) for row in arr])",sum,operator_with_placeholders
Create a function in Python to convert a given time from 12-hour clock format to 24-hour clock format.,3:45pm,"def time_conversion(time):
    # Get hour and convert it to 24-hour format
    hour = int(time[:2])
    if time[-2:] == ""PM"":
        hour += 12
    # Get minutes
    min = time[-5:-3]

    return str(hour) + "":"" + min

# Test
print(time_conversion(""3:45pm"")) # 15:45",Operator,3643,"def time_conversion(time):
    # Get hour and convert it to 24-hour format
    hour = ___(time[:2])
    if time[-2:] == ""PM"":
        hour += 12
    # Get minutes
    min = time[-5:-3]

    return str(hour) + "":"" + min

# Test
print(time_conversion(""3:45pm"")) # 15:45",int,operator_with_placeholders
Create a utility in Python to generate a PDF of a webpage. The utility should accept a URL as input and generate a PDF of the webpage in the same directory.,https://www.example.com,"import pdfkit

def generate_pdf(url):
 filename = url.rsplit('/', 1)[-1] + '.pdf'
 pdfkit.from_url(url, filename)

if __name__ == '__main__':
 url = input('Enter a URL: ')
 generate_pdf(url)",Lainnya,7542,"import ___

def generate_pdf(url):
 filename = url.rsplit('/', 1)[-1] + '.pdf'
 pdfkit.from_url(url, filename)

if __name__ == '__main__':
 url = input('Enter a URL: ')
 generate_pdf(url)",pdfkit,others_with_placeholders
"You need to optimise a given Python code, which takes a  3x3 matrix as input and outputs the inverse.","import numpy as np

def inverse_matrix(matrix):
    return np.linalg.inv(matrix)","import numpy as np

def inverse_matrix(matrix):
    det = np.linalg.det(matrix)
    if det == 0:
        return None 
    return np.dot(np.linalg.inv(matrix), 1/det)",Lainnya,2460,"import ___ as np

def inverse_matrix(matrix):
    det = np.linalg.det(matrix)
    if det == 0:
        return None 
    return np.dot(np.linalg.inv(matrix), 1/det)",numpy,others_with_placeholders
"In Python, parse the following XML document and extract the book title and author.","<book>
  <title>Title1</title>
  <author>Author1</author>
</book>","# import the necessary libraries
import xml.etree.ElementTree as ET

# Parse the XML document
root = ET.fromstring(xml_doc)

for book in root:
    if book.tag == 'title':
        title = book.text
    elif book.tag == 'author':
        author = book.text

print(f""Book Title: {title}, Author: {author}"")",Lainnya,5811,"# import ___ necessary libraries
import xml.etree.ElementTree as ET

# Parse the XML document
root = ET.fromstring(xml_doc)

for book in root:
    if book.tag == 'title':
        title = book.text
    elif book.tag == 'author':
        author = book.text

print(f""Book Title: {title}, Author: {author}"")",the,others_with_placeholders
Write a python program to search through a list of integers and find the smallest number.,"int_list = [25, 64, 11, 43, 7]","def find_smallest(int_list):
    # set the minimum value to the first item in the list initially
    min_val = int_list[0]
    # loop over the list and compare each item to the minimum value
    for num in int_list:
        if num < min_val:
            min_val = num
    # return the minimum value
    return min_val",Data Structure,4038,"def find_smallest(int_list):
    # set ___ minimum value to the first item in the list initially
    min_val = int_list[0]
    # loop over the list and compare each item to the minimum value
    for num in int_list:
        if num < min_val:
            min_val = num
    # return the minimum value
    return min_val",the,data_structure_with_placeholders
